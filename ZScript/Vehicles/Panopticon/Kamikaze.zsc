//IDEA:
//Add swarm behavior? Like moving in groups and unique behavior for following other actors, like escorting other NPCs. Also especially, preventing them from dogpiling.

Class MVP_KamikazeDrone : MVP_BaseFlyer
{
	Default
	{
		//$Title Loitering Munition
		//$Category Vehicles/Panopticon
		//$Sprite PND1E1
		
		+KAI_Actor.NoTargetPrediction; //It's a flying bomb.
		Tag "Loitering Munition";
		KAI_Actor.ThreatLevelThreshold THREAT_ASSESS; //We don't care.
		KAI_Actor.ThreatLevel THREAT_ABOVENORMAL;
		KAI_Actor.FlightAcceleration 0.25;
		KAI_Actor.FlightDeceleration 0.5;
		KAI_Actor.FlightWrongDirFactor 2.5;
		//FriendlySeeBlocks 32; 
		+WindThrust;
		+Pushable;
		+SlidesOnWalls;
		-AvoidHazards; //You stupid.
		+SeeInvisible; //Fuck
		+FloatBob; //Scales with speed
		+LookAllAround; //Fuck x2
		+DontFollowPlayers; //Only when trying to kill them.
		-CountKill;
		
		Health 15;
		XScale 0.3;
		YScale 0.25; //0.3/1.2
		WoundHealth 8;
		ExplosionRadius 192;
		ExplosionDamage 128;
		FloatSpeed 3;
		FloatBobStrength 0.5;
		Mass 16; //Going by the convention that each integer is a kilo, this thing shouldn't be 16 kilos, but you know how Jazzy Doom is.
		Height 12;
		Radius 10;
		CameraHeight 5;
		Obituary "%o didn't hear the buzzing in time";
		ActiveSound "Vehicle/Drone/Buzz";
		DamageType "Explosive";
		MeleeRange 72; //Once in here, check if we will hit the target.
		Speed 16;
		FastSpeed 20;
		Friction 0.5;
		DamageFunction (Random(16,32));
		Decal "BulletChip"; //HACK: This isn't the explosions' decal, that's manually sprayed, nope, this is the decal of the shrapnel, not the one on the shrapnel puff!
		
		//The loitering munition is incredibly fragile to everything vehicles are normally protected against.
		RipLevelMin 0;
		DamageFactor "Melee", 0.8;
		DamageFactor "Electric", 0.8;
		DamageFactor "ExplosiveImpact", 1.5;
		DamageFactor "Explosion", 1.5;
		DamageFactor "Explosive", 1.5;
		DamageFactor "Grenade", 1;
		DamageFactor "HitScan", 1; //The generic damage type of hitscan attacks.
		DamageFactor "Shrapnel", 0.9;
		DamageFactor "Fire", 1;
		DamageFactor "Crush", 1.5;
		DamageFactor "Disintegrate", 1.5;
		DamageFactor "Railgun", 2.0;
		DamageFactor "Falling", 1.25;
		DamageFactor "MarineHMG", 1;
		DamageFactor "LargeRifleBullet", 1; //Replaces MarineHMG.
		DamageFactor "MarineGrenade", 1;
		DamageFactor "MarineRifle", 1;
		DamageFactor "Autocannon", 1;
		DamageFactor "RifleBullet", 1;
		DamageFactor "SmallRifleBullet", 1;
	}
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		If (!User_Landed) StartFlight();
		MissileState = MeleeState = SeeState; //We do have attacks, yes.
		HazardTags.Push ("Drone");
		HazardTags.Push ("Explosive");
	}
	
	Override Void Tick()
	{
		KAI_Actor.Tick(); //It's a VERY basic vehicle.
		If (IsFrozen())
			Return;
		
		bDontFollowPlayers = True; //No idea what's turning it off.
		
		//Still keep the debug stuff though.
		If (DebugPoint)
			DebugPoint.SetOrigin (KAI_Math.IsEmptyVector3(NextMovePos) ? Pos : NextMovePos,True);
		
		//Scale visual bobbing with speed.
		FloatBobStrength = KAI_Math.LinearMap (Vel.Length(),0,6,Default.FloatBobStrength,0.05);
		FloatBobStrength = Clamp (FloatBobStrength,0,Default.FloatBobStrength);
		//Console.Printf ("Bob strength %.2f",FloatBobStrength);
		
		//Replace sprites to make it visually lean based on how high its' velocity is and where it's heading relative to its' current angle.
		If (CurState && !IsInState (Self,"Death"))
		{
			//HACK: Frames are offset by -1 to stop the states from flickering to the default state sprite for one tick on every state change.
			//KLUDGE: Oh also do NOT shift them by +1 instead, as that makes them basically switch every tick regardless of the state machine!
			Switch (Frame)
			{
				Case 3: //A
					Frame = LeanFlyerAround (4,8,0); // E, I, A
					Break;
				Case 0: //B
					Frame = LeanFlyerAround (5,9,1); // F, J, B
					Break;
				Case 1: //C
					Frame = LeanFlyerAround (6,10,2); // G, K, C
					Break;
				Case 2: //D
					Frame = LeanFlyerAround (7,11,3); // H, L, D
					Break;
				Default:
					Break;
			}
		}
		
		If (IsInState (Self,"See"))
		{
			//In seeking mode, so also detonate at any other enemy we bump to along the way.
			//HACK: This apparently just doesn't fucking work!
			//If (BlockingMobj && !IsInanimateObject(BlockingMobj) && IsActorHostile(BlockingMobj))
			//	ExplodeMissile (Null,BlockingMobj);
			
			//Slow down the closer we are to hitting a wall so that we can climb it, kinda like crude obstalce avoidance.
			If (Health > WoundHealth && LineTrace (Angle,Radius+144,Pitch,TRF_BLOCKSELF,Height/2,data:Front) && Front.HitLine)
				Speed = KAI_Math.LinearMap (Front.Distance,0,Front.Distance,GetDefaultSpeed(GetClass()),2);
			Else
				Speed = GetDefaultSpeed(GetClass());
		}
	}
	
	Override Int TakeSpecialDamage (Actor Inflictor, Actor Source, Int Damage, Name DamageType)
	{
		Int Res = Super.TakeSpecialDamage (Inflictor,Source,Damage,DamageType);
		
		If (Source Is "MVP_KamikazeDrone" && !IsActorHostile(Source)) //Drones can't harm each other even with their shrapnel.
			Res = 0;
		
		Return Res;
	}
	
	Override Bool CanCollideWith (Actor Other, Bool Passive)
	{
		//Drones can be set to clip through each other, since a ton of these shits can be expected in one area.
		If (User_DroneClip && Other && Other Is GetClassName() && ( (bFriendly && Other.bFriendly) || (!bFriendly && !Other.bFriendly) ))
			Return False;
		Return Super.CanCollideWith (Other, Passive);
	}
	
	Override String GetObituary (Actor Victim, Actor Inflictor, Name MOD, Bool PlayerAttack)
	{
		If (IsDead(Self) && Victim == Target) //We died (Exploded) and our target is the victim, so our victim got blown up presumably trying to destroy us lol.
			Return "%o played stupid games with a flying bomb";
		
		If (bFriendly && Victim.Player) //KLUDGE: Because IsActorHostile() doesn't work, obviously!
			Return "%o should've stood out of a drones' way";
		
		Return Super.GetObituary (Victim, Inflictor, MOD, PlayerAttack);
	}
	
	Void MVP_KamikazeChase ()
	{
		KAI_Chase_PreChecks();
		If (IsDead (Target)) Target = Null;
		KAI_Chase_Retarget(0,True);
		
		Bool MovedAlready; Bool B;
		Int KMTFlags = KMT_3D;
		
		//Emit hazard every 4 ticks.
		//This is fine because actors that pick it will keep it unless out of range or the hazards' origin becomes null, which would only happen if the drone explodes.
		If (GetAge() % 4 == 0)
			HazardInfo.EmitHazard (Self,ExplosionRadius*2,HazardInfo.HAZARD_ACTOR,HazardInfo.HAZARD_MEDIUM,tags:HazardTags);
		
		MovedAlready = MVP_KamikazeSpiral();
		/*Else //This is supposed to be a "cheap" NPC to run, why do I even care if other code heals it back up before it crashes?
		{
			FlightAcceleration = Default.FlightAcceleration;
			Speed = GetDefaultSpeed (GetClass());
			bSkyExplode = Default.bSkyExplode;
		}*/
		
		//Move to target, and also handle patrolling but then seeing a target.
		If (Target && Target != Goal && !MovedAlready)
		{
			Double Ofs = IsFlying(Target) ? Target.Height/2 : Target.Height;
			KAI_MoveTowards (Target.Pos.PlusZ(Ofs),1,TurnHorz,flags:KMTFlags,TurnVert);
			//If (Random (0,255) < 1) KAI_Chase_HandleStrafing(Target,0,True,MaxTargetRange);
			MovedAlready = True;
		}
		
		If (!MovedAlready)
		{
			MeleeRange = 32;
			[B, MovedAlready] = KAI_Chase_PatrolHandling ("Stand",1,TurnHorz,flags:KMTFlags,TurnVert);
			MeleeRange = Default.MeleeRange;
			//If (b && goal) spawn ("kai_debugpoint",goal.pos);
			//if (goal)console.printf ("patrolling, goal is at %d %d %d, moved already %d, reached point %d",goal.pos,movedalready,b);
		}
		
		//In range to detonate.
		If (Target != Goal && KAI_CheckMeleeRange (Target,flags:CMR_3DDISTANCE))
		{
			LineTrace (Angle,Radius+MeleeRange,Pitch,TRF_BLOCKSELF,Height/2,data:Front);
			//KAI_LOFRaycast.VisualizeTracePath (Pos.PlusZ(Height/2),Front.HitLocation,Front.Distance);
			
			//If we are on a collision course with the target or some other hostile, then we exploded and hit them.
			//NOTE: Kinda funny how a direct trace-based hit means that, without even having it in mind. I made the drone function like a shaped charge.
			If (Front.HitActor && (Front.HitActor == Target || !IsInanimateObject(Front.HitActor) && IsActorHostile (Front.HitActor)))
				ExplodeMissile (Null,Front.HitActor);
			//Not on a direct course to the target or an enemy, do an airburst.
			Else
				ExplodeMissile();
		}
	}
	
	Bool MVP_KamikazeSpiral()
	{
		If (Health <= WoundHealth)
		{
			bSkyExplode = True;
			//FlightAcceleration = 0.5;
			Speed = GetDefaultSpeed(GetClass())*1.5; //Fly faster.
			
			A_Weave(4,4,2,2);
			Vector3 Front = Level.Vec3Offset(Pos,KAI_Math.AngleToVector3D(Angle,Pitch,Speed));
			KAI_MoveTowards (Front,1,TurnHorz,flags:KMT_3D,TurnVert);
			If (MovementBlockingLine || BlockingFloor || BlockingCeiling || Blocking3DFloor || BlockingMObj) //Explode on impact with anything.
				ExplodeMissile (BlockingLine,BlockingMobj,True);
			
			If (!IsActorPlayingSound(CHAN_VOICE))
				A_StartSound ("Vehicle/Drone/Beep",CHAN_VOICE,attenuation:ATTN_STATIC);
			
			SpriteRotation += 10; //Visually spiralling out of control.
			
			//Smoke occasionally
			Actor Smoke = Random (0,255) < 64 ? Spawn ("MVP_DamageSmoke",Pos) : Null;
			If (Smoke)
			{
				Smoke.Alpha = 0.8;
				Smoke.Roll = FRandom(-180,180);
				Smoke.A_SetScale (FRandom(0.2,0.6));
			}
			
			//Spark randomly
			If (Random (0,255) < 6)
			{
				Vector3 Sparkle = (Random(Radius,-Radius),Random(Radius,-Radius),Random (0,Height));
				Actor Spark = Spawn ("MVP_Spark",Level.Vec3Offset(Pos,Sparkle));
				If (Spark)
				{
					Spark.Master = Self;
					MVP_Spark(Spark).Rel = Sparkle;
				}
			}
			Return True;
		}
		Return False;
	}
	
	Void MVP_KamikazeLook (Int Flags = 0)
	{
		If (!User_RandomTarget)
			KAI_Look (Flags,extraflags:KAIL_NOTEMPSTAND);
		Else
		{
			//KAI_Look (Flags|LOF_NOSIGHTCHECK|LOF_NOSOUNDCHECK,extraflags:KAIL_NOTEMPSTAND); //Only run patrolling logic in random target mode.
			
			//Port of some of the A_Look() logic for beginning to chase a patrol route.
			if (special == Thing_SetGoal && args[0] == 0) 
			{
				let iterator = Level.CreateActorIterator(args[1], "PatrolPoint");
				special = 0;
				goal = iterator.Next ();
				reactiontime = args[2] * TICRATE + Level.maptime;
				if (args[3] == 0)
					bChaseGoal = False;
				else
					bChaseGoal = True;
				
				target = goal; //Just go to the goal. Very simple.
			}
		
			If (!Target) //Pick random target in sight.
			{
				Array <Actor> Targs;
				LookForEnemiesEx (Targs, -1, False, True);
				For (Int I = Targs.Size()-1; I > 0; I--)
				{
					//HACK: Yes, the internal monster sight logic apparently doesn't exclude dead monsters despite the health check in ValidEnemyInBlock().
					//So we have to double check here to prevent fun problems like infinite recursions!
					If (IsDead(Targs[I]))
						Targs.Delete(I);
					//if (targs[i])
					//	console.printf ("i see %s",Targs[I].getclassname());
				}
				If (Targs.Size() == 1 && !IsDead(Targs[0]))
					Target = Targs[0];
				Else If (Targs.Size())
					Target = Targs[Random(0,Targs.Size()-1)]; //Pick random target in sight.
			}
			If (IsDead (Target)) //Prevents infinite recursions.
				Target = Null;
			
			If (Target && !(Flags & LOF_NOJUMP))
				{console.printf ("going to seestate for %p (%s)",target,target.getclassname());SetState(SeeState);}
		}
	}
	
	Void StopFlight()
	{
		A_StopSound (CHAN_BODY);
		bInFloat = False; //Not currently flying, but we ARE a flyer, so KAI mods and mods in general should know. Even if it means that it can't cross float blocking lines when landed.
		bNoGravity = bFloatBob = False;
	}
	
	Void StartFlight()
	{
		A_StartSound (ActiveSound,flags:CHANF_LOOPING,attenuation:1.5);
		bInFloat = bNoGravity = bFloatBob = True;
	}
	
	Void SpawnHitscanShrapnel (Int Amount, Int Damage = 2, Double Range = 512, Class <Actor> Puff = "MVP_ShrapnelPuff")
	{
		For (Int I = Amount; 0 <= I; I--)
			LineAttack (FRandom (0,360),Range*FRandom(0.5,1.5),FRandom (90,-90), Int(Damage*FRandom(0.75,1.25)) ,'Shrapnel',Puff, LAF_OVERRIDEZ,offsetz:Height/2);
	}
	
	FLineTraceData Front;
	Const TurnHorz = 15;
	Const TurnVert = 60;
	Array <String> HazardTags;
	
	Bool User_DroneClip; //Drones clip through each other when on the same side.
	Bool User_Landed; //Drone spawns in landed on the ground, and also idles by landing again. Kinda like a mobile mine.
	Bool User_RandomTarget; //Pick a random target in sight instead of the first one found. Useful for somewhat preventing drones from chasing the same thing.
	
	States
	{
		Spawn:
			PND1 A 0 NoDelay A_JumpIf (User_Landed,"Landed");
			PND1 ABCD 2
			{
				If (!MVP_KamikazeSpiral())
				{
					MVP_KamikazeLook ();
					Vel *= 0.9;
				}
			}
			Goto Spawn+1;
		Landed:
			PND1 P 0 StopFlight();
			PND1 P 2
			{
				MVP_KamikazeLook (LOF_NOJUMP);
				If (Target)
					Return FindState ("Landed.LiftOff",True);
				Return State(Null);
			}
			Goto Landed+1;
		Landed.LiftOff:
			PND1 ONM 5;
			PND1 M 0 StartFlight();
			Goto See;
		Landed.Land:
			PND1 M 0 StopFlight();
			PND1 MNO 5;
			Goto Landed;
		Landed.Landing: //Move down until we are sitting on top of something first.
			PND1 AABBCCDD 1
			{
				MVP_KamikazeLook (LOF_NOJUMP);
				If (Target) //Nvm we have a target to kill.
					Return SeeState;
				
				Vel *= 0.9;
				SetZ (Pos.Z-FloatSpeed);
				If (!TestMobjZ(True) || GetZAt ()+1 >= Pos.Z)
					Return FindState ("Landed.Land",True);
				
				Return State(Null);
			}
			Loop;
		See:
			PND1 AABBCCDD 1 MVP_KamikazeChase();
			Loop;
		Idle:
			PND1 A 0 A_JumpIf (User_Landed,"Landed.Landing");
			PND1 AABBCCDD 1
			{
				If (!MVP_KamikazeSpiral())
				{
					KAI_Wander(8,384,anglelimit:TurnHorz,flags:KMT_3D,pitchlimit:TurnVert);
					MVP_KamikazeLook();
				}
			}
			Loop;
		Stand: //Before patrolling again
			PND1 AABBCCDD 1
			{
				If (!MVP_KamikazeSpiral())
				{
					MVP_KamikazeLook();
					Vel *= 0.90;
				}
			}
			Loop;
		Death:
			TNT1 A 0
			{
				A_SprayDecal ("Scorch",Radius+MeleeRange,direction:KAI_Math.AngleToVector3D(Angle,Pitch,1));
				A_Stop();
				bDontThrust = bNoGravity = bNeverTarget = bRollSprite = True;
				bFloatBob = False;
				Roll = Random (0,360);
				A_NoBlocking();
				A_SetScale (3);
				A_SetRenderStyle (1.0,STYLE_ADD);
				MakeAlliesImmuneToExplosion (Self,ExplosionRadius);
				A_Explode (ExplosionDamage,ExplosionRadius,XF_HURTSOURCE|XF_CIRCULAR|XF_CIRCULARTHRUST|XF_NOTMISSILE,False,48);
				RemoveAllyExplosionImmunity();
				A_StartSound ("Vehicle/APC/AutocannonHit",attenuation:0.3);
				SpawnHitscanShrapnel (256,range:384);
				Actor Duster = Spawn ("MVP_GroundDustSpawner",Pos);
				Duster.ReactionTime = 192;
				Duster.Threshold = 192;
				Duster.Scale.X = 0.4;
				Duster.RadiusDamageFactor = 1.5;
			}
			GAXP ABCDEFGHIJ 4 Bright A_Stop();
			Stop;
	}
}

Class MVP_DroneGlobSpawner : KAI_MixinActor
{
	Default
	{
		//$Title Loitering Swarm
		//$Category Vehicles/Panopticon
		//$Sprite MVPEE0
		//$Arg0 Amount
		//$Arg0Default 5
		//$Arg0Tooltip "How many drones to spawn."
		//$Arg1 Radius
		//$Arg1Default 128
		//$Arg1Tooltip "The maximum radius in which drones will spawn."
		//$Arg1Type 23
		//$Arg2 Height
		//$Arg2Default 128
		//$Arg2Tooltip "The maximum height in which drones will spawn."
		//$Arg2Type 24
		//$Arg3 Flags
		//$Arg3Tooltip "Flags that modify the spawners' behavior."
		//$Arg3Type 12
		//$Arg3Enum {1 = "Randomize Angles"; 2 = "Randomize Pitches"; 4 = "Spawn on the floor"; 8 = "Drones don't collide with each other"; 16 = "Drones pick unique targets";}
	}
	
	Enum DArgs
	{
		Amount,
		SRadius,
		SHeight,
		Flags,
	}
	
	Enum SFlags
	{
		RandomAngle = 1,
		RandomPitch = 2,
		FloorSpawn	= 4,
		DroneClip	= 8,
		RandomTarg	= 16,
	}
	
	Override Void PostBeginPlay()
	{
		A_ChangeCountFlags(False,False,False);
		For (Int I = 0; I < Args[Amount]; I++)
		{
			//Try to spawn a drone at a random valid position up to 32 times.
			For (Int I = 0; I < 32; I++)
			{
				Vector3 SpawnPos = (FRandom(Args[SRadius],-Args[SRadius]),FRandom(Args[SRadius],-Args[SRadius]),FRandom(0,Args[SHeight]));
				SpawnPos = Level.Vec3Offset (Pos,SpawnPos);
				
				//Readjust out of bounds heights to not reject them off-hand.
				Sector SecAt = Level.PointInSector(SpawnPos.XY);
				If (SecAt)
				{
					If (Args[Flags] & FloorSpawn || SecAt.FloorPlane.ZAtPoint(SpawnPos.XY) > SpawnPos.Z) //Adjust up.
						SpawnPos.Z = SecAt.FloorPlane.ZAtPoint(SpawnPos.XY);
					Else If (SecAt.CeilingPlane.ZAtPoint(SpawnPos.XY) <= SpawnPos.Z+GetDefaultByType("MVP_KamikazeDrone").Height) //Adjust up verbosely.
						SpawnPos.Z = SecAt.CeilingPlane.ZAtPoint(SpawnPos.XY) - GetDefaultByType("MVP_KamikazeDrone").Height;
				}
				
				Actor Drone = Spawn ("MVP_KamikazeDrone",SpawnPos);
				//Success
				If (Drone && Drone.TestMobjLocation() && Level.IsPointInLevel(SpawnPos) && !IsInside3DFloor (SpawnPos,Drone.Height,True))
				{
					Drone.Angle = Args[Flags] & RandomAngle ? Random(0,360) : Angle;
					Drone.Pitch = Args[Flags] & RandomPitch ? Random(-90,90) : Pitch;
					Drone.CopyFriendliness (Self,True);
					Drone.ChangeTID(TID);
					
					MVP_KamikazeDrone(Drone).User_DroneClip = (Args[Flags] & DroneClip);
					MVP_KamikazeDrone(Drone).User_Landed = (Args[Flags] & FloorSpawn);
					MVP_KamikazeDrone(Drone).User_RandomTarget = (Args[Flags] & RandomTarg);
					Break;
				}
				Else
				{
					If (Drone)
						Drone.Destroy(); //Fail, try again until we either get it right or give up.
				}
			}
		}
		Destroy();
	}
}