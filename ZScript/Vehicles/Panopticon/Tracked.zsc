Class MVP_GunDrone : MVP_BaseVehicle
{
	Default
	{
		//$Title Tracked Drone
		//$Category Vehicles/Panopticon
		//$Sprite MVPEF1
		Health 60;
		WoundHealth 30;
		GibHealth 60;
		Speed 6;
		FastSpeed 8;
		XScale 0.4;
		YScale 0.333333; //0.4 / 1.2
		Radius 12;
		Height 10;
		DeathHeight 22; //Hull+Turret height
		MeleeRange 44;
		//MaxSlopeSteepness 0.65;
		MaxStepHeight 8;
		//MaxDropoffHeight 24; //Yes they can drive into pits they can't get out of and I think I'll keep it that way lmao.
		Mass 40;
		FriendlySeeBlocks 32;
		MaxTargetRange 8192;
		RipLevelMin 2;
		//+AvoidMelee; //We already do this.
		+LookAllAround;
		+MVP_BaseVehicle.Drone;
		KAI_Actor.ThreatLevel THREAT_NORMAL;
		KAI_Actor.ThreatLevelThreshold THREAT_DANGEROUS;
		KAI_Actor.ActorFollowDist 192;
		MVP_BaseVehicle.SmokeDelay 8;
		KAI_BaseVehicle.MaxPushMass 80;
		KAI_BaseVehicle.MaxPushRadius 64;
		KAI_BaseVehicle.MaxPushHeight 64;
		KAI_BaseVehicle.RetreatRange 256; //Default range for REVERSING.
		KAI_BaseVehicle.VehicleTurret "MVP_GunDroneTurret";
		KAI_BaseVehicle.TurretOffsets (0,0,-0.5);
		Tag "MUSC-4A"; //Mult-utila ŝpurita ĉasio 4 "Artileriisto"
		ActiveSound "Vehicle/Drone/Tracks";
		
		//DamageFactor 0.8; //Generic damage factor.
		DamageFactor "ExplosiveImpact", 0.8;
		DamageFactor "Explosion", 0.8;
		DamageFactor "Explosive", 0.8;
		DamageFactor "Grenade", 0.8;
		DamageFactor "HitScan", 0.7; //The generic damage type of hitscan attacks.
		DamageFactor "Shrapnel", 0.5;
		DamageFactor "Fire", 0.6;
		DamageFactor "Plasma", 0.7;
		
		DamageFactor "Autocannon", 1.2;
		DamageFactor "LargeRifleBullet", 1.0;
		DamageFactor "RifleBullet", 0.9;
		DamageFactor "SmallRifleBullet", 0.8;
		DamageFactor "Missile", 1.2;
		DamageFactor "AntiAir", 0.7;
		
		//Deflection stats
		KAI_Actor.DeflectionChance 16;
		KAI_Actor.DeflectDamageFactor 0.75;
		KAI_Actor.DeflectSlowDownFactor 0.9;
		KAI_Actor.DeflectionFunnel (5,-5,5,-5);
	}
	
	Override Void UserVariableDefaults ()
	{
		If (User_RetreatDistance == 0) User_RetreatDistance = Default.RetreatRange;
		If (User_DodgeRange == 0) User_DodgeRange = 384;
	}
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		DroneMove.DetourFactor = 1.5;
		DroneMove.Attempts = 16;
		DroneMove.MaxSteps = 64;
		DroneMove.RunRad = 128;
		DroneMove.AngleLimit = 8;
		//No running behind corners or anything for the little drone. The large hull though has different params.
		
		A_StartSound ("Vehicle/Drone/Motor",CHAN_VOICE,CHANF_LOOPING,1,ATTN_STATIC);
		If (!Turret) ThreatLevel = THREAT_NONE;
		//The gun drone can talk, with the turret making the hull talk when switching targets and stuff. But this drone isn't as talkative as the quadcopters.
		If (KAIHandler) Yapper = KAIHandler.GetNPCVoice ("Panopticon");
	}
	
	Override Bool SpawnDamageSmoke()
	{
		If (!Super.SpawnDamageSmoke()) Return False;
		Vector3 SpawnPos = Level.Vec3Offset (Pos,(FRandom(-8,8),FRandom(-8,8),FRandom(6,12)));
		Actor Smoke = Spawn ("MVP_DamageSmoke",SpawnPos);
		Smoke.Roll = FRandom(-180,180);
		Smoke.A_SetScale (FRandom(0.1,0.5));
		Smoke.Vel.Z = FRandom (1,2);
		Return True;
	}
	
	Override Bool CanAttack()
	{
		Return Turret;
	}
	
	Void MVP_GunDroneChase()
	{
		KAI_Chase_PreChecks();
		If (IsDead (Target)) Target = Null;
		KAI_Chase_Retarget(0,True);
		
		Int KMTFlags = KMT_ZIGZAG;
		
		//DETERMINE IF WE SHOULD BE MOVING AWAY FROM THE TARGET.
		Bool RunAway = (!bNoFear && (IsFrightening (Target) || bFrightened)); //Run away from spooky actors, or maybe we're just a little bitch.
		Bool Reverse;
		//If we're set to run away from targets over our threat threshold that get too close, do so.
		Double ReverseRange = User_RetreatDistance;
		Int TargetLevel;
		If (Target)
		{
			ReverseRange += Target.Radius;
			TargetLevel = AssessThreatLevel(Target, True);
		}
		
		//Bool TargetInSight = CheckSight (Target,SF_IGNOREWATERBOUNDARY); //For cheapness' sake the little drone is stupid.
		Bool LockedIn = bChaseGoal && Goal; //Don't run away if you have a target but are also patrolling in bChaseGoal mode.
		Bool BigThreat = (ThreatLevelThreshold != THREAT_ASSESS && TargetLevel >= ThreatLevelThreshold); //Target's threat level is over the threshold.
		//If (RunRange != -1 && !bNoFear && Target && Target != Goal && !LockedIn && !RunAway && BigThreat && RunRange > 0 && Distance3DSquared(Target) <= RunRange*RunRange/* && TargetInSight*/)
		//	RunAway = True;
		
		HazardInfo Haz = GetStrongestHazard(Hazards);
		Double HazardDist = GetHazardDistance (Haz); //Get distance to nearest hazard that you're in range of.
		
		//Keep different distances against targets.
		If (!LockedIn && !RunAway && Target && Target != Goal)
		{
			Double Dist = 0;
			Switch (TargetLevel)
			{
				Case THREAT_SUPERDANGER:
					Dist = 768;
					Break;
				Case THREAT_VERYDANGEROUS:
					Dist = 512;
					Break;
				Case THREAT_DANGEROUS:
					Dist = 384;
					Break;
				//Just in case the threshold is changed ^^^^^
				Case THREAT_ABOVENORMAL:
					Dist = 192;
					Break;
				Case THREAT_NORMAL:
					Dist = 128;
					Break;
				Case THREAT_MILD:
				Case THREAT_LOW:
					Dist = 32;
					Break;
				Case THREAT_VERYLOW:
				Default:
					Break;
			}
			If (Dist > 0) Dist += Target.Radius;
			If (Health <= WoundHealth) //Keep double distance when hurt.
				Dist *= 2;
			
			Double TargDist = Distance3D (Target);
			If (!Reverse && TargDist <= ReverseRange+Radius) //Too close to target, reverse.
			{
				RunAway = True; //In case we otherwise wouldn't run away, like if retreatrange is turned off.
				Reverse = True;
			}
			
			//Run from target if hazard isn't closer.
			If (Dist && TargDist <= Dist && !(Haz && TargDist >= HazardDist))
			{
				RunAway = True;
				Haz = Null; //Signify that we shouldn't run from a hazard later in the function.
			}
		}
		//Also check for scary hazards.
		If (Haz)
			RunAway = True;
		
		//Dodge projectiles by driving out of the way if not already busy.
		Actor Proj;
		If (!RunAway && !LockedIn && (Proj = MVP_DroneDodge(User_DodgeRange)))
		{
			Double Delta = DeltaAngle (Proj.Angle,AngleTo(Proj));
			Vector3 Where = Delta >= -2 ? (Vec2Angle(64,Angle+90),0) : (Vec2Angle(64,Angle-90),0);
			Where.Z = GetZAt (Where.X,Where.Y,flags:GZF_ABSOLUTEPOS);
			Bool B;
			[B, DodgePos] = IsPosReachable (DodgePos);console.printf ("dodge");
			DodgePos = B ? Where : DodgePos; //We can just go where we want, do that. If not, go to the closest position IsPosReachable() returned.
		}
		
		//Dodge projectile, if not busy already. So if we're already running from something else, stop the dodge.
		If (!KAI_Math.IsEmptyVector3 (DodgePos) && NewPosStepCount <= 16 && Level.Vec3Diff (Pos,DodgePos).Length() >= 8)
		{
			Speed += 2;
			KAI_MoveTowards (DodgePos,DroneMove.DetourFactor,DroneMove.AngleLimit+4); //No zigzag.
			Speed -= 2;
			NewPosStepCount++;
			Return;
		}
		Else
		{
			DodgePos = (Double.NaN,Double.NaN,Double.NaN);
			NewPosStepCount = 0;
		}
		
		//Run away from threat, no running behind corners or anything super sophisticated though. This is meant to be a very simple drone.
		If (!LockedIn && RunAway)
		{
			Vector3 RunPos = !Haz ? Target.Pos : GetHazardOriginPos(Haz);
			If (!Reverse)
				KAI_MoveAway (Null,DroneMove.Attempts,DroneMove.RunRad,DroneMove.MaxSteps,DroneMove.DetourFactor,DroneMove.AngleLimit,flags:KMTFlags,targpos:RunPos);
			Else //Reverse away from threat.
			{
				KMTFlags &= ~(KMT_ZIGZAG); //Don't zigzag when backing off.
				Frame = RevFrame;
				//If (Rev++ >= 2) //Every 2 tics, switch frame.
				{
					//Rev = 0;
					If (RevFrame == 0)
						RevFrame = 3;
					Else
						RevFrame--;
				}
				//Tics--; //Reduce tics twice as fast to make it reverse faster.
				Angle -= 180;
				//Speed *= 1.55;
				KAI_MoveAway (Null,DroneMove.Attempts,DroneMove.RunRad,DroneMove.MaxSteps,DroneMove.DetourFactor,DroneMove.AngleLimit,flags:KMTFlags,KMA_STRAIGHT,RunPos);
				//Speed /= 1.55;
				Angle += 180;
			}
			
			HandleChaseTimer();
			Return;
		}
		
		//If our turret can't aim at its' target, and we haven't ran away from something already and aren't focused on patrolling, try to position ourselves better.
		If (!LockedIn && Turret && Turret.Target && Turret.ElevationState == Turret.ELEVATION_TOOHIGH)
		{
			KAI_MoveAway (Turret.Target,DroneMove.Attempts,DroneMove.RunRad,DroneMove.MaxSteps,DroneMove.DetourFactor,DroneMove.AngleLimit,flags:KMTFlags);
			HandleChaseTimer();
			Return;
		}
		
		//MAYDO: Add retreating from other nearby enemies? Or maybe not, and reserve that for the larger hull.
		
		//Move to target, and also handle patrolling but then seeing a target.
		If (Target && Target != Goal && !LockedIn)
		{
			KAI_MoveTowards (Target.Pos.PlusZ(Target.Height/2),DroneMove.DetourFactor,DroneMove.AngleLimit,flags:KMTFlags);
			HandleChaseTimer();
			Return;
		}
		
		//Patrol handling.
		//BUG: ZDoom's hacky usage of ReactionTime makes the (Ground ! Yes this is copy of MVP_QuadcopterChase) drone not wait at patrol points when it has a target.
		//If (!MovedAlready)
		{
			KAI_Chase_PatrolHandling ("Spawn",DroneMove.DetourFactor,DroneMove.AngleLimit,flags:KMTFlags);
			If (bChaseGoal && Goal && Target != Goal) //Manually go to goal when it "don't chase target" mode.
				KAI_MoveTowards (Goal.Pos,DroneMove.DetourFactor,DroneMove.AngleLimit,flags:KMTFlags);
			//If (b && goal) spawn ("kai_debugpoint",goal.pos);
			if (goal)console.printf ("patrolling, goal is at %d %d %d, reactiontime %d",goal.pos,reactiontime);
		}
		
		//If (ShouldAttack())
		//	Return;
		
		HandleChaseTimer();
	}
	
	Override Bool OnWander()
	{
		KAI_Look(LOF_NOJUMP,extraflags:KAIL_CHASETARGET);
		If (Target)
		{
			SetState(SeeState);
			Return False;
		}
		
		If (CurrentOrder == ORDER_STAY)
		{
			A_StopSound (CHAN_BODY);
			Frame = 0; //Stay at PND0A when stationary.
			Return False;
		}
		Else
			A_StartSound (ActiveSound,flags:CHANF_LOOPING,0.3,2.0);
		
		//Dodge projectiles by driving out of the way if not already busy.
		//Actually maybe don't, to keep things cheap lol.
		/*Actor Proj;
		If (!RunAway && (Proj = MVP_Quadcopter.MVP_DroneDodge(Self,User_DodgeRange)))
		{
			Double Delta = DeltaAngle (Proj.Angle,AngleTo(Proj));
			Vector3 Where = Delta >= -2 ? (Vec2Angle(64,Angle+90),0) : (Vec2Angle(64,Angle-90),0);
			Where.Z = GetZAt (Where.X,Where.Y,flags:GZF_ABSOLUTEPOS);
			[B, DodgePos] = IsPosReachable (DodgePos);
			DodgePos = B ? Where : DodgePos; //We can just go where we want, do that. If not, go to the closest position IsPosReachable() returned.
			console.printf ("dodging to %.2f %.2f %.2f, delta is %.2f",dodgepos,delta);
			actor debug = spawn ("kai_debugpoint",dodgepos);
			debug.scale *= 0.5;
		}
		
		//Dodge projectile, if not busy already. So if we're already running from something else, stop the dodge.
		If (!KAI_Math.IsEmptyVector3 (DodgePos) && !RunAway && NewPosStepCount <= 16 && Level.Vec3Diff (Pos,DodgePos).Length() >= 8)
		{
			Speed += 2;
			KAI_MoveTowards (DodgePos,DroneMove.DetourFactor,DroneMove.AngleLimit+4); //No zigzag.
			Speed -= 2;
			NewPosStepCount++;
			Return False;
		}
		Else
		{
			DodgePos = (Double.NaN,Double.NaN,Double.NaN);
			NewPosStepCount = 0;
		}*/
		
		Vector3 FolPos = (Double.NaN, Double.NaN, Double.NaN); Actor Followee;
		If (CurrentOrder == ORDER_FOLLOW)
			[FolPos, Followee] = HandleFollowingActor (FolPos,True); //NOTE: We turn bDontFollowPlayers on between KAI_Wander calls so lonely drones in a swarm don't do that.
		
		//This drone doesn't speak, for now at least.
		//If (Random(0,2048) == Random (0,2048) && Yapper)
		//	MVP_QuadcopterSpeak();
		
		//Follow something instead.
		If (CurrentOrder == ORDER_FOLLOW)
		{
			If (!KAI_Math.IsEmptyVector3(FolPos))
			{
				//Don't dogpile.
				If (Followee && Distance3DSquared(Followee) >= (FollowDist+Followee.Radius)*(FollowDist+Followee.Radius))
				{console.printf ("going to %s",followee.getclassname());
					If (Followee) FolPos.Z = Followee.Pos.Z+(Followee.Height/2);
					KAI_MoveTowards (FolPos,DroneMove.DetourFactor,DroneMove.AngleLimit);
					Return False;
				}
				Else If (Followee)
				{
					A_StopSound (CHAN_BODY);
					Frame = 0; //Stay at PND0A when stationary.
					Return False;
				}
			}
		}
		
		Return True;
	}
	
	Mixin MVP_DroneVirtuals;
	Mixin MVP_DroneFunctions;
	
	KAIMoveParams DroneMove;
	//UInt8 Rev;
	UInt8 RevFrame;
	Vector3 DodgePos; //Where we're going to dodge a projectile (Hopefully).
	KAI_Voice Yapper;
	
	Double User_DodgeRange; //From how far the drone dodges projectiles, this is pretty high by default to give it SOME time to drive away.
	
	States
	{
		Spawn:
			PND0 A 0 A_StopSound (CHAN_BODY); //Stop the track sound when not in motion.
			PND0 A 4 KAI_Look(extraflags:KAIL_CHASETARGET);
			Goto Spawn+1;
		See:
			TNT1 A 0 A_StartSound (ActiveSound,flags:CHANF_LOOPING,0.3,2.0);
			PND0 ABCD 2 MVP_GunDroneChase();
			Goto See+1;
		Idle:
			PND0 ABCD 2
			{
				Bool FuckYou = bDontFollowPlayers; bDontFollowPlayers = True;
				KAI_Wander (DroneMove.Attempts,DroneMove.RunRad*2,DroneMove.MaxSteps,DroneMove.DetourFactor,DroneMove.AngleLimit);
				bDontFollowPlayers = FuckYou;
			}
			Loop;
		Death:
			PNDD A -1
			{
				If (!Turret)
					Frame = 4; //PNDDE
				
				Actor Boom = Spawn ("MVP_Explosion",Pos);
				Boom.Scale *= 0.75;
				Boom.SetDamage (48);
				Boom.MaxTargetRange = 88;
				Boom.MeleeRange = 0;
				Boom.bNoGravity = True;
				Boom.bGetOwner = True;
				Boom.Target = Self; //We exploded, this explosion is ours.
				bFloatBob = False;
				A_StopAllSounds ();
			}
			Stop;
		XDeath:
			TNT1 A 0
			{
				Actor Boom = Spawn ("MVP_Explosion",Pos);
				Boom.Scale *= 1.25;
				Boom.SetDamage (72);
				Boom.MaxTargetRange = 144;
				Boom.MeleeRange = Radius+32;
				Boom.bNoGravity = True;
				Boom.bGetOwner = True;
				Boom.Target = Self; //Does it even matter if we're gone? Very philosophical.
				
				SmokeCounter = Random (8,16);
				Bool B; Actor Debris;
				For (Int I; I <= SmokeCounter; I++)
				{
					[B, Debris] = A_SpawnItemEx ("MVP_DiCokkaDebris",FRandom (Radius,-Radius),FRandom(Radius,-Radius),FRandom (0,Height),FRandom (-6,6),FRandom (-6,6),FRandom (2,8));
					If (Debris)
					{
						Debris.Scale *= FRandom (0.1,0.4);
						Debris.bXFlip = Random (False,True);
					}
				}
				
				//MAYDO: Actually, this should probably be on the actual turret object.
				If (Turret)
				{
					[B, Debris] = A_SpawnItemEx ("MVP_GunDroneGib",zofs: 16, FRandom (0,6), FRandom (1,-1), FRandom (1,8)); //Gun
					[B, Debris] = A_SpawnItemEx ("MVP_GunDroneGib",xofs: -4,zofs: 16, FRandom (0,-4), FRandom (4,-4), FRandom (1,8)); //Camera
					If (Debris) Debris.SmokeCounter = 1;
				}
			}
			Stop;
	}
}

Class MVP_GunDroneTurret : MVP_BaseTurret
{
	Default
	{
		Health 40;
		WoundHealth 25; //Shit aim threshold
		XScale 0.4;
		YScale 0.333333; //0.4 / 1.2
		Radius 8;
		Height 12;
		DeathHeight 12;
		Mass 20;
		FriendlySeeBlocks 64;
		MaxTargetRange 8192;
		RipLevelMin 2;
		//+AvoidMelee; //We already do this.
		+LookAllAround;
		//+MVP_BaseVehicle.Drone;
		+KAI_BaseTurret.DontStayAround;
		+KAI_BaseTurret.TransferDamage;
		+NoRadiusDmg;
		KAI_Actor.ThreatLevel THREAT_NORMAL;
		KAI_Actor.ThreatLevelThreshold THREAT_DANGEROUS;
		KAI_Actor.Inaccuracy (16,16,16);
		KAI_Actor.InaccuracyFrequency 0.3;
		AutomapOffsets (0,18);
		KAI_BaseTurret.MaximumPitch -45;
		KAI_BaseTurret.MinimumPitch 10;
		KAI_BaseTurret.TurnSoundRadius 1.5;
		+KAI_BaseTurret.TurnSoundNoStop;
		KAI_BaseTurret.AttackSpeed 170;
		KAI_BaseTurret.FastAttackSpeed 200;
		KAI_BaseTurret.CombatAngleTurnRate 60;
		KAI_BaseTurret.CombatPitchTurnRate 60;
		Obituary "%o was shot by a drone";
		KAI_BaseTurret.TurnSound "Vehicle/Drone/Turret";
		
		Tag "MUSC-4A Gun"; //Mult-utila ŝpurita ĉasio 4 "Artileriisto"
		AttackSound "Vehicle/APC/SmallMGFire";
		
		//DamageFactor 0.8; //Generic damage factor.
		DamageFactor "ExplosiveImpact", 0.8;
		DamageFactor "Explosion", 0.8;
		DamageFactor "Explosive", 0.8;
		DamageFactor "Grenade", 0.8;
		DamageFactor "HitScan", 0.7; //The generic damage type of hitscan attacks.
		DamageFactor "Shrapnel", 0.5;
		DamageFactor "Fire", 0.6;
		DamageFactor "Plasma", 0.7;
		
		DamageFactor "Autocannon", 1.2;
		DamageFactor "LargeRifleBullet", 1.0;
		DamageFactor "RifleBullet", 0.9;
		DamageFactor "SmallRifleBullet", 0.8;
		DamageFactor "Missile", 1.2;
		DamageFactor "AntiAir", 0.7;
		
		//Deflection stats
		KAI_Actor.DeflectionChance 16;
		KAI_Actor.DeflectDamageFactor 0.75;
		KAI_Actor.DeflectSlowDownFactor 0.9;
		KAI_Actor.DeflectionFunnel (5,-5,5,-5);
	}
	
	Const BurstSize = 3;
	Const VertOffset = 4;
	Mixin MVP_DroneFunctions;
	
	HazardInfo GunHazard;
	Array <Actor> Crap;
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		MissileState = FindState ("Fire");
		AttackStates.Push (FindState("Fire.Single",True));
		SmokeCounter = GameTicRate*Random(2,8);
		
		GunHazard = New ("HazardInfo"); //Create hazard information.
		If (GunHazard)
		{
			Array <String> Tags;
			Tags.Push ("Bullet");
			//Hazard.Position = Data.HitPos;
			GunHazard.Origin = Self;
			GunHazard.Range = 32;
			GunHazard.Type = HazardInfo.HAZARD_ATTACK;
			GunHazard.Level = HazardInfo.HAZARD_MEDIUM;
			//Hazard.Flags = Flags;
			GunHazard.CustomTags.Copy (Tags);
		}
	}
	
	Override Vector3 GetAttackLocation()
	{
		FLineTraceData Where;
		LineTrace (Angle,8192*2,Pitch,TRF_BLOCKSELF,VertOffset,data:Where);
		//If (Where)
			Return Where.HitLocation;
		//Else
		//	Return Super.GetAttackLocation(); //Return default KAI_Humanoid function, presumably just the targets' position.
	}
	
	Override Void Tick()
	{
		Super.Tick ();
		
		If (!IsFrozen() && GetAge() % 4 == 0 && IsInAttackState())
		{
			KAI_FindInLOF (FIL_MISSILEHIT,8192*2,1,(0,0,VertOffset),foundactors:Crap);
			
			If (Crap.Size())
			{
				//console.printf ("let's crash because of %p",crap[0]);
				GunHazard.Position = GetAttackLocation();
				HazardInfo.GiveHazard(Crap[0],GunHazard);
			}
		}
	}
	
	Void MVP_GunDroneTurretChase()
	{
		KAI_Chase_PreChecks();
		If (IsDead (Target)) Target = Null;
		KAI_Chase_Retarget(0,True);
		
		ShouldAttack();
	}
	
	Void MVP_GunDroneShoot (Bool Snipe = False)
	{
		A_StartSound (AttackSound,CHAN_WEAPON,CHANF_OVERLAP,1.0);
		Bool B; Actor Proj = A_SpawnProjectile ("MVP_SmallRifleBullet",VertOffset,flags:CMF_AIMDIRECTION,Pitch); //pew pew
		If (!Snipe)
			AddProjectileSpread (Proj,(0.8,-0.8),(0.8,-0.8));
		Else
			AddProjectileSpread (Proj,(0.3,-0.3),(0.3,-0.3));
		[B, Proj] = A_SpawnItemEx ("MVP_BulletCasing",0,-2,8,FRandom(2,-2),FRandom(2,6),FRandom(1,3));
		If (Master) //Recoil the drone back.
			Master.Vel += KAI_Math.AngleToVector3D (Angle,Pitch,-0.75);
		Proj.Scale.X = 0.1; Proj.Scale.Y = 0.083333; 
		Frame = UpdateTurretElevation (5,1,3,3); //F, B, D, D
	}
	
	Override Bool ShouldAttack (Bool NoStateJump)
	{
		If (!Super.ShouldAttack(NoStateJump))
			Return False;
		
		If (SmokeCounter > 0)
			SmokeCounter--;
		
		If (!SmokeCounter && KAI_CheckMissileRange(Target) && !IsDead (Target) && IsActorHostile (Target) && KAI_TurretCheckLOF (Target,0,0,(0,0,VertOffset),TLOF_OnlyAhead,"MVP_SmallRifleBullet"))
		{
			If (!NoStateJump)
			{console.printf ("fire");
				SmokeCounter = 0;
				If (Master && Master.Health <= WoundHealth)
					Inaccuracy = Default.Inaccuracy*3;
				If (Distance3DSquared(Target) < 4096*4096)
					SetState (MissileState);
				//Snipe the target if too far away.
				Else
					SetStateLabel ("Fire.Single");
			}
			
			Return True;
		}
		
		Return False;
	}
	
	States
	{
		Spawn:
			PNDA A 0;
			PNDA # 1
			{
				RotateToVehicle();
				KAI_Look (maxseedist:MaxTargetRange,DEFAULT_HEARDISTANCE,extraflags:KAIL_CHASETARGET);
				Frame = UpdateTurretElevation (3,0,6,9); //D, A, G, J
			}
			Loop;
		See:
			PNDA # 1
			{
				DoCombatTraverse();
				RotateToVehicle();
				MVP_GunDroneTurretChase();
				UpdateTurretSnapTimer();
				Frame = UpdateTurretElevation (4,0,2,2); //E, A, C, C
			}
			Loop;
		Fire:
			PNDA ###### 1 {Frame = UpdateTurretElevation (4,0,2,2); /*E, A, C, C*/}
			PNDA # 3 Light ("RifleFiringLightNoSelfLighting") MVP_GunDroneShoot();
			PNDA # 1
			{
				If (SmokeCounter++ >= BurstSize-1)
				{
					SmokeCounter = Clamp (GameTicRate*Random(2,8),0,UInt8.MAX);
					If (MVP_DroneSwitchTargets(KAI_Actor(Master),2048) && Random (0,255) < 8 && MVP_GunDrone(Master) && MVP_GunDrone(Master).Yapper)
						KAI_Actor(Master).SayVoiceLine (VOICE_SEE,MVP_GunDrone(Master).Yapper);
					Return SeeState;
				}
				
				HandleChaseTimer();
				
				Frame = UpdateTurretElevation (4,0,2,2); //E, A, C, C
				Return State (Null);
			}
			Goto Fire+6;
		Fire.Single:
			PNDA # 0 {Inaccuracy /= 2.5;} //Be more accurate
			PNDA ################################### 1 {Frame = UpdateTurretElevation (4,0,2,2); /*E, A, C, C*/} //Adjust for one second.
			PNDA # 3 Light ("RifleFiringLightNoSelfLighting") MVP_GunDroneShoot(True);
			PNDA # 0
			{
				If (MVP_DroneSwitchTargets(KAI_Actor(Master),2048) && Random (0,255) < 8 && MVP_GunDrone(Master) && MVP_GunDrone(Master).Yapper)
					KAI_Actor(Master).SayVoiceLine (VOICE_SEE,MVP_GunDrone(Master).Yapper);
				SmokeCounter = Random(35,115); //Only wait 1-3 seconds after the last shot if you just sniped.
				Inaccuracy *= 2.5;
			}
			Goto See;
		Death:
			TNT1 A 0;
			Stop;
	}
}

//IDEA: Make the drone find nearby cover and get behind it to fire from, like the marines do. I should probably add the cover seeking code to KAI for that one.
Class MVP_BigGunDrone : MVP_GunDrone
{
	Default
	{
		//$Title Large Tracked Drone
		//$Category Vehicles/Panopticon
		//$Sprite MVPEF1
		Health 250;
		WoundHealth 80;
		GibHealth 120;
		Speed 8;
		FastSpeed 10;
		XScale 1;
		YScale 0.833333; //1.0 / 1.2
		Radius 32;
		Height 24;
		DeathHeight 48;
		MeleeRange 32;
		//MaxSlopeSteepness 0.65;
		MaxStepHeight 24;
		MaxDropoffHeight 24;
		Mass 400;
		FriendlySeeBlocks 64;
		MaxTargetRange 8192;
		RipLevelMin 4;
		//+AvoidMelee; //We already do this.
		+LookAllAround;
		+MVP_BaseVehicle.Drone;
		KAI_Actor.ThreatLevel THREAT_ABOVENORMAL;
		KAI_Actor.ThreatLevelThreshold THREAT_VERYDANGEROUS;
		KAI_Actor.ActorFollowDist 256;
		MVP_BaseVehicle.SmokeDelay 8;
		KAI_BaseVehicle.MaxPushMass 600;
		KAI_BaseVehicle.MaxPushRadius 128;
		KAI_BaseVehicle.MaxPushHeight 128;
		KAI_BaseVehicle.RetreatRange 320;
		KAI_BaseVehicle.VehicleTurret "MVP_BigGunDroneTurret";
		KAI_BaseVehicle.TurretOffsets (0,0,0);
		Tag "MUGSC-4A"; //Mult-utila granda ŝpurita ĉasio 4 "Artileriisto"
		ActiveSound "Vehicle/Drone/Tracks";
		
		DamageFactor 0.8; //Generic damage factor.
		DamageFactor "ExplosiveImpact", 0.7;
		DamageFactor "Explosion", 0.7;
		DamageFactor "Explosive", 0.7;
		DamageFactor "Grenade", 0.4;
		DamageFactor "HitScan", 0.7; //The generic damage type of hitscan attacks.
		DamageFactor "Shrapnel", 0.4;
		DamageFactor "Fire", 0.5;
		DamageFactor "Plasma", 0.7;
		
		DamageFactor "Autocannon", 1.0;
		DamageFactor "LargeRifleBullet", 0.9;
		DamageFactor "RifleBullet", 0.8;
		DamageFactor "SmallRifleBullet", 0.7;
		DamageFactor "Missile", 1.0;
		DamageFactor "AntiAir", 0.5;
		
		//Deflection stats
		KAI_Actor.DeflectionChance 32;
		KAI_Actor.DeflectDamageFactor 0.6;
		KAI_Actor.DeflectSlowDownFactor 0.75;
		KAI_Actor.DeflectionFunnel (10,-10,10,-10);
	}
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		DroneMove.DetourFactor = 1.25;
		DroneMove.Attempts = 32;
		DroneMove.MaxSteps = 72;
		DroneMove.RunRad = 128;
		DroneMove.AngleLimit = 8;
		DroneMove.CornerDist = 320;
		DroneMove.CornerDiv = 8;
		DroneMove.ObstacleDist = Radius+192;
		DroneMove.ObstacleSlices = 12;
		
		A_StartSound ("Vehicle/Drone/Motor",CHAN_VOICE,CHANF_LOOPING,1,2.25);
		If (!Turret) ThreatLevel = THREAT_NONE;
		//The gun drone can talk, with the turret making the hull talk when switching targets and stuff. But this drone isn't as talkative as the quadcopters.
		If (KAIHandler) Yapper = KAIHandler.GetNPCVoice ("Panopticon");
	}
	
	Override Bool SpawnDamageSmoke()
	{
		If (!Super.SpawnDamageSmoke()) Return False;
		Vector3 SpawnPos = Level.Vec3Offset (Pos,(FRandom(-24,24),FRandom(-24,24),FRandom(10,16)));
		Actor Smoke = Spawn ("MVP_DamageSmoke",SpawnPos);
		Smoke.Roll = FRandom(-180,180);
		Smoke.A_SetScale (FRandom(0.3,0.75));
		Smoke.Vel.Z = FRandom (2,6);
		Return True;
	}
	
	Void MVP_BigGunDroneChase()
	{
		KAI_Chase_PreChecks();
		If (IsDead (Target)) Target = Null;
		KAI_Chase_Retarget(0,True);
		
		Bool MovedAlready; Bool B;
		Int KMTFlags = KMT_ZIGZAG;
		
		//DETERMINE IF WE SHOULD BE MOVING AWAY FROM THE TARGET.
		Bool RunAway = (!bNoFear && (IsFrightening (Target) || bFrightened)); //Run away from spooky actors, or maybe we're just a little bitch.
		If (ReverseSteps > 0) RunAway = True;
		//Bool Reverse;
		//If we're set to run away from targets over our threat threshold that get too close, do so.
		Double ReverseRange = User_RetreatDistance;
		Int TargetLevel;
		If (Target)
		{
			ReverseRange += Target.Radius;
			TargetLevel = AssessThreatLevel(Target, True);
		}
		
		Bool TargetInSight = CheckSight (Target,SF_IGNOREWATERBOUNDARY);
		Bool LockedIn = bChaseGoal && Goal; //Don't run away if you have a target but are also patrolling in bChaseGoal mode.
		Bool BigThreat = (ThreatLevelThreshold != THREAT_ASSESS && TargetLevel >= ThreatLevelThreshold); //Target's threat level is over the threshold.
		
		//Avoid melee attackers.
		If (!LockedIn && !RunAway && Target && (bAvoidMelee || Level.Info.Flags3 & LEVEL3_AVOIDMELEE))
		{
			Bool IsMeleeAttacker;
			If (!Target.Player && Target.MeleeState) //Melee NPC
			{
				Double Dist = (Target.MeleeRange + Target.Radius)*2;
				IsMeleeAttacker = Distance3DSquared (Target) < Dist*Dist;
			}
			Else If (Target.Player && Target.Player.ReadyWeapon && Target.Player.ReadyWeapon.bMeleeWeapon) //Melee player
				IsMeleeAttacker = Distance3DSquared(Target) <= 192*192;
			
			RunAway = IsMeleeAttacker;
			ReverseSteps = Random (2,8);
		}
		
		If (Health > WoundHealth) //Ignore weak hazards if not weak yourself.
		{
			For (Int I = Hazards.Size()-1; I >= 0; I--)
			{
				If (Hazards[I] && Hazards[I].Level <= HazardInfo.HAZARD_MEDIUM)
					Hazards.Delete(I);
			}
		}
		
		//Reverse from nearest enemy. Reverse because well, they're close.
		NearestEnemy = FindNearestEnemy (256);
		If (NearestEnemy)
		{
			RunAway = True;
			ReverseSteps = Random (2,8);
		}
		
		HazardInfo Haz;
		If (!RunAway) Haz = GetStrongestHazard(Hazards); //Avoid strongest hazard around if not already busy with backing off from a nearby enemy.
		
		//Keep different distances for targets.
		If (!LockedIn && !RunAway && Target && Target != Goal)
		{
			Double Dist = 0;
			Switch (TargetLevel)
			{
				Case THREAT_UNSTOPPABLE:
					Dist = 1024;
					Break;
				Case THREAT_SUPERDANGER:
					Dist = 896;
					Break;
				Case THREAT_VERYDANGEROUS:
					Dist = 640;
					Break;
				Case THREAT_DANGEROUS:
					Dist = 448;
					Break;
				//Just in case the threshold is changed ^^^^^
				Case THREAT_ABOVENORMAL:
					Dist = 256;
					Break;
				Case THREAT_NORMAL:
					Dist = 192;
					Break;
				Case THREAT_MILD:
				Case THREAT_LOW:
					Dist = 64;
					Break;
				Case THREAT_VERYLOW:
				Default:
					Break;
			}
			If (Dist > 0) Dist += Target.Radius;
			If (Health <= WoundHealth) //Keep double distance when hurt.
				Dist *= 2;
			
			Double TargDist = Distance3D (Target);
			If (!ReverseSteps && TargDist <= ReverseRange+Radius) //Too close to target, reverse.
			{
				RunAway = True; //In case we otherwise wouldn't run away, like if retreatrange is turned off.
				ReverseSteps = Random (2,8);
			}
			
			//Run from target if hazard isn't closer.
			If (Dist && TargDist <= Dist && !(Haz && TargDist >= GetHazardDistance (Haz)))
			{
				RunAway = True;
				Haz = Null; //Signify that we shouldn't run from a hazard later in the function.
			}
		}
		//Also check for scary hazards.
		If (Haz)
			RunAway = True;
		
		//Dodge projectiles by driving out of the way if not already busy.
		Actor Proj;
		If (!RunAway && !LockedIn && (Proj = MVP_DroneDodge(User_DodgeRange)))
		{
			Double Delta = DeltaAngle (Proj.Angle,AngleTo(Proj));
			Vector3 Where = Delta >= -2 ? (Vec2Angle(128,Angle+90),0) : (Vec2Angle(128,Angle-90),0);
			Where.Z = GetZAt (Where.X,Where.Y,flags:GZF_ABSOLUTEPOS);
			[B, DodgePos] = IsPosReachable (DodgePos);
			DodgePos = B ? Where : DodgePos; //We can just go where we want, do that. If not, go to the closest position IsPosReachable() returned.
		}
		
		//Dodge projectile, if not busy already. So if we're already running from something else, stop the dodge.
		If (!KAI_Math.IsEmptyVector3 (DodgePos) && NewPosStepCount <= 32 && Level.Vec3Diff (Pos,DodgePos).Length() >= 24)
		{
			Speed += 2;
			KAI_MoveTowards (DodgePos,DroneMove.DetourFactor,DroneMove.AngleLimit+4); //No zigzag.
			Speed -= 2;
			NewPosStepCount++;
			Return;
		}
		Else
		{
			DodgePos = (Double.NaN,Double.NaN,Double.NaN);
			NewPosStepCount = 0;
		}
		
		//Run away from threat, be it the target itself, a hazard, or a nearby enemy./
		If (!LockedIn && RunAway)
		{
			Vector3 RunPos = (!Haz && Target) ? Target.Pos : GetHazardOriginPos(Haz);
			If (NearestEnemy)
				RunPos = NearestEnemy.Pos;
			
			If (Target && RunPos == Target.Pos && BigThreat) //Just drive away from very dangerous enemies.
				ReverseSteps = 0;
			
			If (ReverseSteps > 0)
				ReverseSteps--;
			
			Console.Printf ("reversesteps %u",reversesteps);
			
			If (ReverseSteps <= 0)
				KAI_MoveAway (Null,DroneMove.Attempts,DroneMove.RunRad,DroneMove.MaxSteps,DroneMove.DetourFactor,DroneMove.AngleLimit,flags:KMTFlags,targpos:RunPos,DroneMove);
			Else //Reverse away from threat.
			{
				KMTFlags &= ~(KMT_ZIGZAG); //Don't zigzag when backing off.
				Frame = RevFrame;
				//If (Rev++ >= 1) //Every 2 tics, switch frame.
				{
					//Rev = 0;
					If (RevFrame == 0)
						RevFrame = 3;
					Else
						RevFrame--;
				}
				//Tics--; //Reduce tics twice as fast to make it reverse faster.
				Angle -= 180;
				//Speed *= 1.55;
				KAI_MoveAway (Null,DroneMove.Attempts,DroneMove.RunRad,DroneMove.MaxSteps,DroneMove.DetourFactor,DroneMove.AngleLimit,flags:KMTFlags,KMA_STRAIGHT,RunPos,DroneMove);
				//Speed /= 1.55;
				Angle += 180;
			}
			
			MovedAlready = True;
		}
		
		//If our turret can't aim at its' target, and we haven't ran away from something already and aren't focused on patrolling, try to position ourselves better.
		If (!MovedAlready && !LockedIn && Turret && Turret.Target && Turret.ElevationState == Turret.ELEVATION_TOOHIGH)
		{
			KAI_MoveAway (Turret.Target,DroneMove.Attempts,DroneMove.RunRad,DroneMove.MaxSteps,DroneMove.DetourFactor,DroneMove.AngleLimit,flags:KMTFlags);
			MovedAlready = True;
		}
		
		//Move to target.
		If (!MovedAlready && Target && Target != Goal && !LockedIn)
		{
			KAI_MoveTowards (Target.Pos.PlusZ(Target.Height/2),DroneMove.DetourFactor,DroneMove.AngleLimit,flags:KMTFlags);
			MovedAlready = True;
		}
		
		//Patrol handling.
		If (!MovedAlready)
		{
			[B, MovedAlready] = KAI_Chase_PatrolHandling ("Spawn",DroneMove.DetourFactor,DroneMove.AngleLimit,flags:KMTFlags);
			If (bChaseGoal && Goal && Target != Goal) //Manually go to goal when it "don't chase target" mode.
				KAI_MoveTowards (Goal.Pos,DroneMove.DetourFactor,DroneMove.AngleLimit,flags:KMTFlags);
			//If (b && goal) spawn ("kai_debugpoint",goal.pos);
			if (goal)console.printf ("patrolling, goal is at %d %d %d, moved already %d, reached point %d, reactiontime %d",goal.pos,movedalready,b,reactiontime);
		}
		
		HandleChaseTimer();
	}
	
	UInt8 ReverseSteps;
	
	States
	{
		See:
			TNT1 A 0 A_StartSound (ActiveSound,flags:CHANF_LOOPING,0.5,1.75);
			PND0 ABCD 2 MVP_BigGunDroneChase();
			Goto See+1;
		Death:
			PNDD A -1
			{
				If (!Turret)
					Frame = 4; //PNDDE
				
				Actor Boom = Spawn ("MVP_Explosion",Pos);
				Boom.Scale *= 1.25;
				Boom.SetDamage (96);
				Boom.MaxTargetRange = 128;
				Boom.MeleeRange = Radius+24;
				Boom.bNoGravity = True;
				Boom.bGetOwner = True;
				Boom.Target = Self; //We exploded, this explosion is ours.
				bFloatBob = False;
				A_StopAllSounds ();
			}
			Stop;
		XDeath:
			TNT1 A 0
			{
				Actor Boom = Spawn ("MVP_Explosion",Pos);
				Boom.Scale *= 2.0;
				Boom.SetDamage (192);
				Boom.MaxTargetRange = 256;
				Boom.MeleeRange = Radius+64;
				Boom.bNoGravity = True;
				Boom.bGetOwner = True;
				Boom.Target = Self; //Does it even matter if we're gone? Very philosophical.
				
				SmokeCounter = Random (24,48);
				Bool B; Actor Debris;
				For (Int I; I <= SmokeCounter; I++)
				{
					[B, Debris] = A_SpawnItemEx ("MVP_DiCokkaDebris",FRandom (Radius,-Radius),FRandom(Radius,-Radius),FRandom (0,Height),FRandom (-6,6),FRandom (-6,6),FRandom (2,8));
					If (Debris)
					{
						Debris.Scale *= FRandom (0.1,0.8);
						Debris.bXFlip = Random (False,True);
					}
				}
				
				If (Turret)
				{
					[B, Debris] = A_SpawnItemEx ("MVP_GunDroneGib",zofs: 40, FRandom (2,12), FRandom (4,-4), FRandom (4,10)); //Gun
					If (Debris) Debris.Scale *= 2.2;
					[B, Debris] = A_SpawnItemEx ("MVP_GunDroneGib",xofs: -12,zofs: 48, FRandom (0,-12), FRandom (12,-12), FRandom (8,18)); //Camera
					If (Debris)
					{
						Debris.Scale *= 2.2;
						Debris.SmokeCounter = 1;
					}
				}
			}
			Stop;
	}
}

Class MVP_BigGunDroneTurret : MVP_GunDroneTurret
{
	Default
	{
		Health 150;
		WoundHealth 50; //Shit aim threshold
		XScale 1;
		YScale 0.833333; //1.0 / 1.2
		Radius 20;
		Height 30;
		DeathHeight 24;
		Mass 150;
		FriendlySeeBlocks 64;
		MaxTargetRange 8192;
		RipLevelMin 3;
		+LookAllAround;
		//+MVP_BaseVehicle.Drone;
		+KAI_BaseTurret.DontStayAround;
		+KAI_BaseTurret.TransferDamage;
		+NoRadiusDmg;
		KAI_Actor.ThreatLevel THREAT_DANGEROUS;
		KAI_Actor.ThreatLevelThreshold THREAT_VERYDANGEROUS;
		KAI_Actor.Inaccuracy (16,16,16);
		KAI_Actor.InaccuracyFrequency 0.3;
		AutomapOffsets (0,18); //TODO: Make sure these look right for this big drone.
		KAI_BaseTurret.MaximumPitch -45;
		KAI_BaseTurret.MinimumPitch 15;
		KAI_BaseTurret.TurnSoundRadius 1.5;
		+KAI_BaseTurret.TurnSoundNoStop;
		KAI_BaseTurret.AttackSpeed 170;
		KAI_BaseTurret.FastAttackSpeed 200;
		KAI_BaseTurret.CombatAngleTurnRate 40;
		KAI_BaseTurret.CombatPitchTurnRate 40;
		Obituary "%o was shot by a drone";
		KAI_BaseTurret.TurnSound "Vehicle/Drone/BigTurret";
		
		Tag "MUGSC-4A Gun"; //Mult-utila granda ŝpurita ĉasio 4 "Artileriisto"
		AttackSound "Vehicle/APC/SmallMGFire";
		
		DamageFactor 0.8; //Generic damage factor.
		DamageFactor "ExplosiveImpact", 0.7;
		DamageFactor "Explosion", 0.7;
		DamageFactor "Explosive", 0.7;
		DamageFactor "Grenade", 0.4;
		DamageFactor "HitScan", 0.7; //The generic damage type of hitscan attacks.
		DamageFactor "Shrapnel", 0.4;
		DamageFactor "Fire", 0.5;
		DamageFactor "Plasma", 0.7;
		
		DamageFactor "Autocannon", 1.0;
		DamageFactor "LargeRifleBullet", 0.9;
		DamageFactor "RifleBullet", 0.8;
		DamageFactor "SmallRifleBullet", 0.7;
		DamageFactor "Missile", 1.0;
		DamageFactor "AntiAir", 0.5;
		
		//Deflection stats
		KAI_Actor.DeflectionChance 48;
		KAI_Actor.DeflectDamageFactor 0.6;
		KAI_Actor.DeflectSlowDownFactor 0.75;
		KAI_Actor.DeflectionFunnel (10,-10,10,-10);
	}
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		FireOfs = (0,0,16);
	}
	
	Enum Modes
	{
		MODE_AUTO 	= 0,
		MODE_SEMI 	= 1,
		MODE_SINGLE	= 2,
		MODE_ROCKET = 3,
	}
	
	UInt8 FireMode;
	
	Override Bool ShouldAttack(Bool NoStateJump)
	{
		If (ReactionTime-- > 0 || !MVP_BaseTurret.ShouldAttack(NoStateJump)) //Basic attack checks returned false.
			Return False;
		
		//Check if an enemy stronger than our current target is nearby and targeting us.
		If (Random (0,255) < 32)
		{
			Array <Actor> Others;
			LookForEnemiesEx (Others,512,False,True);
			ForEach (Targ : Others)
			{
				If (IsDead (Targ))
					Continue;
				
				If (Targ != Target && Targ.Target == Self && AssessThreatLevel (Targ) > AssessThreatLevel (Target))
				{
					Target = Targ;
					console.printf ("found something stronger than my current target in range that's attacking me");
					Return True;
				}
			}
		}
		
		//We have a hostile target in range and within line of fire.
		//TODO: Add separate check for the rockets, such as for the turret LOF check to not check assuming the rifle bullets.
		Double Dist;
		If (Target && (Dist = Distance3D (Target)) <= MaxTargetRange && IsActorHostile (Target) && KAI_TurretCheckLOF (Target,0,0,FireOfs,TLOF_OnlyAhead,"MVP_RifleBullet"))
		{
			//Determine what fire mode to use by firing 10 traces with a 2 degree wide cone.
			Int Hits = DetermineHitChance (Target,True,Dist,shots:15,FireOfs,(1.5,-1.5,1.5,-1.5),MaxTargetRange,GetFAFPosOffset(Target,TurretAimPos));
			
			If (Hits >= 10)
			{
				FireMode = MODE_AUTO;
				SmokeCounter = Random (25,35);
			}
			Else If (Hits >= 5)
			{
				FireMode = MODE_SEMI;
				SmokeCounter = 3;
			}
			Else
			{
				FireMode = MODE_SINGLE;
				SmokeCounter = 1;
			}
			
			If (!NoStateJump)
			{
				If (FireMode == MODE_AUTO || FireMode == MODE_SEMI) //Normal fire.
					SetState (MissileState);
				Else If (FireMode == MODE_SINGLE) //Sniping
					SetStateLabel ("Fire.Single");
				Else //Lol
					SetStateLabel ("Fire.Rocket");
			}
				
			Return True;
		}
		
		//TODO: Add check here for making the turret retarget closer enemies that are stronger than the current target?
		
		Return False;
	}
	
	Void MVP_BigGunDroneShoot()
	{
		Frame = UpdateTurretElevation (9,5,7,7); //J, F, H, H
		//If (FireMode == MODE_ROCKET) TODO: Later, also, have the backblast effect rely on the visual sprite pitch and angle of the turret, probably.
		
		A_StartSound (AttackSound,CHAN_WEAPON,CHANF_OVERLAP,1.0,0.5);
		Bool B; Actor Proj = A_SpawnProjectile ("MVP_RifleBullet",FireOfs.Z,flags:CMF_AIMDIRECTION,Pitch); //pew pew
		Switch (FireMode)
		{
			Case MODE_AUTO:
				AddProjectileSpread (Proj,(0.75,-0.75),(0.75,-0.75));
				Break;
			Case MODE_SEMI:
				AddProjectileSpread (Proj,(0.45,-0.45),(0.45,-0.45));
				Break;
			Case MODE_SINGLE:
				AddProjectileSpread (Proj,(0.3,-0.3),(0.3,-0.2));
				Break;
			Default:
				Break; //No spread since something is wrong anyway if we got here.
		}
		[B, Proj] = A_SpawnItemEx ("MVP_BulletCasing",0,-6,16,FRandom(4,-4),FRandom(4,8),FRandom(3,8));
		If (Master) //Recoil the drone back.
			Master.Vel += KAI_Math.AngleToVector3D (Angle,Pitch,-0.25);
		Proj.Scale.X = 0.125; Proj.Scale.Y = 0.104166;
	}
	
	//TODO: Use smoke counter to control how many shots the gun will fire, and ReactionTime to control how many tics it takes before firing again.
	Vector3 FireOfs;
	
	States
	{
		Spawn:
			PND0 E 0;
			PND0 # 1
			{
				RotateToVehicle();
				KAI_Look (maxseedist:MaxTargetRange,DEFAULT_HEARDISTANCE,extraflags:KAIL_CHASETARGET);
				Frame = UpdateTurretElevation (8,4,6,6); //I, E, G, G
			}
			Loop;
		See:
			PND0 # 1
			{
				DoCombatTraverse();
				RotateToVehicle();
				MVP_GunDroneTurretChase();
				UpdateTurretSnapTimer();
				Frame = UpdateTurretElevation (8,4,6,6); //I, E, G, G
			}
			Loop;
		Fire:
			PND0 ###### 1 {Frame = UpdateTurretElevation (8,4,6,6); /*I, E, G, G*/}
			PND0 # 3 Light ("RifleFiringLightNoSelfLighting") MVP_BigGunDroneShoot();
			PND0 # 1
			{
				//Out of ammo.
				If (SmokeCounter-- <= 1)
				{
					ReactionTime = Clamp (GameTicRate*Random(2,8),0,UInt8.MAX);
					If (MVP_DroneSwitchTargets(KAI_Actor(Master),2048) && Random (0,255) < 16 && MVP_GunDrone(Master) && MVP_GunDrone(Master).Yapper)
						KAI_Actor(Master).SayVoiceLine (VOICE_SEE,MVP_GunDrone(Master).Yapper);
					Return SeeState;
				}
				
				If (FireMode == MODE_AUTO)
				{
					//If you have no target, or it's dead.
					If (!Target || IsDead (Target))
					{
						A_ClearTarget();
						LookForPlayers (True); //Look for a new target.
					}
					
					If (!KAI_TurretRefire (48,"See",True,16) &&
					//If the target is too high or low to shoot.
					((Target && IsOverPitchLimits (Target,12,GetFAFPosOffset(Target,TurretAimPos)) != ELEVATION_INBOUNDS) ||
					!KAI_TurretCheckLOF (Target,0,0,FireOfs,0,"MVP_RifleBullet")))
					{
						A_ClearTarget();
						Return ResolveState ("See");
					}
				}
				
				HandleChaseTimer();
				
				Frame = UpdateTurretElevation (8,4,6,6); //I, E, G, G
				Return State (Null);
			}
			Goto Fire+6;
		Fire.Single:
			PND0 # 0 {Inaccuracy /= 2.5;} //Be more accurate
			PND0 ################################### 1 {Frame = UpdateTurretElevation (8,4,6,6); /*I, E, G, G*/} //Adjust for one second.
			PND0 # 3 Light ("RifleFiringLightNoSelfLighting") MVP_BigGunDroneShoot();
			PND0 # 0
			{
				If (MVP_DroneSwitchTargets(KAI_Actor(Master),2048) && Random (0,255) < 16 && MVP_GunDrone(Master) && MVP_GunDrone(Master).Yapper)
					KAI_Actor(Master).SayVoiceLine (VOICE_SEE,MVP_GunDrone(Master).Yapper);
				ReactionTime = Random(35,115); //Only wait 1-3 seconds after the last shot if you just sniped.
				Inaccuracy *= 2.5;
			}
			Goto See;
	}
}


Class MVP_GunDroneGib : Actor
{
	Default
	{
		+RollSprite;
		XScale 0.5;
		YScale 0.41666; //0.5/1.2
		-Solid;
		+NoBlockmap;
	}
	
	States
	{
		Spawn:
			PNDD C 0 NoDelay A_JumpIf (SmokeCounter == 0,"Fall"); //Gun
			PNDD D 0 A_JumpIf (SmokeCounter == 1,"Fall"); //Camera
			PNDD B 0 A_JumpIf (SmokeCounter == 2,"Fall"); //Rocket pod
		Fall:
			PNDD # 1
			{
				Roll += 20;
				If (!TestMobjZ(True) || GetZAt ()+1 >= Pos.Z)
				{
					If (SmokeCounter == 0) //Hit the floor.
					{
						Roll = 185;
						SpriteOffset.Y -= 3;
						Return FindState ("Death",True);
					}
					Else If (SmokeCounter == 1)
					{
						Roll = 0;
						Return FindState ("Death.Camera",True);
					}
					Else
					{
						Roll = 180;
						Return FindState ("Death.RocketPod",True);
					}
				}
				
				Return State(Null);
			}
			Loop;
		Death:
			PNDD C -1;
			Stop;
		Death.Camera:
			PNDD D -1;
			Stop;
		Death.RocketPod:
			PNDD B -1;
			Stop;
	}
}