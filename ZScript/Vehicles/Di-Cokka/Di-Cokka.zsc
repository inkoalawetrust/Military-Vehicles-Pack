//The Di-Cokka has very weak stats compared to the other vehicles, and especially future ones. This is because it's a cartoony vehicle from Metal Slug.
Class MVP_DiCokka : MVP_BaseVehicle
{
	Default
	{
		//$Title Di-Cokka
		//$Category Vehicles/Di-Cokka
		//$Sprite MSV1Z1
		Health 600;
		GibHealth 100;
		Radius 48;
		Height 60;
		Speed 8;
		FastSpeed 10;
		CameraHeight 32;
		DeathHeight 60;
		FriendlySeeBlocks 64; //Same as the default despite being an armed vehicle. Because it's shells are much slower.
		MaxTargetRange 8192;
		MaxStepHeight 24;
		Mass 10000;
		XScale 0.9;
		YScale 0.75;
		Tag "Type II AFV \"Di-Cokka\"";
		Obituary "%o was blown up by a Rebel tank.";
		KAI_BaseVehicle.VehicleTurret "MVP_DiCokkaTurret";
		KAI_BaseVehicle.MaxCorpseRadius 24; //Only crushes human sized objects. And only incidentally.
		KAI_BaseVehicle.MaxCorpseHeight 60;
		KAI_Actor.ThreatLevel THREAT_ABOVENORMAL; //The Di-Cokkas' threat level is basically static.
		
		-NoPain; //This vehicle CAN feel pain.
		PainChance 30;
		PainChance "Autocannon", 55;
		PainChance "RifleBullet", 20;
		PainChance "MarineHMG", 10;
		PainChance "MarineRifle", 25;
		PainThreshold 10;
		PainSound "Vehicle/Di-Cokka/Pain";
		DeathSound "Vehicle/Di-Cokka/Death";
		
		//Doesn't have any damage factors. It's a cartoon vehicle, plus it's already overall weaker than the other vehicles like the APC.
		DamageFactor "Melee", 1;
		DamageFactor "Electric", 1;
		DamageFactor "ExplosiveImpact", 1;
		DamageFactor "Explosion", 1;
		DamageFactor "Explosive", 1;
		DamageFactor "Grenade", 1;
		DamageFactor "HitScan", 1; //The generic damage type of hitscan attacks.
		DamageFactor "Fire", 1;
		DamageFactor "Crush", 1;
		DamageFactor "Disintegrate", 1;
		DamageFactor "Railgun", 1;
		DamageFactor "Falling", 1;
		//Damage factors specific to the Smart Marines.
		DamageFactor "MarineHMG", 1;
		DamageFactor "MarineGrenade", 1;
		DamageFactor "MarineRifle", 1;
		//Vehicle damage factors
		DamageFactor "Autocannon", 1;
		DamageFactor "RifleBullet", 1;
	}
	
	String User_Color; //The Di-Cokkas' color.
	Bool User_TargetPrediction; //If the Di-Cokka should be able to lead its' shots. By default it doesn't.
	Bool User_NoCorpseCrush; //If true, the Di-Cokka won't crush small corpses it happens to drive over.
	Bool User_RealisticTurretTurn; //Instead of instantly facing the target, the turret turns to face them as fast as a real world WW2 tank turret moves.
	
	Bool ExtremePain; //The Di-Cokka flinched from a very strong attack.
	
	Override Void SpawnVehicleTurret ()
	{
		Super.SpawnVehicleTurret();
		
		If (Turret)
		{
			Turret.bNoTargetPrediction = !User_TargetPrediction;
			//Turret.bNoCombatTraverse = !User_RealisticTurretTurn;
			If (!User_RealisticTurretTurn)
				Turret.CombatAngleTurnRate = Turret.CombatPitchTurnRate = 105;
		}
	}
	
	Override Void UserVariableDefaults()
	{
		If (User_RetreatDistance == 0) User_RetreatDistance = 512;
		Super.UserVariableDefaults();
	}

	//Unlike most vehicles, the Di-Cokka only ever stops to shoot when the turret is firing a volley, and only during some volleys.
	Override Bool StayStillAndShoot(Actor CheckSightFrom)
	{
		If (Health <= SpawnHealth()/2.5) Return False; //Don't stop if health is low. No need to check the turret, since it transfers its' damage.
		//Don't stop if your or your turrets' target is more dangerous than you.
		If (AssessThreatLevel (Target) > Self.ThreatLevel || Turret && AssessThreatLevel (Turret.Target) > Self.ThreatLevel) Return False;
		If (Turret && !Turret.bDontStayAround && KAI_BaseVehicle.StayStillAndShoot (CheckSightFrom))
		{
			A_StopSound (CHAN_MOVING);
			A_StartSound("Vehicle/Di-Cokka/Idle",CHAN_IDLING,CHANF_LOOPING,0.4,0.8);
			ChaseTimer = Random (64,96);
			StayStillDelay = ChaseTimer+(Random (4,10)*GameTicRate);
			SetStateLabel ("StickAround");
			Return True;
		}
		Return False;
	}
	
	Override Int DamageMobj (Actor Inflictor, Actor Source, Int Damage, Name MOD, Int Flags, Double Angle)
	{
		Int LeDamage = Super.DamageMobj (Inflictor, Source, Damage, MOD, Flags, Angle);
		
		//If DamageMobj decided that the chassis should flinch. Then make the turret flinch as well. Unless its' already flinching.
		If (InStateSequence(CurState.NextState,FindState ("Pain")))
		{
			If (LeDamage >= 40) ExtremePain = True; //Got hurt by a very damaging attack, so flinch for longer.
			If (Turret && !IsInState (Turret,"Pain"))
			{
				If (Turret Is "MVP_DiCokkaTurret") MVP_DiCokkaTurret(Turret).ExtremePain = ExtremePain;
				Turret.TriggerPainChance (MOD,True);
			}
		}
		
		Return LeDamage;
	}
	
	//This simply returns true so that the vehicle doesn't always run away from all enemies. Even if the chassis itself technically has no attack.
	Override Bool CanAttack()
	{
		If (Turret)
			Return True;
		
		Return False;
	}
	
	Mixin MVP_DiCokkaSharedVirtuals; //Check the bottom of the file.
	
	States
	{
		Spawn:
			MSV1 A 4
			{
				A_StopSound (CHAN_MOVING);
				A_StartSound("Vehicle/Di-Cokka/Idle",CHAN_IDLING,CHANF_LOOPING,0.4,0.8);
				KAI_Look (maxseedist:MaxTargetRange,DEFAULT_HEARDISTANCE,extraflags:KAIL_CHASETARGET);
			}
			Loop;
		//The hull is basically just a moving platform for the turret, so its' AI is just whatever KAI_Chase has.
		See:
			MSV1 AABBCCDDEEFF 2
			{
				A_StopSound (CHAN_IDLING);
				ActiveSound = Health >= SpawnHealth()/2.5 ? "Vehicle/Di-Cokka/Move" : "Vehicle/Di-Cokka/AltMove";
				A_StartSound (ActiveSound,CHAN_MOVING,CHANF_LOOPING,0.6,0.7);
				KAI_LandVehicleChase ("Spawn",chaseflags:CHF_DONTIDLE,followdist:256);
				If (!User_NoCorpseCrush) KAI_CrushCorpses (1);
			}
			Loop;
		Pain:
			MSV1 # 20
			{
				A_StopSound (CHAN_IDLING);
				A_StopSound (CHAN_MOVING);
				A_StartSound (PainSound,CHAN_BODY);
			}
			MSV1 # 0 A_JumpIf (ExtremePain,1); //Flinch for a bit longer.
			Goto See;
			
			MSV1 # 16 {ExtremePain = False;}
			Goto See;
		//The Di-Cokka sinks down when it dies.
		Death:
			MSV1 R 0 A_SetSize (-1,Height-1);
			MSV1 R 8 A_StartSound (DeathSound,CHAN_BODY);
			MSV1 S 8 A_SetSize (-1,Height-2);
			MSV1 T 8 A_SetSize (-1,Height-3);
			MSV1 U 8 A_SetSize (-1,Height-2);
			MSV1 V 8 A_SetSize (-1,Height-1);
			MSV1 V -1;
			Stop;
		//Ditto, but the Di-Cokka explodes into a shower of metal debris soon after.
		XDeath:
			MSV1 R 0 A_SetSize (-1,Height-1);
			MSV1 R 8 A_StartSound (DeathSound,CHAN_BODY);
			MSV1 S 8 A_SetSize (-1,Height-2);
			MSV1 T 8 A_SetSize (-1,Height-3);
			MSV1 U 8 A_SetSize (-1,Height-2);
			MSV1 V 8 A_SetSize (-1,Height-1);
			MSV1 V Random (35,35*5); //Wait for it.
			MSV1 V 0
			{
				SmokeCounter = Random (64,192);
				Bool b; Actor Debris;
				
				Debris = Spawn ("MVP_MetalSlugExplosion",Pos);
				If (Debris)
				{
					Debris.A_SetRenderStyle (1.0,STYLE_NORMAL);
					Debris.A_SetScale(2.5);
					Debris.MeleeRange = 128;
				}
				
				For (Int I; I <= SmokeCounter; I++)
				{
					[B, Debris] = A_SpawnItemEx ("MVP_DiCokkaDebris",FRandom (Radius,-Radius),FRandom(Radius,-Radius),FRandom (0,Height),FRandom (-32,32),FRandom (-32,32),FRandom (4,16));
					If (Debris)
					{
						Debris.Scale *= FRandom (0.2,0.7);
						Debris.bXFlip = Random (False,True);
					}
				}
			}
			Stop;
	}
}

Class MVP_DiCokkaTurret : MVP_BaseTurret
{
	Default
	{
		Health 300;
		Radius 32;
		Height 24;
		XScale 0.9;
		YScale 0.75;
		Mass 2000;
		DeathHeight 24;
		FriendlySeeBlocks 48;
		MaxTargetRange 6144;
		Tag "Di-Cokka Turret";
		Obituary "%o was blown up by a Rebel tank.";
		KAI_Actor.ThreatLevel THREAT_ABOVENORMAL;
		KAI_BaseTurret.MaximumPitch -20;
		KAI_BaseTurret.MinimumPitch 10;
		KAI_BaseTurret.CombatAngleTurnRate 24; //The M4 Shermans' turret traverse rate, since the Di-Cokka kinda looks like a cartoony Sherman with a German turret.
		KAI_BaseTurret.CombatPitchTurnRate 24;
		KAI_BaseTurret.AttackSpeed 25;
		KAI_BaseTurret.FastAttackSpeed 30;
		+KAI_BaseTurret.TransferDamage;
		+KAI_BaseTurret.DontStayAround;
		
		+NoRadiusDmg; //Prevents TransferDamage from doubling the explosion damage received by the tank.
		//Copied from the hull.
		-NoPain; //This vehicle CAN feel pain.
		PainChance 30;
		PainChance "Autocannon", 55;
		PainChance "RifleBullet", 20;
		PainChance "MarineHMG", 10;
		PainChance "MarineRifle", 25;
		PainThreshold 10;
		PainSound "Vehicle/Di-Cokka/Pain";
		DeathSound "Vehicle/Di-Cokka/Death";
		AttackSound "Vehicle/Di-Cokka/Shoot";
		KAI_BaseTurret.TurnSound "Vehicle/APC/TurretTurn";
		
		//Doesn't have any damage factors. It's a cartoon vehicle, plus it's already overall weaker than the other vehicles like the APC.
		//Well actually it does, but only a slight reduction in damage from generic and Smart Marine hitscans.
		DamageFactor "Melee", 1;
		DamageFactor "Electric", 1;
		DamageFactor "ExplosiveImpact", 1;
		DamageFactor "Explosion", 1;
		DamageFactor "Explosive", 1;
		DamageFactor "Grenade", 1;
		DamageFactor "HitScan", 0.9; //The generic damage type of hitscan attacks.
		DamageFactor "Fire", 1;
		DamageFactor "Crush", 1;
		DamageFactor "Disintegrate", 1;
		DamageFactor "Railgun", 1;
		DamageFactor "Falling", 1;
		//Damage factors specific to the Smart Marines.
		DamageFactor "MarineHMG", 1;
		DamageFactor "MarineGrenade", 1;
		DamageFactor "MarineRifle", 0.9;
		//Vehicle damage factors
		DamageFactor "Autocannon", 1;
		DamageFactor "RifleBullet", 1;
	}
	
	Actor WarningZone; //The warning zone the turret creates right before it fires.
	Actor FireLocationPoint; //The actor that the WarningZone is attached to, this actor warps at wherever the turret is facing to warn marines in the way.
	Bool ExtremePain; //Makes the turret play its' extreme pain animation when it flinches.
	Int RefireDelay; //Stop the tank turret from firing another shell for a set amount of time.
	
	Override Bool ShouldAttack (Bool NoStateJump)
	{
		If (!MVP_BaseTurret.ShouldAttack()) Return False;
		If (Target && !CheckFOV (Target,90/2)) Return False;
		If (IsOverPitchLimits (Target,14,Target.Height/2) != ELEVATION_INBOUNDS) Return False;
		
		//Increase attack chance when close to death.
		Bool AboutToDie = CriticallyLowHealth();
		If (AboutToDie)
			AggressionMultiplier *= 0.8;
		Else
			AggressionMultiplier = Default.AggressionMultiplier;
		
		If (!RefireDelay && Target != Self && KAI_CheckMissileRange(Target) && !IsDead (Target) && IsActorHostile (Target) && KAI_TurretCheckLOF (Target,200,128,(0,0,14),TLOF_DoStayAround))
		{
			If (!NoStateJump)
			{
				//Has a chance to fire three shots one after the other, like in the original game.
				//The chance of doing that is increased when the tank is about to die.
				If (Random[pr_cajump](0,255) < (AboutToDie ? 64 : 56))
					SetStateLabel ("Fire.Triple");
				Else
					SetStateLabel ("Fire");
			}
			Return True;
		}
		
		Return False;
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		If (IsFrozen()) Return;
		If (RefireDelay) RefireDelay--;
		If (WarningZone) //Move the warning to wherever the shell will go, warning marines in advance.
			WarningZone.SetOrigin (GetAttackLocation(),True);
	}
	
	Override Void OnDestroy()
	{
		Super.OnDestroy();
		If (WarningZone) WarningZone.Destroy();
	}
	
	Override Void Die (Actor Source, Actor Inflictor, Int DmgFlags, Name MeansOfDeath)
	{
		If (WarningZone) WarningZone.Destroy();
		Super.Die (Source, Inflictor, DmgFlags, MeansOfDeath);
	}
	
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		
		MissileState = FindState ("Fire",True);
		AttackStates.Push (FindState("Fire",True));
		AttackStates.Push (FindState("Fire.Triple"));
	}
	
	//This one is a bit weird, it allows to not have to copy and paste the firing code 3 times for the triple attack.
	//And returns nothing besides the elevation to put the turret at.
	//It does however have an IsTripleShot parameter, which decreases' the shells' accuracy if it's part of a 3-shot volley.
	Int A_DiCokkaShoot (Bool IsTripleShot = False)
	{
		Bool B; Actor Proj;
		A_StartSound (AttackSound,CHAN_WEAPON,CHANF_OVERLAP,1.0,0.6);
		
		Int TurretVisualElevation = UpdateTurretElevation (11,7,9,9); //L, H, J, J
		
		//Spawn the standalone firing effect of the turret. But at the appropriate spawn height.
		Double FireEffectZ = 8;
		Switch (TurretVisualElevation)
		{
			Case 11: //Facing down
				FireEffectZ = 2;
				Break;
			Case 7:  //Facing forwards
				FireEffectZ = 8;
				Break;
			Case 9: //Facing up
				FireEffectZ = 24;
				Break;
			Default:
				Break;
		}
		[B,Proj] = A_SpawnItemEx ("MVP_DiCokkaShotEffect",60,zofs:FireEffectZ);
		If (Proj) Proj.A_SetScale (FRandom (1.1,1.75));
		Proj = Null;
		//======================================================================================
		Vector2 HorzSpread = !IsTripleShot ? (0.2,-0.2) : (0.4,-0.4);
		Vector2 VertSpread = !IsTripleShot ? (0.25,-0.25) : (0.5,-0.5);
		Proj = A_SpawnProjectile ("MVP_DiCokkaShell",14,flags:CMF_AIMDIRECTION,Pitch);
		//HandleTargetPrediction (Proj,HorzSpread,VertSpread,128);
		AddProjectileSpread (Proj,HorzSpread,VertSpread);
		Proj.Species = Species;
		Proj.bDontHarmSpecies = True;
		Return TurretVisualElevation;
	}
	
	//Same situation as above, but this is for the Di-Cokkas' 1 second fire delay.
	Int A_DiCokkaFireDelay()
	{
		//If the target isn't in the line of fire anymore, then try finding a new target.
		If (!KAI_TurretCheckLOF (Target,200,128,(0,0,14),TLOF_DoStayAround|TLOF_FaceOther))
		{
			Actor AltTarget = PickDifferentTarget (Target,(WarningZone ? WarningZone : Target),512);
			If (AltTarget)
			{
				ChaseTimer = 0; //Reset time since the target was last seen.
				Target = AltTarget;
			}
		}
		If (bNoCombatTraverse) A_FaceTarget (5,5,flags:FAF_MIDDLE);
		HandleChaseTimer();
		Return UpdateTurretElevation (10,6,8,8); //K, G, I, I
	}
	
	//Return if the hulls' health is too low, or if not attached to anything, if the turrets' health is too low.
	Bool CriticallyLowHealth()
	{
		Return (Master && Master.Health <= SpawnHealth()/4 || Health <= SpawnHealth()/4);
	}
	
	//Fire a ray from the direction the turret is facing and return a position to where the ray stopped, which should also be where the projectile with hit.
	Override Vector3 GetAttackLocation ()
	{
		Let Check = New ("MVP_GenericWarnMarineCheck");
		
		Vector3 Direction = (AngleToVector(Angle, Cos(Pitch)), -Sin(Pitch));
		
		Check.Shooter = Self;
		Check.Other = Target;
		Check.Trace ( Level.Vec3Offset (Pos,(0,0,14)), CurSector, Direction, MaxTargetRange, 0 );
		
		Return Check.Results.HitPos;
	}
	
	States
	{
		Spawn:
			MSV1 A 0;
			MSV1 # 1
			{
				RotateToVehicle();
				KAI_Look (maxseedist:MaxTargetRange,DEFAULT_HEARDISTANCE,extraflags:KAIL_CHASETARGET);
				Frame = UpdateTurretElevation (10,6,8,8); //K, G, I, I
			}
			Goto Spawn+1;
		See:
			MSV1 # 1
			{
				If (WarningZone) WarningZone.Destroy();
				//If (bNoCombatTraverse) A_FaceTarget (3,3,flags:FAF_MIDDLE);
				DoCombatTraverse();
				RotateToVehicle();
				KAI_LandVehicleChase (chaseflags:CHF_DONTIDLE|CHF_DONTMOVE);
				UpdateTurretSnapTimer();
				Frame = UpdateTurretElevation (10,6,8,8); //K, G, I, I
			}
			Loop;
		Fire:
			TNT1 A 0 //Makes the marines run from the turrets' impact zone.
			{
				WarningZone = WarnMarines (MWRN_ALLIESTOO,160);
				If (WarningZone) WarningZone.SetOrigin (GetAttackLocation(),True);
			}
			MSV1 ################################### 1 {Frame = A_DiCokkaFireDelay();}//1 second delay, so the RefireDelay is actually RefireDelay+1.
			MSV1 # 6 {Frame = A_DiCokkaShoot();}
			MSV1 # 0
			{
				RefireDelay = Random (2,5)*GameTicRate;
				Double NewDelay = RefireDelay / 1.5;
				If (CriticallyLowHealth()) RefireDelay = Int(NewDelay); //Fire a bit faster when almost dead.
			}
			Goto See;
		//Mostly copied from the above Fire state.
		Fire.Triple:
			TNT1 A 0
			{
				WarningZone = WarnMarines (MWRN_ALLIESTOO,160);
				If (WarningZone) WarningZone.SetOrigin (GetAttackLocation(),True);
				//When the hulls' health isn't too low, have a chance to make the tank stop to fire.
				If (Master && !CriticallyLowHealth() && Random[pr_cajump](0,255) < 96) bDontStayAround = False; //Allow the tank to stop for a bit.
			}
			MSV1 ################################### 1 {Frame = A_DiCokkaFireDelay();}
			//https://www.youtube.com/watch?v=XlLbsTP0C_U
			MSV1 # 6 {Frame = A_DiCokkaShoot(False);} //First shot in the volley has normal accuracy.
			MSV1 ###### 1 {Frame = A_DiCokkaFireDelay();}
			MSV1 # 6 {Frame = A_DiCokkaShoot(True);}
			MSV1 ###### 1 {Frame = A_DiCokkaFireDelay();}
			MSV1 # 6 {Frame = A_DiCokkaShoot(True);}
			MSV1 # 0
			{
				RefireDelay = Random (2,5)*GameTicRate;
				Double NewDelay = RefireDelay / 1.5;
				If (CriticallyLowHealth()) RefireDelay = Int(NewDelay); //Fire a bit faster when almost dead.
				bDontStayAround = True;
			}
			Goto See;
		Pain:
			TNT1 A 0
			{
				//Might make the turret able to be placed without the Di-Cokka itself or something.
				If (!Master)
					A_StartSound (PainSound,CHAN_BODY,CHANF_OVERLAP);
			}
			MSV1 M 6;
			TNT1 A 0 A_JumpIf (ExtremePain,3);
			MSV1 N 12;
			MSV1 M 6;
			Goto See;
			//If in extreme pain, push the turret back even more.
			MSV1 N 6;
			MSV1 OP 8;
			MSV1 Q Random (24,48); //K.O.
			MSV1 Q 0
			{
				ExtremePain = False;
				Angle -= 135; //Change the turrets' angle to match the angle it visually ended up at.
				TurretSnapDelay = 70; //Give the turret time to slowly rotate around, instead of snapping back to its masters' angle.
			}
			Goto See;
		Death:
			MSV1 WXY 10 RotateToVehicle(RTVF_RELATIVEONLY);
			MSV1 Y 1 RotateToVehicle(RTVF_RELATIVEONLY);
			Wait;
	}
}

//These virtuals are placed in this mixin to not have to copy and paste them on the prop version of the Di-Cokka.
Mixin Class MVP_DiCokkaSharedVirtuals
{
	Int ForcedFireParticlesCount; //If this has a value, then the Di-Cokka is forced to spawn this amount of particles even when dead.
	Double FireParticleFrequency; //How often fire particles spawn.
	Bool IceDeath; //Because the DeathType variable in AActor doesn't work for some reason ?
	
	Override Void SpawnHeadlights ()
	{
		Headlights.Push (SpawnVehicleHeadlight (Self,(32,32,24),spotlightangles:(20,30)));
		Headlights.Push (SpawnVehicleHeadlight (Self,(32,-32,24),spotlightangles:(20,30)));
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		If (IsFrozen()) Return;
		If (GetAge() % (16*FireParticleFrequency) == 0 && !IceDeath)
		{
			//Spawn fire particles when the vehicle is weakened enough.
			If (ForcedFireParticlesCount || !IsDead (Self) && Health <= SpawnHealth()/2.5)
			{
				Actor Particle = Spawn ("MVP_DiCokkaFireParticle",Vec3Offset (FRandom (Radius, -Radius),FRandom (Radius, -Radius),FRandom (0, Height)),ALLOW_REPLACE);
				Particle.Scale.X = Particle.Scale.Y = FRandom (0.4,0.55);
				Particle.bXFlip = Random (False,True);
				If (ForcedFireParticlesCount) ForcedFireParticlesCount--;
			}
		}
	}
	
	Override Void PostBeginPlay ()
	{
		TurretOffsets = (0,0,-0.25);
		FireParticleFrequency = 1.0;
		Super.PostBeginPlay();
		
		//Copied from how the Smart Marines' color variable is handled.
		If (!User_Color || User_Color ~== ""){} //Don't run the code if User_Color is empty.
		Else
		{
			//Handles the random color choice that is performed if the color name given is "Random".
			If (User_Color ~== "Random")
			{
				Static Const String ColorArray[] = {"White","Black","Yellow","Orange","Green","Original","Default"}; //Contains all the valid color names.
				
				User_Color = ColorArray[Random(0,ColorArray.Size()-1)]; //Randomly picks a color string.
			}
			
			If (!(User_Color ~== "Default"))
			{
				A_SetTranslation (String.Format("DiCokka_%s", User_Color));
				If (Turret) Turret.A_SetTranslation (String.Format("DiCokka_%s", User_Color));
			}
			Else
			{
				A_SetTranslation ('');
				If (Turret) Turret.A_SetTranslation ('');
			}
		}
	}
	
	Override Void Die (Actor Source, Actor Inflictor, Int DmgFlags, Name MeansOfDeath)
	{
		Super.Die (Source, Inflictor, DmgFlags, MeansOfDeath);
		If (MeansOfDeath == 'Ice') IceDeath = True;
		If (Health < GetGibHealth())
		{
			ForcedFireParticlesCount = Random (24,64);
			FireParticleFrequency = 0.25;
		}
		Else
			ForcedFireParticlesCount = Random (8,24);
	}
}
