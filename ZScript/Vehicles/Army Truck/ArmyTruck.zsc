Class MVP_ArmyTruck : MVP_BaseVehicle
{
	Default
	{
		//$Title Army Truck
		//$Category Vehicles/Army Truck
		//$Sprite TRK1A1
		Health 900;
		GibHealth 250;
		WoundHealth 300;
		Height 96;
		Radius 72;
		DeathHeight 88;
		Mass 22000;
		Speed 12;
		FastSpeed 18;
		RipLevelMin 2;
		MeleeRange 96; //Used for when the truck runs away.
		KAI_Actor.ThreatLevel THREAT_DANGEROUS; //Carries a lot of soldiers by default.
		KAI_Actor.ActorFollowDist 384;
		
		Obituary "%o was ran over by a truck.";
		Tag "Army Truck";
		ActiveSound "Vehicle/ArmyTruck/Moving";
		DeathSound "SFX/Explosion";
		DamageFactor "Melee", 0.4;
		DamageFactor "Electric", 0.3;
		DamageFactor "ExplosiveImpact", 1.25;
		DamageFactor "Explosion", 1.25;
		DamageFactor "Explosive", 1.25;
		DamageFactor "Grenade", 1.5;
		DamageFactor "HitScan", 0.9; //The generic damage type of hitscan attacks.
		DamageFactor "Shrapnel", 0.8;
		//Damage factors specific to the Smart Marines.
		DamageFactor "MarineHMG", 0.9;
		DamageFactor "LargeRifleBullet", 0.9;
		DamageFactor "MarineGrenade", 1.5;
		DamageFactor "MarineRifle", 0.9;
		//Vehicle damage factors
		DamageFactor "Autocannon", 1.25;
		DamageFactor "RifleBullet", 0.95;
		DamageFactor "SmallRifleBullet", 0.9;
		
		+KAI_BaseVehicle.Transport; //Carries soldiers.
		+NoExtremeDeath; //So the truck doesn't gib enemies it runs over.
	}
	
	Override Void UserVariableDefaults()
	{
		If (User_MarineAmount == 0) User_MarineAmount = 14;
		If (User_RetreatDistance == 0) User_RetreatDistance = 1024;
		Super.UserVariableDefaults();
	}
	
	Override Void Tick()
	{
		Super.Tick ();
		
		If (IsFrozen()) Return;
		
		If (DeployTimer) DeployTimer--;
	}
	
	Mixin MVP_ArmyTruck_Smoke;
	
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		
		If (User_MarineAmount <= 0) ThreatLevel = THREAT_NONE; //It's got no marines so it's no threat unless it rams.
		Else If (User_MarineAmount >= 5) ThreatLevel = THREAT_ABOVENORMAL; //Has too few marines to be classed as dangerous.
		MissileState = FindState ("DeployMarines");
		MeleeState = FindState ("ChargeLoop"); //Most actual ramming code runs in Slam() below, not this state.
		//Marine dropping states.
		AttackStates.Push (FindState("DeployMarines",True));
		AttackStates.Push (FindState("SpawnLoop",True));
		AttackStates.Push (FindState("EndDeploy",True));
		//Ram attack states.
		AttackStates.Push (FindState("Charge",True));
		AttackStates.Push (FindState("ChargeLoop",True));
		AttackStates.Push (FindState("Brake",True)); //Does it count ? I'm going with yes.
	}
	
	Override Void SpawnHeadlights ()
	{
		Headlights.Push(SpawnVehicleHeadlight(Self,(128,28,8),intensity:384));
		Headlights.Push(SpawnVehicleHeadlight(Self,(128,-28,8),intensity:384));
		Headlights.Push(SpawnVehicleHeadlight(Self,(128,28,8),VHSF_BACKLIGHT,(255,0,0),32,(40,80)));
		Headlights.Push(SpawnVehicleHeadlight(Self,(128,-28,8),VHSF_BACKLIGHT,(255,0,0),32,(40,80)));
	}
	
	Override String GetObituary (Actor Victim, Actor Inflictor, Name MOD, Bool PlayerAttack)
	{
		String MeleeObituaries[] = {
		"%o was ran over by a truck.",
		"%o forgot to check both sides of the road before crossing.",
		"%o was visited by truck-kun.",
		"%o is really bad at bullfighting.",
		"A trucks' passion was more than %o's heart could withstand."};
		
		If (Inflictor && Inflictor != Self) //If another actor killed the player on your behalf.
			Return Inflictor.Obituary;
		
		If (MOD == 'Melee')
			Return MeleeObituaries [Random (0,MeleeObituaries.Size() - 1)];
		
		Return Super.GetObituary (Victim, Inflictor, MOD, PlayerAttack);
	}
	
	Bool CanDriveOver (Actor Other)
	{
		Return (Other.bSolid && (Other.Pos.Z + Other.Height - Pos.Z <= MaxStepHeight/4));
	}
	
	//https://www.youtube.com/watch?v=J9FImc2LOr8
	Override Bool Slam (Actor Victim)
	{
		If (!Victim)
			Return True;
		
		If (Victim.bMissile) //Use normal collision behavior for unpushable actors and projectiles.
			Return False;
		
		//Make the truck able to climb over really short actors.
		If (IsInanimateObject (Victim) && CanDriveOver (Victim))
			SetOrigin ((Pos.X,Pos.Y,Victim.Pos.Z+Victim.Height+2),True);
		
		//Allows both friends and enemies to be pushed out of the way, while only damaging enemies.
		If (IsThrustable (Victim))
			FlingActor (Victim,Vel.XY.Length(),True);
		
		If ((IsHostile(Victim) || IsInanimateObject (Victim)))
		{
			Victim.DamageMobj (Self,Self,Random (30,40)*Int(Clamp(Vel.XY.Length(),0.1,INT.MAX)),'Melee',angle:Angle); //Isekai the enemy.
			
			//Black box, no idea how to alter it to decrease/increase how much the truck is slowed down when ramming.
			Double Mul = KAI_Math.LinearMap(Victim.Mass, 2000, 100, 0.1, 0.995);
			Mul = Clamp(Mul, 0.0, 1.0);
			Vel *= Mul;
			
			//Stop ramming if you've hit a powerful enemy,  or one that shouldn't be pushed.
			If (AssessThreatLevel (Victim) >= THREAT_VERYDANGEROUS || !IsThrustable (Victim) && IsIndestructible (Victim) && !CanDriveOver(Victim))
			{
				HitThings.Clear();
				TotalMassHit = 0;
				CancelCharge = True;
				Return False; //Powerful actor has been hit.
			}
			
			//Add the object you've hit to the counter IF IT ISN'T IN ALREADY !
			If (!HasBeenHitBefore(Victim))
			{
				If (Victim.bNoBlood)
					A_StartSound ("Vehicle/ArmyTruck/HitObject",CHAN_BODY,CHANF_OVERLAP|CHANF_NOSTOP,1.0,0.75);
				Else
					A_StartSound ("Vehicle/ArmyTruck/HitCreature",CHAN_BODY,CHANF_OVERLAP|CHANF_NOSTOP,1.0,0.75);
				
				TotalMassHit += Victim.Mass;
				If (Random (0,512) < 2 && !(Victim.Player || Victim Is "PlayerPawn"))
				{
					Victim.Die (Self,Self,0,'Melee'); //Used to call the actors' specials before they get their own harem.
					Spawn (Victim.TeleFogSourceType,Victim.Pos,ALLOW_REPLACE);
					Victim.Destroy();
				}
				Else
					HitThings.Push (Victim);

				Return True; //Continue ramming.
			}
			
			Return True;
		}
		
		Return False;
	}
	
	//https://github.com/ZDoom/gzdoom/blob/18a67cfdb28b8c43898eeb92b6075bfc5ac4e6c1/src/playsim/p_interaction.cpp#L1108
	Override Int DamageMobj (Actor Inflictor, Actor Source, Int Damage, Name MOD, Int Flags, Double Angle)
	{
		If (bSkullFly)
		{
			Vector3 OldVel = Vel;
			Int Dmg = Super.DamageMobj (Inflictor, Source, Damage, MOD, Flags, Angle);
			Vel = OldVel;
			
			Return Dmg;
		}
		
		Return Super.DamageMobj (Inflictor, Source, Damage, MOD, Flags, Angle);
	}
	
	Override Void OnDestroy()
	{
		Super.OnDestroy();
		
		If (WarningZone)
			WarningZone.Destroy();
	}
	
	Override Void Die (Actor Source, Actor Inflictor, Int DmgFlags, Name MeansOfDeath)
	{
		If (WarningZone)
			WarningZone.Destroy();
		
		Super.Die (Source, Inflictor, DmgFlags, MeansOfDeath);
	}
	
	Override Bool CanAttack()
	{
		Return (User_MarineAmount > 0 || User_Ramming);
	}
	
	Override Bool ShouldAttack (Bool NoStateJump)
	{
		//More likely to drop marines or ram when about to die.
		If (Health <= SpawnHealth()/4)
			AggressionMultiplier *= 0.5;
		
		If (User_MarineAmount <= 0) ThreatLevel = THREAT_NONE; //It's defenseless so it's no threat unless it's ramming.
		Else If (User_MarineAmount >= 5) ThreatLevel = THREAT_DANGEROUS; //It's got 5+ soldiers so it's dangerous. Default
		Else ThreatLevel = THREAT_ABOVENORMAL; //It's got less than 5 soldiers so it's merely an above average threat.
		
		If (KAI_CheckMissileRange(Target) && Target != Goal && !(IsPatrolling(Self) && bChaseGoal))
		{
			If (User_MarineAmount > 0 && DeployTimer <= 0)
			{
				If (!NoStateJump) SetStateLabel ("DeployMarines");
				Return True;
			}
			
			//Ramming decision code.
			If (User_Ramming && ChargePathClear())
			{
				//If your health is very low and you have no marines left inside.
				If (Health <= SpawnHealth()/4 && User_MarineAmount <= 0)
				{
					If (Random[pr_cajump](0,255) < 64) //Then be a lot more likely to ram enemies.
					{
						If (!NoStateJump) SetStateLabel ("Charge");
						Return True;
					}
				}
				//If your health isn't critically low but you have no marines inside.
				Else If (!(Health <= SpawnHealth()/4) && User_MarineAmount <= 0)
				{
					If (Random[pr_cajump](0,255) < 24) //Then be a more likely to ram enemies.
					{
						If (!NoStateJump) SetStateLabel ("Charge");
						Return True;
					}
				}
			}
		}
		
		AggressionMultiplier = Default.AggressionMultiplier;
		Return False;
	}
	
	Override Bool StayStillAndShoot(Actor CheckSightFrom) {Return False;} //Do not.
	
	Bool IsThrustable (Actor Other)
	{
		Return (!Other.bDontThrust && !Other.bDontBlast);
	}
	
	Bool ChargePathClear (Bool HostileOnly = False)
	{
		FLineTraceData Result;
		Actor Mobj;
		
		If (!Target) Return False;
		LineTrace (AngleTo (Target),MaxTargetRange,PitchTo (Target),TRF_THRUHITSCAN|TRF_SOLIDACTORS,Height/2,data:Result);
		Mobj = Result.HitActor;
		
		If (!Mobj || Mobj == Self) Return False; //Can't even find the target. Or the raycast hit yourself
		
		If (!(Mobj.Pos.Z + Mobj.Height > Pos.Z && Mobj.Pos.Z + Mobj.Height < Pos.Z + Height)) Return False; //Actor is too high or low from the truck.
		
		If (IsActorHostile (Mobj)) Return True; //Enemy in the way.
		
		If (HostileOnly) Return False;
		
		If (Result.HitLine || !Mobj) Return False; //A line is in the way, or this attempted charge won't even hit any actor.
		
		If (!IsIndestructible (Mobj) && IsInanimateObject (Mobj) && Mobj.Health <= 500 && IsThrustable (Mobj)) Return True; //Calling this means the truck is already aimed at a target, and if only a (Relatively) weak destructible prop is in the way, then charge anyway.
		
		If (IsIndestructible (Mobj) && !IsThrustable (Mobj) && !CanDriveOver(Mobj)) Return False; //Hit an unpushable object, or rather, one that shouldn't be flung around.
		
		Return True;
	}
	
	Bool FlingPathClear (Actor Other)
	{
		FLineTraceData Result;
		
		LineTrace (AngleTo (Other),MaxTargetRange,PitchTo (Other),TRF_THRUHITSCAN|TRF_SOLIDACTORS,Height/2,data:Result);
		
		If (Result.HitActor && Result.HitActor == Other) Return True;
		
		Return False;
	}
	
	//Checks if the specified object is already in the HitThings array, meaning that the truck has already hit it before, this prevents the vehicle from counting multiple hits on the same actor.
	Bool HasBeenHitBefore (Actor Other)
	{
		If (!Other) Return False;
		
		For (Int I = HitThings.Size()-1; 0 <= I; I--)
			If (HitThings[I] == Other)
				Return True; //This actor is already in the list.
		
		Return False;
	}
	
	Int User_MarineAmount; //The amount of marines still in the truck.
	Bool User_Ramming; //Should the truck run shit over ?
	Int User_MarineTID; //The TID to assign to marines spawned by this vehicle, for ACS scripting.
	
	Int MarinesToSpawn; //How many marines the truck should drop this time that it opened up.
	Int DeployTimer; //Adds a delay until the next time the truck is able to drop marines again.
	Int Recursions; //Keeps track of how many times the vehicle tried spawning a marine in an invalid spot, to stop infinite recursions.
	
	//Variables relating to the ramming attack.
	Array <Actor> HitThings; //How many things the truck has hit before stoping. Should probably replace this with a counter that adds the combine mas of everything the truck has hit.
	Actor WarningZone; //Spawns the warning zone when the car is charging, to get marines out of the way.
	Int TotalMassHit; //Adds up the mass of everything the truck has hit, causing it to stop ramming once this value has reached a certain threshold.
	Bool CancelCharge; //Tells the code on the Charge state to cancel the ramming.
	States
	{
		Spawn:
			TRK1 A 4
			{
				A_StopSound (CHAN_MOVING);
				A_StartSound("Vehicle/ArmyTruck/Idle",CHAN_IDLING,CHANF_LOOPING,attenuation:0.6);
				KAI_Look (maxseedist:DEFAULT_SEEDISTANCE,DEFAULT_HEARDISTANCE);
			}
			Loop;
		Idle:
			TRK1 AABBCCDD 2
			{
				A_StopSound (CHAN_IDLING);
				A_StartSound (ActiveSound,CHAN_MOVING,CHANF_LOOPING,attenuation:0.6);
				
				KAI_Wander (48,768,96,detourfactor:0.75,anglelimit:6);
				KAI_Look (maxseedist:DEFAULT_SEEDISTANCE,DEFAULT_HEARDISTANCE);
			}
		See:
			TRK1 AABBCCDD 2
			{
				A_StopSound (CHAN_IDLING);
				A_StartSound (ActiveSound,CHAN_MOVING,CHANF_LOOPING,attenuation:0.6);
				
				KAIMoveParams Params;
				Params.DetourFactor = 0.9;
				Params.Attempts = 32;
				Params.MaxSteps = 56;
				Params.RunRad = 512;
				KAI_LandVehicleChase (flags:LVC_ATTACKWHENSCARED|LVC_MAKEFRIENDSIDLE,turnradius:6,followdist:FollowDist,moveparams:Params);
			}
			Loop;
		//The trucks' marine deploying loop.
		DeployMarines:
			TNT1 A 0 A_JumpIf (User_MarineAmount <= 0,"See"); //No marines to drop.
			TNT1 A 0
			{
				If (Recursions >= MARINE_RECURSIONS)
				{
					DeployTimer = 35;
					Return ResolveState ("See");
				}
				
				If (!ValidPositionAt( (-128,0) ) ) //If they would be stuck by spawning right behind the truck, then cancel the drop.
				{
					Recursions++;
					Return ResolveState ("See");
				}
				
				Return State (Null);
			}
			TRK1 E Random (10,16) A_StartSound ("Vehicle/ArmyTruck/BackOpen",attenuation:0.8);
			TRK1 F 6;
			TRK1 G 4 A_StartSound ("Vehicle/ArmyTruck/BackSlam",attenuation:0.8);
			TRK1 G Random (8,12) {MarinesToSpawn = Random (3,5);}
			SpawnLoop:
				TRK1 G 0 A_JumpIf (User_MarineAmount <= 0,"EndDeploy");
				TRK1 G 0 A_JumpIf (MarinesToSpawn <= 0,"EndDeploy");
				TRK1 G 35 {If (Health <= SpawnHealth()/4) Tics = 35/2;} //Smaller spawn interval when about to die.
				TRK1 G 0
				{
					Actor Marine;
					Marine = SpawnMarine ((-128, FRandom (16,-16),0),spawnrunning:True);
					If (User_MarineTID != 0) Marine.ChangeTID (User_MarineTID);
					Marine.SetOrigin ((Marine.Pos.X,Marine.Pos.Y,Marine.Pos.Z+48),False);
					MVP_NPCDropoffMove ((-128, FRandom (16,-16),0),Marine); //Get the marine out of the way, so they don't get stuck on each other.
					MarinesToSpawn--;
					User_MarineAmount--;
					If (User_MarineAmount < 5)
						ThreatLevel = THREAT_ABOVENORMAL; //If it has few marines left, then it's merely an above normal threat.
					Else
						ThreatLevel = THREAT_DANGEROUS; //Otherwise it stays dangerous like default.
				}
				Loop;
			EndDeploy:
				TRK1 G 12 A_StartSound ("Vehicle/ArmyTruck/BackOpen",attenuation:0.8);
				TRK1 F 6;
				TRK1 E 4 A_StartSound ("Vehicle/ArmyTruck/BackSlam",attenuation:0.8);
				TRK1 E 0
				{
					If (!(Health <= SpawnHealth()/4))
						DeployTimer = Random (2,7)*35;
					Else
						DeployTimer = Random (1,3)*35; //Have a smaller delay if about to die, and you still have troops.
				}
				Goto See;
		Charge:
			TRK1 A 0
			{
				//Go back to See if the path to the target is covered, or there is no target. This is here in case the state is entered using a scripted ACS event.
				If (!ChargePathClear() || !Target)
					Return ResolveState ("See");
				
				bSkullFly = True; //Stupid hack.
				bSlidesOnWalls = True;
				A_FaceTarget ();
				VelFromAngle (14);
				ChaseTimer = 0; //Just in case.
				Int HazLvl = HazardInfo.HAZARD_MEDIUM;
				If (Vel.XY.Length() >= 10.0) //The truck is extra dangerous when moving fast due to doing even more damage.
					HazLvl = HazardInfo.HAZARD_LARGE;
				WarningZone = WarnNPCs (WRN_WARP|WRN_ALLIESTOO,512,towho:Self,threatlevel:HazLvl);
				ThreatLevel = THREAT_VERYDANGEROUS; //Very dangerous when ramming.
				Return State (Null);
			}
		ChargeLoop:
			TRK1 AAABBBCCCDDD 1
			{
				//You no longer have a target to ram, or it has died.
				If (!Target || Target && IsDead (Target))
				{
					ChaseTimer = 0;
					A_ClearTarget();
					LookForPlayers(False); //Look for a new target.
				}
				
				//Look for a new target if the current one has gone out of sight for too long.
				If (Target)
				{
					If (!CheckSight (Target))
						ChaseTimer++;
					Else
						ChaseTimer = 0;
					
					If (ChaseTimer >= 35/3)
					{
						ChaseTimer = 0;
						A_ClearTarget();
						LookForPlayers(False); //Look for a new target.
					}
				}
				
				A_Recoil (-2.25);
				//Speed limit.
				If (Vel.XY.Length() >= 14.0)
					Vel.XY = Vel.XY.Unit() * Clamp (Vel.XY.Length(),0.0,14.0);
				A_FaceTarget (2.4);
				
				//You've hit enough mass worth of objects. Or you have no target even after the search above.
				If (TotalMassHit >= 10000 || !Target || CancelCharge)
				{
					HitThings.Clear();
					TotalMassHit = 0;a_log ("enough smashing");
					bSkullFly = bSlidesOnWalls = CancelCharge = False;
					If (WarningZone)
						WarningZone.Destroy();
					Return ResolveState ("Brake");
				}
				
				If (BlockingLine && !CheckMove (Vec2Angle (Vel.XY.Length(),Angle),PCM_NOACTORS))
				{
					//No idea if this even works as intended, can't even playtest it, since destructible geometry is totally undocumented lol.
					Destructible.DamageLinedef (BlockingLine,Self,Int(Random (30,40)*Clamp(Vel.XY.Length(),0.1,INT.MAX)),'Melee',0,Pos,False);
					HitThings.Clear();
					TotalMassHit = 0;
					bSkullFly = bSlidesOnWalls = CancelCharge = False;
					If (WarningZone)
						WarningZone.Destroy();
					Return ResolveState ("See");
				}
				
				//The truck will hit level geometry instead.
				If (!ChargePathClear (True) && !CheckMove (Vec2Angle (280,Angle),PCM_NOACTORS))
				{
					HitThings.Clear();
					TotalMassHit = 0;
					bSkullFly = bSlidesOnWalls = CancelCharge = False;
					If (WarningZone)
						WarningZone.Destroy();
					Return ResolveState ("Brake");
				}
				
				Return State (Null);
			}
			Loop;
		Brake: //Braking Bad
			TRK1 # 1
			{
				Friction = 1.5;
				A_StartSound ("Vehicle/ArmyTruck/Brake",CHAN_MOVING,CHANF_LOOPING,attenuation:0.7);
				
				If (Pos.Z <= FloorZ) //Only brake (bad) while on the floor.
					Vel.XY *= 0.98;
				
				If (Vel.XY.Length() <= 4.5) //Go back to see once the velocity is low enough again.
				{
					If (User_MarineAmount >= 5)
						ThreatLevel = THREAT_DANGEROUS; //If the truck still has marines, then it goes back to "just" being dangerous.
					Else
						ThreatLevel = THREAT_ABOVENORMAL; //If it has few or no marines left. Then it's just an above normal threat when not charging.
					
					A_StopSound (CHAN_MOVING);
					Friction = Default.Friction;
					Return ResolveState ("See");
				}
				
				A_SpawnItemEx ("MVP_TruckWheelSmoke",-128,20);
				A_SpawnItemEx ("MVP_TruckWheelSmoke",-128,-20);
				
				Return State (Null);
			}
			Loop;
		Death:
			TRK1 H 7 Bright
			{
				A_Explode (384,256,XF_HURTSOURCE|XF_EXPLICITDAMAGETYPE,True,damagetype:'Explosion');
				A_StartSound (DeathSound,CHAN_BODY,attenuation:0.5);
				A_StopSound (CHAN_IDLING);
				A_StopSound (CHAN_MOVING);
				
				A_SpawnItemEx ("MVP_ArmyTruckPipe",72,-16,60,FRandom (6,-6),FRandom (6,-6),FRandom (24,32));
				A_SpawnItemEx ("MVP_ArmyTruckWheel",72,8,60,FRandom (8,-8),FRandom (8,-8),FRandom (24,32));
				A_SpawnItemEx ("MVP_ArmyTruckBackDoor",-136,0,48,FRandom (-16,-32),FRandom (4,-4),FRandom (-2,16));
			}
			TRK1 IJ 7 Bright;
			TRK1 KL 7 Bright;
			TRK1 M -1;
			Stop;
		XDeath:
			TRK1 N 0
			{
				Height = 70;
				
				Actor Boom;
				Boom = Spawn ("MVP_BigExplosion",Pos);
				Boom.MaxTargetRange = 384;
				Boom.MeleeRange = 128;
				Boom.SetDamage(384);
				Boom.A_SetScale (2.0);
				
				A_QuakeEx (1,1,1,35*2,0,1024,flags:QF_3D|QF_SCALEDOWN|QF_GROUNDONLY);
				//Spawn a random amount of flames around the truck wreck.
				SpawnDeathFlames(amount:(10,18));
			}
			TRK1 N -1;
			Stop;
	}
}

Mixin Class MVP_ArmyTruck_Smoke
{
	Override Bool SpawnDamageSmoke()
	{
		If (!Super.SpawnDamageSmoke()) Return False;
		
		Double CardAng = GetNearestCardinalAngle();
		Vector3 SpawnPos = Vec3Angle (-130,CardAng);
		SpawnPos = Level.Vec3Offset (SpawnPos,(FRandom(-16,16),FRandom(-16,16),48));
		Actor Smoke = Spawn ("MVP_DamageSmoke",SpawnPos);
		Smoke.Roll = FRandom(-180,180);
		Smoke.A_SetScale (FRandom(0.7,1.2));
		Smoke.Vel.X = FRandom (1,2) * Cos (CardAng);
		Smoke.Vel.Z = FRandom (1.5,6);
		Return True;
	}
}