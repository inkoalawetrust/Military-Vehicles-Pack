//This is currently a big time placeholder. It just plays the trucks' animations on a loop;
//To do:
/*I should probably make a custom A_Chase() wrapper function, to reduce code duplication and consolidate the code for:
- Vehicles running away from powerful enemies.
- Vehicles running away from ANY enemy that gets too close.
- Vehicles not chasing their target after it goes out of sight for long enough.
*/

Class MVP_ArmyTruck : MVP_BaseVehicle
{
	Default
	{
		//$Title Army Truck
		//$Category Vehicles/Army Truck
		//$Sprite TRK1A1
		Health 700;
		XScale 0.65;
		YScale 0.541666; //0.65 / 1.2
		Height 96;
		Radius 72;
		DeathHeight 88;
		Mass 22000;
		Speed 12;
		FastSpeed 18;
		RipLevelMin 2;
		
		Obituary "%o was ran over by a truck.";
		Tag "Army Truck";
		DamageFactor "Melee", 0.4;
		DamageFactor "Electric", 0.3;
		DamageFactor "ExplosiveImpact", 0.9;
		DamageFactor "Explosion", 0.9;
		DamageFactor "HitScan", 1.0; //The generic damage type of hitscan attacks.
		//Damage factors specific to the Smart Marines.
		DamageFactor "MarineHMG", 0.9;
		DamageFactor "MarineGrenade", 1.5;
		DamageFactor "MarineRifle", 0.75;
		
		+MVP_BaseVehicle.Transport; //Carries soldiers.
	}
	
	Override Void UserVariableDefaults()
	{
		If (User_MarineAmount == 0) User_MarineAmount = 14;
		If (User_RetreatDistance == 0) User_RetreatDistance = 1024;
		Super.UserVariableDefaults();
	}
	
	Override Void Tick()
	{
		Super.Tick ();
		
		If (IsFrozen()) Return;
		
		If (DeployTimer) DeployTimer--;
	}
	
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		
		SpawnArmyTruckHeadlights();
	}
	
	Int User_MarineAmount; //The amount of marines still in the truck.
	
	Actor NearestEnemy; //The enemy closest to the truck, if any.
	Bool AlreadyRetreating; //The truck is already running away from something that doesn't involve the enemy avoiding code, so don't call the enemy avoiding code.
	Int FearTimer; //Makes the truck keep running away from it's target for an additional random amount of time, so the truck doesn't play peekaboo with enemies.
	Int ChaseTimer; //Makes the truck only chase its' target for a certain amount of time after it goes out of sight.
	Int MarinesToSpawn; //How many marines the truck should drop this time that it opened up.
	Int DeployTimer; //Adds a delay until the next time the truck is able to drop marines again.
	States
	{
		Spawn:
			TRK1 A 4
			{
				A_StopSound (CHAN_MOVING);
				A_StartSound("Vehicle/ArmyTruck/Idle",CHAN_IDLING,CHANF_LOOPING,attenuation:0.6);
				A_LookEx (0,0,8192,3072);
			}
			Loop;
		See:
			TRK1 AABBCCDD 2
			{
				A_StopSound (CHAN_IDLING);
				A_StartSound ("Vehicle/ArmyTruck/Moving",CHAN_MOVING,CHANF_LOOPING,attenuation:0.6);
				
				//Defenseless, or the target is powerful.
				If (Target && !CanAttack() || Target && IsPowerful (Target))
					If (IsVisible(Target, True))
					{a_log ("bring my brown pants");
						FearTimer = Random (2,64);
						bFrightened = AlreadyRetreating = True;
					}
					Else
						bFrightened = False;
				Else
					bFrightened = False;
				
				If (FearTimer)
				{
					FearTimer--;
					bFrightened = AlreadyRetreating = True;
				}
				
				FollowPlayerControl(512);
				
				Actor OldTarget;
				NearestEnemy = FindNearestEnemy (!CanAttack() ? User_RetreatDistance : User_RetreatDistance*0.75);
				If (!NearestEnemy || IsPatrolling())
					A_Chase (Null,Null,CHF_DONTIDLE | (((!Target || !User_MarineAmount) && !IsPatrolling()) ? CHF_NORANDOMTURN : 0));
				//Run away from the nearest enemy, unless you were already running away before.
				Else If (NearestEnemy && !AlreadyRetreating)
				{
					OldTarget = Target;
					Target = NearestEnemy;
					bFrightened = True;
					FearTimer = Random (2,48);a_log ("run away");
					A_Chase (Null,Null,CHF_DONTIDLE | (((!Target || !User_MarineAmount) && !IsPatrolling()) ? CHF_NORANDOMTURN : 0));
					Target = OldTarget;
				}
				Else
					A_Chase (Null,Null,CHF_DONTIDLE | (((!Target || !User_MarineAmount) && !IsPatrolling()) ? CHF_NORANDOMTURN : 0));
				
				If (Health <= SpawnHealth()/4)
					bMissileMore = bMissileEvenMore = True;
				
				If (CheckMissileRange() && Target != Goal && !(IsPatrolling() && bChaseGoal))
				{
					If (User_MarineAmount > 0 && DeployTimer <= 0)
						Return ResolveState ("DeployMarines");
				}
				
				//Code that makes the truck eventually stop chasing its' target.
				If (User_ChaseTime > 0)
				{
					If (ChaseTimer >= User_ChaseTime)
					{
						A_ClearTarget();
						ChaseTimer = 0;
					}
					
					If (Target && !IsPatrolling())
					{
						If (!CheckSight (Target,SF_SEEPASTBLOCKEVERYTHING))
							ChaseTimer++;
						//Target is visible again, reset the timer.
						Else
							ChaseTimer = 0;
					}
				}
				
				bFrightened = AlreadyRetreating = bMissileMore = bMissileEvenMore = False;
				OldTarget = NearestEnemy = Null;
				
				Return State (Null);
			}
			Loop;
		//The trucks' marine deploying loop.
		DeployMarines:
			TNT1 A 0 A_JumpIf (User_MarineAmount <= 0,"See"); //No marines to drop.
			TNT1 A 0 //Temporarily make the truck bigger, to see if any of the marines would get stuck anywhere.
			{
				A_SetSize (Radius*1.25);
				
				If (!TestMobjLocation()) //If they would be stuck, cancel the drop.
				{a_log ("spawn check");
					A_SetSize (Default.Radius);
					Return ResolveState ("See");
				}
				
				A_SetSize (Default.Radius);
				
				Return State (Null);
			}
			TRK1 E Random (10,16) A_StartSound ("Vehicle/ArmyTruck/BackOpen",attenuation:0.8);
			TRK1 F 6;
			TRK1 G 4 A_StartSound ("Vehicle/ArmyTruck/BackSlam",attenuation:0.8);
			TRK1 G Random (8,12) {MarinesToSpawn = Random (3,5);}
			SpawnLoop:
				TRK1 G 0 A_JumpIf (User_MarineAmount <= 0,"EndDeploy");
				TRK1 G 0 A_JumpIf (MarinesToSpawn <= 0,"EndDeploy");
				TRK1 G 35 {If (Health <= SpawnHealth()/4) Tics = 35/2;} //Smaller spawn interval when about to die.
				TRK1 G 0
				{
					Actor Marine;
					a_log ("spawning a marine");a_logint (marinestospawn);
					Marine = SpawnMarine ((-128, FRandom (16,-16)));
					Marine.SetOrigin ((Marine.Pos.X,Marine.Pos.Y,Marine.Pos.Z+48),False);
					WarnSpecificMarine (Marine);
					MarinesToSpawn--;
					User_MarineAmount--;
				}
				Loop;
			EndDeploy:
				TRK1 G 12 A_StartSound ("Vehicle/ArmyTruck/BackOpen",attenuation:0.8);
				TRK1 F 6;
				TRK1 E 4 A_StartSound ("Vehicle/ArmyTruck/BackSlam",attenuation:0.8);
				TRK1 E 0
				{
					If (!(Health <= SpawnHealth()/4))
						DeployTimer = Random (2,7)*35;
					Else
						DeployTimer = Random (1,3)*35; //Have a smaller delay if about to die, and you still have troops.
				}
				Goto See;
		Death:
			TRK1 H 7 Bright
			{
				A_Explode (384,256,XF_HURTSOURCE|XF_EXPLICITDAMAGETYPE,True,damagetype:'Explosion');
				A_StartSound ("SFX/Explosion",CHAN_BODY,attenuation:0.5);
				A_StopSound (CHAN_IDLING);
				A_StopSound (CHAN_MOVING);
				
				A_SpawnItemEx ("MVP_ArmyTruckPipe",72,-16,60,FRandom (6,-6),FRandom (6,-6),FRandom (24,32));
				A_SpawnItemEx ("MVP_ArmyTruckWheel",72,8,60,FRandom (8,-8),FRandom (8,-8),FRandom (24,32));
				A_SpawnItemEx ("MVP_ArmyTruckBackDoor",-136,0,48,FRandom (-16,-32),FRandom (4,-4),FRandom (-2,16));
			}
			TRK1 IJ 7 Bright;
			TRK1 KL 7 Bright;
			TRK1 M -1;
			Stop;
		XDeath:
			TRK1 N 0
			{
				Int RandomFlames; RandomFlames = Random (5,12);
				Actor Flame;
				Actor Boom;
				Vector3 SpawnPos;
				
				Height = 70;
				
				Boom = Spawn ("MVP_BigExplosion",Pos);
				Boom.MaxTargetRange = 384;
				Boom.MeleeRange = 128;
				Boom.SetDamage(384);
				//Spawn a random amount of flames around the truck wreck.
				For (Int I = 0; I < RandomFlames; I++)
				{
					SpawnPos = (FRandom (-Radius*1.75,Radius*1.75),FRandom (-Radius,Radius),0);
					SpawnPos.Z = GetZAt (SpawnPos.X,SpawnPos.Y);
					Flame = Spawn ("MVP_Flame",SpawnPos); //So is the flame actor.
					
					If (Flame)
					{
						If (!Level.IsPointInLevel (Flame.Pos))
							Flame.Destroy();
						
						If (Flame)
						{
							Flame.Master = Self;
							MVP_Flame(Flame).Offsets = SpawnPos;
							Flame.ReactionTime *= FRandom (0.8,3.5);
						}
					}
				}
			}
			TRK1 N -1;
			Stop;
	}
}