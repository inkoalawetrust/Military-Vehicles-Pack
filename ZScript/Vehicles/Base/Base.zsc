//FIXME:
/*Try and fix the vehicle turrets to be at the top of their vehicle even at the first tick of their existance.
The first fix I tried was immediately warping the turret to its vehicle. Which somehow turns the turrets into the vehicle they are attached on in the
first tick. Which is literally worse than the turrets spawning on the ground.*/

//IDEA:
//Maybe give the APCs' 2 big turrets 16 rotations instead of 8. Due to the combat traverse code ? The main concern here is file size.
//Remaster the Army Truck and APC sprites one day, adding more detail here and there, and most importantly redoing those shitty fucking death animations.
//Make marines able to get back into the APC and Army Truck from their backs. Not sure how this would even work. Definitely needs a rewrite of the marines.
//Make bullet splashes work on swimmable 3D floors.
//Make a custom MVP_VehicleGroup structure for marines that are supposed to be following their specified vehicle.

Class MVP_BaseVehicle : KAI_BaseVehicle
{
	Default
	{
		//Properties, in essense most of these are just the properties for the army car, which is the weakest vehicle.
		XScale 0.65;
		YScale 0.541666; //0.65 / 1.2
		RipLevelMin 3;
		FriendlySeeBlocks 48;
		Species "Military";
		Tag "Military Vehicle Base (You really shouldn't be seeing this in-game)";
		KAI_Actor.ThreatLevelThreshold THREAT_VERYDANGEROUS;
		MVP_BaseVehicle.SmokeDelay 12;
		KAI_BaseVehicle.SurfaceImpactThreshold 10;
		
		//Damage factors that act as the vehicles "armor".
		DamageFactor 0.9; //Generic damage factor for all damage.
		DamageFactor "Drowning", 0.0;
		DamageFactor "Poison", 0.0;
		DamageFactor "PoisonCloud", 0.0;
		DamageFactor "Melee", 0.2; //May change this to have melee damage do nothing to the vehicles, unless it exceeds a certain ammount.
		DamageFactor "Electric", 0.2;
		DamageFactor "ExplosiveImpact", 0.75;
		DamageFactor "Explosion", 0.75;
		DamageFactor "Explosive", 0.75;
		DamageFactor "Grenade", 0.7;
		DamageFactor "HitScan", 0.8; //The generic damage type of hitscan attacks.
		DamageFactor "Shrapnel", 0.6;
		DamageFactor "Fire", 0.8;
		DamageFactor "Crush", 1.5;
		DamageFactor "Disintegrate", 1.5;
		DamageFactor "Railgun", 2.0;
		DamageFactor "Falling", 1.25;
		
		//Damage factors specific to the Smart Marines.
		DamageFactor "MarineHMG", 0.8;
		DamageFactor "MarineGrenade", 0.7;
		DamageFactor "MarineRifle", 0.7; //Not used anymore by Smart Marines as of the rewrite.
		//Vehicle damage factors
		DamageFactor "Autocannon", 0.8;
		DamageFactor "LargeRifleBullet", 0.9; //Replaces MarineHMG.
		DamageFactor "RifleBullet", 0.8;
		DamageFactor "SmallRifleBullet", 0.6;
		+DoShadowBlock;
	}
	
	Override Void UserVariableDefaults ()
	{
		If (User_RetreatDistance == 0) User_RetreatDistance = 768;
		If (User_ChaseTime == 0) User_ChaseTime = (35/2)*30; //This is 35/2, because it assumes that the default See state on the vehicles has 2 tic long states.
	}
	
	Mixin MVP_DamageSmokeHandling;
}

Class MVP_BaseFlyer : MVP_BaseVehicle
{
	Default
	{
		+NOLIFTDROP;
		+FLOAT;
		+NOGRAVITY;
		+INFLOAT; //HACK: So the flyers don't automatically adjust their height to match the target, because GZDoom cakes that into the PHYSICS CODE FOR SOME REASON.
		+KAI_Actor.IsFlyer;
		+KAI_Actor.MovesWithVelocity;
	}
	
	//Forward: The frame to switch to when the actor is sufficiently propelling towards' its facing angle.
	//Back: Ditto, but when facing too far back.
	//Straight: The fallback frame to use when it's not moving too strongly either way.
	//Threshold: If the horizontal velocity of the actor is below this value, just make it face straight.
	//Diff: Using a dot product of the front of the actor and the actual XY direction. If the difference is at above this threshold, the actor is moving backwards.
	//Offset: And offset for the angle difference calculated. Can be used when visually offseting the actors' angle with SpriteRotation.
	Int LeanFlyerAround (Int Forward, Int Back, Int Straight, Double Threshold = 7, Double Diff = -0.6, Double Offset = 0)
	{
		Double Dir = Vel.XY Dot AngleToVector (Angle+Offset,Speed);
		
		If (Vel.XY.Length() < Threshold || (Abs(Dir)-Abs(Diff) <= Abs(Diff))) //Too slow, or facing more sideways than either the back or front, just face straight up.
			Return Straight;
		
		//The difference between the front and back is large enough that we are clearly going AWAY from where we're facing.
		If (Dir <= Diff)
			Return Back;
		//No it's not, we are moving forwards yippie.
		Else
			Return Forward;
		
		Return Straight; //Fallback
	}
}

Class MVP_BaseTurret : KAI_BaseTurret
{
	Default
	{
		//Copied from MVP_BaseVehicle
		XScale 0.65;
		YScale 0.541666; //0.65 / 1.2
		RipLevelMin 3;
		FriendlySeeBlocks 48;
		Species "Military";
		Tag "Military Vehicle Base (You really shouldn't be seeing this in-game)";
		KAI_Actor.ThreatLevelThreshold THREAT_VERYDANGEROUS;
		
		//Damage factors that act as the vehicles "armor".
		DamageFactor 0.9; //Generic damage factor for all damage.
		DamageFactor "Drowning", 0.0;
		DamageFactor "Poison", 0.0;
		DamageFactor "PoisonCloud", 0.0;
		DamageFactor "Melee", 0.2; //May change this to have melee damage do nothing to the vehicles, unless it exceeds a certain ammount.
		DamageFactor "Electric", 0.2;
		DamageFactor "ExplosiveImpact", 0.75;
		DamageFactor "Explosion", 0.75;
		DamageFactor "Explosive", 0.75;
		DamageFactor "Grenade", 0.7;
		DamageFactor "HitScan", 0.8; //The generic damage type of hitscan attacks.
		DamageFactor "Shrapnel", 0.6;
		DamageFactor "Fire", 0.8;
		DamageFactor "Crush", 1.5;
		DamageFactor "Disintegrate", 1.5;
		DamageFactor "Railgun", 2.0;
		DamageFactor "Falling", 1.25;
		
		//Damage factors specific to the Smart Marines.
		DamageFactor "MarineHMG", 0.8;
		DamageFactor "LargeRifleBullet", 0.8; //Replaces MarineHMG.
		DamageFactor "MarineGrenade", 0.7;
		DamageFactor "MarineRifle", 0.7; //Not used anymore by Smart Marines as of the rewrite.
		//Vehicle damage factors
		DamageFactor "Autocannon", 0.8;
		DamageFactor "RifleBullet", 0.8;
		DamageFactor "SmallRifleBullet", 0.6;
		//=========================
		RipLevelMin 2;
		Mass 500;
		KAI_BaseTurret.TurnAmount 0.15;
		KAI_BaseTurret.TurnSoundRadius 2;
		Tag "Military Vehicle Turret Base (You really shouldn't be seeing this in-game)";
		DamageFactor "MarineGrenade", 0.9;
		DamageFactor "Grenade", 0.9;
		DamageFactor "MarineRifle", 0.75;
		+DoShadowBlock;
	}
	Mixin MVP_DamageSmokeHandling;
	Override Void UserVariableDefaults ()
	{
		User_RetreatDistance = -1; //Turrets can't move or be scared anyway.
		User_ChaseTime = 30*4;
	}
}

Class MVP_BaseProp : KAI_BaseProp
{
	Default
	{
		XScale 0.65;
		YScale 0.541666; //0.65 / 1.2
		Tag "Military Vehicle Prop Base (You really shouldn't be seeing this in-game)";
		MVP_BaseProp.SmokeDelay 12;
		//Damage factors that act as the vehicles "armor".
		DamageFactor 0.9; //Generic damage factor for all damage.
		DamageFactor "Drowning", 0.0;
		DamageFactor "Poison", 0.0;
		DamageFactor "PoisonCloud", 0.0;
		DamageFactor "Melee", 0.2; //May change this to have melee damage do nothing to the vehicles, unless it exceeds a certain ammount.
		DamageFactor "Electric", 0.2;
		DamageFactor "ExplosiveImpact", 0.75;
		DamageFactor "Explosion", 0.75;
		DamageFactor "Explosive", 0.75;
		DamageFactor "Grenade", 0.7;
		DamageFactor "HitScan", 0.8; //The generic damage type of hitscan attacks.
		DamageFactor "Shrapnel", 0.6;
		DamageFactor "Fire", 0.8;
		DamageFactor "Crush", 1.5;
		DamageFactor "Disintegrate", 1.5;
		DamageFactor "Railgun", 2.0;
		DamageFactor "Falling", 1.25;
		//Damage factors specific to the Smart Marines.
		DamageFactor "MarineHMG", 0.8;
		DamageFactor "MarineGrenade", 0.7;
		DamageFactor "MarineRifle", 0.7;
		//Vehicle damage factors
		DamageFactor "Autocannon", 0.8;
		DamageFactor "RifleBullet", 0.8;
	}
	Mixin MVP_DamageSmokeHandling;
}

Class MVP_BaseTurretProp : KAI_BaseTurretProp
{
	Default
	{
		XScale 0.65;
		YScale 0.541666; //0.65 / 1.2
		Tag "Military Vehicle Turret Prop Base (You really shouldn't be seeing this in-game)";
		//Damage factors that act as the vehicles "armor".
		DamageFactor 0.9; //Generic damage factor for all damage.
		DamageFactor "Drowning", 0.0;
		DamageFactor "Poison", 0.0;
		DamageFactor "PoisonCloud", 0.0;
		DamageFactor "Melee", 0.2; //May change this to have melee damage do nothing to the vehicles, unless it exceeds a certain ammount.
		DamageFactor "Electric", 0.2;
		DamageFactor "ExplosiveImpact", 0.75;
		DamageFactor "Explosion", 0.75;
		DamageFactor "Explosive", 0.75;
		DamageFactor "Grenade", 0.7;
		DamageFactor "HitScan", 0.8; //The generic damage type of hitscan attacks.
		DamageFactor "Fire", 0.8;
		DamageFactor "Crush", 1.5;
		DamageFactor "Disintegrate", 1.5;
		DamageFactor "Railgun", 2.0;
		DamageFactor "Falling", 1.25;
		//Damage factors specific to the Smart Marines.
		DamageFactor "MarineHMG", 0.8;
		DamageFactor "MarineGrenade", 0.7;
		DamageFactor "MarineRifle", 0.7;
		//Vehicle damage factors
		DamageFactor "Autocannon", 0.8;
		DamageFactor "RifleBullet", 0.8;
		//=========================
		RipLevelMin 2;
		Mass 500;
		KAI_BaseTurret.TurnAmount 0.15;
		KAI_BaseTurret.TurnSoundRadius 2;
		Tag "Military Vehicle Turret Base (You really shouldn't be seeing this in-game)";
		DamageFactor "MarineGrenade", 0.9;
		DamageFactor "Grenade", 0.9;
		DamageFactor "MarineRifle", 0.75;
	}
	Mixin MVP_DamageSmokeHandling;
}

Class MVP_ShrapnelPuff : KAI_MixinActor
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+ZDOOMTRANS
		+HITTRACER; //Store the actor the puff hit.
		+FORCEDECAL;
		RenderStyle "Translucent";
		Decal "Chip";
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
	}
	States
	{
		Spawn:
			PUFF A 4 Bright;
			PUFF B 4;
		Melee:
			PUFF CD 4;
			Stop;
	}
}

Class MVP_BaseProjectile : KAI_BaseProjectile
{
	Default
	{
		+KAI_BaseProjectile.NoFriendlyFire; //MVP projectiles do not hit allies by default.
	}
	Mixin MVP_UniversalFunctions;
	
	//Fire an omnidirectional blast of shrapnel.
	Void SpawnHitscanShrapnel (Int Amount, Int Damage = 2, Double Range = 512, Class <Actor> Puff = "MVP_ShrapnelPuff")
	{
		For (Int I = Amount; 0 <= I; I--)
			LineAttack (FRandom (0,360),Range*FRandom(0.5,1.5),FRandom (90,-90), Int(Damage*FRandom(0.75,1.25)) ,'Shrapnel',Puff, LAF_TARGETISSOURCE|LAF_OVERRIDEZ,offsetz:Height/2);
	}
	
	//Allows to quickly set up a spawned liquid splash, and then returns a pointer the splash to allow for further modifications, like making it visually larger or calling A_QuakeEx from it.
	Actor SpawnLiquidSplash (Int LiquidType = LIQUID_WATER, Sound SplashSound = "SFX/LiquidExplosion", Double Volume = 1.0, Double Attenuation = 0.5,
	Int ExplosionDamage = 0, Double ExplosionRadius = 0, Double FullDamageRadius = 0, Name DamageType = "", Bool DontHarmSource = False)
	{
		Actor Splash = Spawn ("MVP_LiquidSplash",Pos);
		
		If (Splash)
		{
			//Set the shooter of the projectile for DontHarmSource to work.
			If (bMissile)
				Splash.Target = Target; //Projectiles store their shooter in the target pointer, so transfer the shooter to the splash.
			Else
				Splash.Target = Self; //Otherwise set the shooter to the actor calling the function, if it's not a projectile somehow.
			
			MVP_LiquidSplash(Splash).LiquidType = LiquidType;
			MVP_LiquidSplash(Splash).SplashSound = SplashSound;
			MVP_LiquidSplash(Splash).Volume = Volume;
			MVP_LiquidSplash(Splash).Attenuation = Attenuation;
			MVP_LiquidSplash(Splash).RadiusDamage = ExplosionDamage;
			MVP_LiquidSplash(Splash).MaxTargetRange = ExplosionRadius;
			MVP_LiquidSplash(Splash).MeleeRange = FullDamageRadius;
			MVP_LiquidSplash(Splash).ExplosionDamageType = DamageType;
			MVP_LiquidSplash(Splash).DontHarmSource = DontHarmSource;
			Return Splash;
		}
		
		Return Null;
	}
	
	//Plays a sound when the projectile is a certain distance near the camera.
	Void PlayFlybySound (Sound WhatToPlay, Int Slot = CHAN_BODY, Int Flags = 0, Double Volume = 1.0, Double Attenuation = ATTN_NORM,
	Double Pitch = 1.0, Double StartTime = 0.0, Double Distance = 512)
	{
		If (PlayerInGame[ConsolePlayer])
		{
			Let Cam = Players [ConsolePlayer].Camera;
			If (!Cam)
				Players[ConsolePlayer].Mo;
			
			If (Cam && Distance3DSquared(Cam) <= Distance*Distance)
				A_StartSound (WhatToPlay,Slot,Flags,Volume,Attenuation,Pitch,StartTime);
		}
	}
	
	Override Void TrailSpawn (VisualThinker Trail)
	{
		Super.TrailSpawn(Trail);
		
		If (Trail Is "KAI_Tracer")
			KAI_Tracer(Trail).DestroyIfNoOwner = True; //Make bullet and missile tracers vanish once the projectile vanishes or explodes.
	}
}

//The MVPs' stock bullet tracer.
Class MVP_Tracer : KAI_Tracer
{
	Override Void SetProperties()
	{
		Super.SetProperties();
		DefaultSprite = TexMan.CheckForTexture("MVP1B0",TexMan.Type_Sprite);
	}
}

//Note: This is a pistol that fires a specified line of fire raycast. Used to debug if the LineTracer in question returns BadLOF properly.
Class MVP_LOFDebugGun : Pistol
{
	Default
	{
		Weapon.SlotNumber 1;
		+Weapon.CheatNotWeapon;
	}
	
	//Change the tracer spawned by New() to test different line of fire checks.
	Action Void A_FireDebugTrace ()
	{
		A_StartSound ("Weapon/DebugFire",CHAN_WEAPON);
		Let Check = New ("KAI_ProjectileLOFCheck");
		
		Vector3 Direction = (AngleToVector(Angle, Cos(Pitch)), -Sin(Pitch));
		Vector3 ShotPos =(Pos.X,Pos.Y,Pos.Z+(Height/2));
		
		Double Distance = PLAYERMISSILERANGE; //8192 map units
		Check.Shooter = Self;
		
		Check.ProjInfo = New ('LOFProjInfo'); //Assign struct.
		Check.ProjInfo.Projectile = "MVP_50CalBullet"; //Pass projectile class to struct.
		Check.ProjInfo.InitializeProjectileInfo(); //Let it infer the rest.
		
		Check.Trace (ShotPos,CurSector,Direction,Distance,0);
		
		Vector3 HitPos = Check.Results.HitPos;
		KAI_LOFRaycast.VisualizeTracePath (ShotPos, HitPos, Check.Results.Distance);
		
		Console.Printf ("FirePos %d %d %d, hitpos %d %d %d",shotpos.x,shotpos.y,shotpos.z,hitpos.x,hitpos.y,hitpos.z);
		
		If (Check.BadLOF)
		{
			A_Log ("MVP_LOFDebugGun: The line of fire check returned a bad LOF.");
			Check.Destroy();
			Return;
		}
		
		A_Log ("MVP_LOFDebugGun: The line of fire check returned a good LOF.");
		Check.Destroy();
		Return;
	}
	
	States
	{
		Select:
			TNT1 A 0 A_Overlay (666,"ToolGunLoop");
			TNT1 A 1 A_Raise (100);
			Goto Select+1;
		Fire:
			TNT1 A 4 A_FireDebugTrace();
			TNT1 A 16;
			Goto Ready;
		ToolgunLoop:
			LDBG A 12;
			LDBG BCDE 8;
			Loop;
	}
}

//Generic vehicle hazard zone.
Class MVP_HazardZone : KAI_MixinActor
{
	Default
	{
		Radius 0.1; Height 0;
		MaxTargetRange 256;
		+NotAutoaimed
		+NoBlood;
		+NoDamage;
		+NoGravity;
		+NoTarget;
	}
	
	Int Flags;
	Enum NPCWarnFlags
	{
		WRN_ALLIESTOO		= 1 << 0, //The warning zone should warn marines friendly to the caller as well.
		WRN_WARP			= 1 << 1, //The warning zone should stick to the actor specified by the ToWho parameter.
		WRN_PAINONLY		= 1 << 2, //The warning zone is just warning the marines of an attack that only causes pain (e.g the Pain Ray).
		WRN_VEHICLEDEATH	= 1 << 3, //Despawn the warning zone if the vehicles DeathFlames array is empty.
		WRN_NOFLAMEREMOVE	= 1 << 4, //The warn type is for a vehicle death, but don't remove the zone just because there's no death flames.
		WRN_EXPLOSIVE		= 1 << 5, //This is a hazard zone for an explosive attack.
		WRN_CRUSHING		= 1 << 6, //This is a hazard zone for the ability of a vehicle to crush and push objects as it moves.
		WRN_ANTIAIR			= 1 << 7, //This hazard is particularly dangerous to flying NPCs.
	}
	
	HazardInfo Hazard;
	Int HazardLevel; //How dangerous is the hazard ?
	Vector3 Offset;
	Actor HazardOrigin; //A hardcoded pointer that sets the hazards' origin to this specific actor.
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		Hazard = New ("HazardInfo");
		
		If (Hazard)
		{
			Hazard.Position = Pos; //We are assumed to be at the impact point of the attack.
			//This emits an attack type hazard by default, so the origin is the attacking vehicle, if one is assigned.
			Hazard.Origin = Master; If (!Hazard.Origin) Hazard.Origin = Self; 
			If (HazardOrigin) Hazard.Origin = HazardOrigin; //Nevermind that, the zone has a hardcoded origin to pass.
			Hazard.Range = MaxTargetRange;
			Hazard.Type = HazardInfo.HAZARD_ATTACK;
			Hazard.Level = HazardLevel;
			Hazard.Flags = 0;
			Hazard.CustomTags.Push ("Vehicle");
			If (Flags & WRN_VEHICLEDEATH) //This is emitted to signify a vehicle wreck, not a vehicle attack.
			{
				Hazard.CustomTags.Push ("VehicleDeath"); //Just in case.
				Hazard.Type = HazardInfo.HAZARD_ACTOR;
				Hazard.Position = (Double.NaN, Double.NaN, Double.NaN);
				Hazard.Origin = Self;
			}
			If (Flags & WRN_PAINONLY) Hazard.CustomTags.Push ("PainOnly"); //This is only a pain hazard. Like the Army Car's pain ray.
			If (Flags & WRN_EXPLOSIVE) Hazard.CustomTags.Push ("Explosive");
			If (Flags & WRN_CRUSHING)
			{
				Hazard.CustomTags.Push ("VehicleCrush");
				Hazard.Type = HazardInfo.HAZARD_ACTOR;
				Hazard.Position = (Double.NaN, Double.NaN, Double.NaN);
				Hazard.Origin = Self;
			}
			If (FLags & WRN_ANTIAIR) Hazard.CustomTags.Push ("AntiAir");
		}
	}
	
	Override Void Tick ()
	{
		If (IsFrozen() || bDormant) Return;
		
		If (Hazard) Hazard.Position = Pos;
		
		//Can be used to attach the zone to an actor.
		If (Master)
			SetOrigin (KAI_Math.Vec3OffsetRelative (Master,Offset),True);
		
		If ((Flags & WRN_VEHICLEDEATH) && !(Flags & WRN_NOFLAMEREMOVE) && Master && Master Is "MVP_BaseVehicle") //If you are set to disappear when the vehicle has no death flames left. 
			If (!MVP_BaseVehicle(Master).DeathFlames.Size())
				Destroy();
		
		BlockThingsIterator Finder = BlockThingsIterator.Create (Self,MaxTargetRange);
		
		Actor Mobj;
		
		While (Finder.Next())
		{
			Bool EmitHazard, Skip = False;
			
			Mobj = Finder.Thing;
			
			If (!Hazard || !(Mobj Is "KAI_Actor") || IsInanimateObject (Mobj) || IsDead (Mobj) || Mobj.bDormant) //Skip non-KAI NPCs, props, dead actors, dormant actor.
				Continue;
			
			//Exclude master vehicle.
			KAI_BaseVehicle Turret, TurretSquared;
			If (Master && Master Is "KAI_BaseVehicle" && Mobj == Master)
			{
				Turret = KAI_BaseVehicle(Master).Turret;
				If (Turret) TurretSquared = Turret.Turret;
			}
			If (Mobj == Self || Mobj == Master || Mobj == Turret || Turret && Mobj == TurretSquared)
				Continue;
			
			//Don't warn NPCs on the same side as the warning zone.
			If (!(Flags && WRN_ALLIESTOO))
			{
				If (IsHostile (Mobj) && Distance3DSquared(Mobj) <= MaxTargetRange*MaxTargetRange)
				{
					If (!(Flags & WRN_PAINONLY)/* || (Flags & WRN_PAINONLY) && !MarineIsOnTurret(Mobj)*/)
						EmitHazard = True;
				}
			}
			//Warn all NPCs in the vicinity.
			Else
			{
				If (Distance3DSquared(Mobj) <= MaxTargetRange*MaxTargetRange)
				{
					If (!(Flags & WRN_PAINONLY)/* || (Flags & WRN_PAINONLY) && !MarineIsOnTurret(Mobj)*/)
						EmitHazard = True;
				}
			}
			
			If (!EmitHazard)
				Continue;
			
			//Don't give duplicate hazard entries if the NPC already got this one.
			ForEach (CurHaz : KAI_Actor(Mobj).Hazards)
			{
				If (Hazard.AreHazardsIdentical (Hazard, CurHaz))
					Skip = True;
			}
			
			If (Skip)
				Continue;
			KAI_Actor(Mobj).Hazards.Push(Hazard);
		}
	}
	//DEBUG: Uncomment this to be able to see where the warning zones are at.
	/*States
	{
		Spawn:
			KAIS A 4 Bright;
			Loop;
	}*/
}

/*HACK: This is here to damage marines that exit a destroyed vehicle after 1 tic instead of immediately, because that
otherwise won't work with the smart marines wearing armor. If the marines' armor code is in PostBeginPlay(), he
user_armor variable they have will work. But they will be damaged before they get their armor. If I put that code in
BeginPlay(), they can put on the armor immediately after spawning, but then user_armor doesn't work.*/
Class MVP_DamageOnExit : Inventory
{
	Override Void DoEffect ()
	{
		Super.DoEffect();
		
		If (GetAge() >= 1 && Owner)
		{
			//No inflictor if said inflictor is friendly. Mainly so the friendly fire factor in the marine addon, doesn't affect this logic.
			Actor Sorse;
			If (Target)
				Sorse = !Owner.IsHostile(Target) ? Null : Target;
			Owner.DamageMobj (Sorse,Sorse,Health,DeathType,Threshold);
			GoAwayAndDie();
		}
	}
}