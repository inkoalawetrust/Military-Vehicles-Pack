//Vehicle functions
Extend Class MVP_BaseVehicle
{
	//=====|Status checks|=====\\
	
	Bool IsDead (Actor Other)
	{
		If (!Other) Return False;
		
		Return (Other.Health <= 0);
	}
	
	Bool IsPatrolling ()
	{
		Return (Goal || Target Is "PatrolPoint");
	}
	
	Bool IsInState (StateLabel CheckFor = "Spawn")
	{
		Return (InStateSequence(CurState,ResolveState (CheckFor)));
	}
	
	//Add a function that determines if the vehicles' target is a VERY powerful enemy.
	Bool IsPowerful (Actor Other)
	{
		Name CustomMarine = 'SmartMarine';
		Name CustomTurretMarine = "TurretMarine";
		Name TurretWeapon = 'SmartMarineMGWeapon';
		
		If (!Other)
			Return False;
		
		//Is the other actor a smart marine or player on a turret ?
		If (CustomMarinesAvailable()
		&& (Other Is CustomMarine && MarineIsOnTurret (Other)
		|| Other Is CustomTurretMarine
		|| Other.Player && Other.Player.ReadyWeapon && Other.Player.ReadyWeapon.GetClassName() == TurretWeapon))
			{a_log ("say hello to my little friend");Return True;}
		
		//Does the actor have 2500 health or more, is sufficiently large, or can reflect projectiles ?
		If (Other.SpawnHealth() >= 2500 || (Other.Height >= 80 && Other.Radius >= 72) || Other.bReflective)
			{a_log ("spooky scary demons");Return True;}
		
		Return False;
	}
	
	//=====|Marine related functions|=====\\
	//Can the vehicle spawn Smart Marines ?
	Bool CustomMarinesAvailable()
	{
		Let MarineCheck = SM_MarineChecker (EventHandler.Find("SM_MarineChecker"));
		
		If (!MarineCheck.NoCustomMarines)
			Return True;
		Else
			Return False;
	}
	
	Actor SpawnMarine (Vector2 Position = (0,0), Bool SetMaster = False)
	{
		Name CustomMarine = 'SmartMarine';
		Class<Actor> WhatToSpawn;
		Actor Spawnee;
		Bool b;
		
		If (CustomMarinesAvailable())
			WhatToSpawn = CustomMarine;
		//Smart Marines aren't loaded, so spawn shitty ZDoom marines instead.
		Else
			WhatToSpawn = "MarineChaingun";
		
		//[b,Spawnee] = A_SpawnItemEx (WhatToSpawn,Position.X,Position.Y,GetZAt (Position.X,Position.Y),flags:SXF_NOCHECKPOSITION);
		//Position = Vec2Offset (Position.X * Cos (Angle) + Position.Y * Sin (Angle),Position.X * Sin (Angle) - Position.Y * Cos (Angle));
		Spawnee = Spawn (WhatToSpawn,Vec3Offset (Position.X,Position.Y,GetZAt (Position.X,Position.Y)));
		Spawnee.CopyFriendliness (Self,True);
		Spawnee.bSummonedMonster = True;
		Spawnee.Angle = Self.Angle;
		If (SetMaster)
			Spawnee.Master = Self;
		
		Return Spawnee;
	}
	
	Bool MarineIsOnTurret (Actor Other)
	{
		Let IsOnTurret = ServiceIterator.Find ("SM_SmartMarines").Next();
		
		If (!IsOnTurret)
			Return False;
		
		If (IsOnTurret.GetInt("",ObjectArg:Other))
			Return True;
		
		Return False;
	}
	
	//=====|Vehicle behaviors|=====\\
	//As a friendly vehicle, only follow the player until within a certain distance from them, to prevent the player from being dogpiled by vehicles.
	Void FollowPlayerControl (Double MaxDist = 284)
	{
		If (!PlayerInGame[FriendPlayer])
			Return;
		
		If (bFriendly)
			bDontFollowPlayers = (Distance3DSquared (Players[FriendPlayer].Mo) <= MaxDist*MaxDist);
	}
	
	//Increase an integer value based on the amount of enemies and how powerful they are, to use for AOE attacks.
	Int AttackByQuantity (Double Range = 256, Bool AvoidAllies = False)
	{
		Actor Mobj;
		Int Chance;
		
		BlockThingsIterator FindEnemies = BlockThingsIterator.Create (Self,Range);
		
		While (FindEnemies.Next())
		{
			Mobj = FindEnemies.Thing;
			
			If (IsDead (Mobj) || Mobj == Self) Continue;
			
			If (AvoidAllies && !IsHostile (Mobj) && IsVisible (Mobj,False))
			{
				If (Mobj.bIsMonster) Chance -= 5;
				If (Mobj.Player) Chance -= 25;
				Continue;
			}
			
			If ((Mobj.bIsMonster || Mobj.Player) && Mobj != Target && Mobj.Distance3DSquared (Target) <= Range*Range && IsHostile (Mobj) && IsVisible (Mobj,False))
			{
				If (Mobj.Health >= 10)
					Chance += 5;
				Else
					Chance += 1;
				
				If (IsPowerful (Mobj))
					Chance += 25;
			}
		}
		
		Return Chance;
	}
	
		//=====|Headlight functions|=====\\
		//Turn the vehicles' headlights on.
		Void TurnHeadlightsOn()
		{
			LightLevel = 64; //Light up the vehicle.
			If (Turret) Turret.LightLevel = 64; //And the turret, if any.
			For (Int I = HeadLights.Size()-1; I >= 0; I--)
			{
				If (Headlights[I])
				{
					Headlights[I].Activate(Self);
					Headlights[I].Active = True;
				}
			}
		}
		
		//Turn them off.
		Void TurnHeadlightsOff()
		{
			LightLevel = 0;
			If (Turret) Turret.LightLevel = 0;
			For (Int I = HeadLights.Size()-1; I >= 0; I--)
			{
				If (Headlights[I])
				{
					Headlights[I].Deactivate(Self);
					Headlights[I].Active = False;
				}
			}
		}
		
		//Remove them when the vehicle is killed or removed.
		Void RemoveHeadlights()
		{
			For (Int I = HeadLights.Size()-1; I >= 0; I--)
			{
				If (Headlights[I])
				{
					Headlights[I].Destroy();
					Headlights.Delete(I);
				}
			}
		}
	}