Extend Class MVP_BaseVehicle
{
	Mixin MVP_SharedFunctions;
	Mixin MVP_MarineFunctions;
}

Extend Class MVP_BaseTurret
{
	Mixin MVP_SharedFunctions;
	Mixin MVP_MarineFunctions;
}

Extend Class MVP_BaseProp
{
	Mixin MVP_SharedFunctions;
	Mixin MVP_MarineFunctions;
}

Extend Class MVP_BaseTurretProp
{
	Mixin MVP_SharedFunctions;
	Mixin MVP_MarineFunctions;
}

Mixin Class MVP_UniversalFunctions
{
	Enum LiquidTypes
	{
		LIQUID_NONE = 0,
		LIQUID_WATER = 1,
		LIQUID_NUKAGE = 2,
		LIQUID_BLOOD = 3,
		LIQUID_LAVA = 4,
		LIQUID_SLIME = 5
	};
	
	Int CheckLiquid (TextureID Texture)
	{
		/*===============================================================
		This class stores the names of the different textures used for each type of liquid.
		These lists can be expanded as seen fit for your project, in case it has additional custom water/nukage/blood/lava/slime textures.
		The lists already contain some names of liquid flats that don't exist in the vanilla game, for built-in mod compatibility.
		Such as by having waterfall textures that don't exist like WFALL# and NFALL#.
		===============================================================*/
		Static Const String WaterTextures[] = {"FWATER1", "FWATER2", "FWATER3", "FWATER4", "WFALL1", "WFALL2", "WFALL3", "WFALL4"};
		Static Const String NukageTextures[] = {"NUKAGE1", "NUKAGE2", "NUKAGE3", "NFALL1", "NFALL2", "NFALL3", "NFALL4"};
		Static Const String BloodTextures[] = {"BLOOD1", "BLOOD2", "BLOOD3", "BFALL1", "BFALL2", "BFALL3", "BFALL4"};
		Static Const String LavaTextures[] = {"LAVA1","LAVA2", "LAVA3", "LAVA4", "DBRAIN1", "DBRAIN2", "DBRAIN3", "DBRAIN4", "LFALL1", "LFALL2", "LFALL3", "LFALL4"};
		Static Const String SlimeTextures[] = {"SLIME01","SLIME02", "SLIME03", "SLIME04", "SLIME05","SLIME06", "SLIME07", "SLIME08", "SFALL1", "SFALL2", "SFALL3", "SFALL4"};
		
		For (Int I = 0; I < WaterTextures.Size()-1; I++)
			If (TexMan.CheckForTexture (WaterTextures[I]) == Texture)
				Return LIQUID_WATER;
		For (Int I = 0; I < NukageTextures.Size()-1; I++)
			If (TexMan.CheckForTexture (NukageTextures[I]) == Texture)
				Return LIQUID_NUKAGE;
		For (Int I = 0; I < BloodTextures.Size()-1; I++)
			If (TexMan.CheckForTexture (BloodTextures[I]) == Texture)
				Return LIQUID_BLOOD;
		For (Int I = 0; I < LavaTextures.Size()-1; I++)
			If (TexMan.CheckForTexture (LavaTextures[I]) == Texture)
				Return LIQUID_LAVA;
		For (Int I = 0; I < SlimeTextures.Size()-1; I++)
			If (TexMan.CheckForTexture (SlimeTextures[I]) == Texture)
				Return LIQUID_SLIME;
		
		Return LIQUID_NONE;
	}
}

Mixin Class MVP_DamageSmokeHandling
{
	Int DamageSmokeDelay;
	Property SmokeDelay : DamageSmokeDelay;
	
	//Handle spawning damage smoke when below WoundHealth.
	//Technically this would cause smoke to spawn on most vehicles if you set their health to something like 100, but whatever.
	Virtual Bool SpawnDamageSmoke()
	{
		If (Health > WoundHealth || IsDead(Self)) Return False;
		Return True;
	}
	
	Override Void Tick()
	{
		Super.Tick();
		If (IsFrozen()) Return;
		
		If (DamageSmokeDelay <= 0 || GetAge() % DamageSmokeDelay)
			SpawnDamageSmoke();
	}
}

Mixin Class MVP_SharedFunctions
{
	String User_DefaultOrder; //The default order the vehicle follows upon spawning. It will not move upon spawning by default.
	Bool User_SpawnMoving; //The vehicle will fully obey its' default order upon spawning. i.e wandering immediately on map start
	Double User_RetreatDistance; //The amount of distance the vehicle keeps from enemies.
	Int User_ChaseTime; //How much time the vehicle spends looking for its out-of-sight target before giving up.
	Bool User_NoHeadLights; //Vehicle doesn't use it's headlights, or if its' a prop, the headlights should be off.
	KAI_NPCGroup VehicleGroup; //The vehicles' group, with it as the leader. Relevant for vehicles that drop marines, to make them follow it as the master.
	
	//Internal variables
	Actor DeathWarnZone; //The warning zone attached to the vehicle after it died, if any. Used to warn Smart Marines if the vehicle wreck is burning.
	Actor CorpseTarget; //The corpse that the vehicle is trying to crush.
	
	//=====|Virtual functions|=====\\
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		UpdateUserVariables(); //Pass the vehicles' user variables as properties to the KAI library.
		If (!bFriendly) Species = 'MilitaryHostile';
		
		If ((!User_DefaultOrder || User_DefaultOrder ~== "") && bFriendly)
		{
			//This tries to pick a random visible player for the vehicle to follow, if no friendly players are in sight, the vehicle will wander instead.
			Array <PlayerPawn> VisibleFriends;
			//Find all visible players friendly to you.
			For (Int I = 0; I < MAXPLAYERS; I++)
			{
				If (!PlayerInGame[I]) Continue;
				
				If (CheckSight (Players[I].Mo, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
					VisibleFriends.Push (Players[I].Mo);
			}
			
			//Found at least one visible friendly player to follow.
			If (VisibleFriends.Size())
			{//CONSOLE.PRINTF ("default order is follow");
				SetFriendPlayer (VisibleFriends[Random (0, VisibleFriends.Size() - 1)].Player); //Randomly pick a visible friend to follow.
				SetNPCOrder (ORDER_FOLLOW);
			}
			//No friendplayer, or they are out of sight
			Else If (!FriendPlayer || FriendPlayer && !CheckSight (Players[FriendPlayer].Mo, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
			{//CONSOLE.PRINTF ("default order is wander");
				SetNPCOrder (ORDER_WANDER);
				bDontFollowPlayers = True;
			}
		}
		Else If (User_DefaultOrder ~== "Follow")
		{
			SetNPCOrder (ORDER_FOLLOW);
		}
		Else If (User_DefaultOrder ~== "Wander")
		{
			SetNPCOrder (ORDER_WANDER);
			bDontFollowPlayers = True;
		}
		Else If (User_DefaultOrder ~== "Stay" || User_DefaultOrder ~== "Stand")
		{
			SetNPCOrder (ORDER_STAY);
		}
	}
	
	Override Void Die (Actor Source, Actor Inflictor, Int DmgFlags, Name MeansOfDeath)
	{
		Super.Die (Source, Inflictor, DmgFlags, MeansOfDeath);
		CorpseTarget = Null;
	}
	
	Override Bool IsActorHostile (Actor Other)
	{
		Return (Other && (IsHostile (Other) || IsTargetingAllies (Self, Other)));
	}
	
	//High quality marine code rip.
	Override Void AfterOrderChange (NPCOrders OldOrder, Bool Increment, Actor Commander, Bool IgnoreAllegiance, Bool FromACS)
	{
		//Have m̶a̶r̶i̶n̶e̶ vehicle idle to follow whatever actor, or if they are in the spawn state and set to wander aimlessly.
		If ((User_SpawnMoving || GetAge() >= 1) && (CurrentOrder == ORDER_FOLLOW || CurrentOrder == ORDER_WANDER) && IsInState (Self,"Spawn"))
			SetStateLabel ("Idle");
		
		//Make all actors in the groups you are follow your order, if you are leading.
		ForEach (Group : Groups)
		{
			If (Group.Leader != Self) Continue;
			ForEach (Member : Group.Members)
			{
				If (Member Is "KAI_Actor" && Member != Self)
				{
					If (KAI_DebugPrintMessages) console.printf ("setting order to %d for %p (%s)",currentorder,member,member.getclassname());
					KAI_Actor(Member).SetNPCOrder (CurrentOrder,False,Self);
					If (Member Is "MVP_BaseVehicle")
					{
						If ((KAI_Actor(Member).CurrentOrder == ORDER_FOLLOW || KAI_Actor(Member).CurrentOrder == ORDER_WANDER) && IsInState (Member,"Spawn"))
							Member.SetStateLabel ("Idle");
					}
				}
			}
		}
	}
	
	Override Void OnGroundImpact (Double ImpactVel, Array<Actor> InTheWay)
	{
		Super.OnGroundImpact(ImpactVel,InTheWay);
		
		//Get the total mass of the vehicle plus the next 3 turrets.
		Int TotalMass = Mass;
		If (Turret) TotalMass += Turret.Mass;
		If (Turret && Turret.Turret) TotalMass += Turret.Turret.Mass;
		If (Turret && Turret.Turret && Turret.Turret.Turret) TotalMass += Turret.Turret.Turret.Mass;
		
		//No actors that we were stopped by, so we probably hit level geometry.
		If (!InTheWay.Size())
		{
			Double Force = TotalMass * ImpactVel;
			//Impact sound
			A_StartSound ("SFX/MetalCrash",CHAN_AUTO,0,KAI_Math.LinearMap(Force,2500,2500000,0.075,1.0),0.65);
			//Impact quake
			Double QuakeForce = KAI_Math.LinearMap(Force,50000,2500000,0.1,4.0);
			Double QuakeRange = KAI_Math.LinearMap(Force,50000,2500000,256,1024);
			Double QuakeThrust = KAI_Math.LinearMap(Force,50000,2500000,0.01,0.5);
			A_QuakeEx (QuakeForce/4,QuakeForce/4,QuakeForce/1,50,QuakeRange,QuakeRange,flags:QF_SCALEDOWN|QF_GROUNDONLY|QF_AFFECTACTORS|QF_SHAKEONLY,
			rollintensity:QuakeForce,thrustmultiplier:QuakeThrust);
			//Impact dust
			Actor Duster = Spawn ("MVP_GroundDustSpawner",Pos);
			//Pass parameters to spawner.
			Duster.RadiusDamageFactor = 0;
			Duster.ReactionTime = KAI_Math.LinearMap(Force,100,2500000,1,256);
			Duster.Threshold = Radius*1.55;
		}
		//We hit some actors, crush them and lose some fall speed in exchange (Very realistic and sophisticated physics simulation).
		Else
		{
			Double PostCrushVel = ImpactVel;
			//Squish
			Double VelReduction = KAI_Math.LinearMap (TotalMass,10,25000,10,0.25);
			VelReduction = Clamp (VelReduction,0.25,INT.MAX);
			ForEach (Bug : InTheWay)
			{
				Double Force = TotalMass * PostCrushVel;
				Int ImpactDamage = Force/300;
				Bug.DamageMobj (Self,Self,ImpactDamage,'Crush');
				PostCrushVel -= VelReduction*(Bug.Mass/100); //Reduce fall speed for every bug squashed before applying it back in.
				PostCrushVel = Clamp (PostCrushVel,0,INT.MAX);
				//Play impact sound on each victim based on impact velocity.
				Bug.A_StartSound (Bug.bNoBlood ? "SFX/MetalHit" : "SFX/FleshHit",CHAN_AUTO,CHANF_OVERLAP,KAI_Math.LinearMap(Force,100,2500000,0.075,1.0),0.65);
			}
			
			Vel.Z = -PostCrushVel;
		}
	}
	
	//MVP projectile deflections add slight variation to the parameters. Alongside playing deflection sounds and sparks.
	Override Vector4 OnProjectileDeflect (Actor Projectile, Vector3 ImpactVel, Int &Chance, Double &DamFac, Double &VelFac, Vector4 Funnel)
	{
		Vector4 Ret = Super.OnProjectileDeflect (Projectile, ImpactVel, Chance, DamFac, VelFac, Funnel);
		If (Chance >= DeflectionChance) //Not happening.
			Return Ret;
		
		VelFac *= FRandom (0.8,1.0);
		DamFac *= FRandom (0.8,1.0);
		Ret.XY *= FRandom (0.8,1.2);
		Double VertRNG = FRandom (0.8,1.2);
		Ret.Z *= VertRNG; Ret.W = VertRNG;
		console.printf ("onprojectiledeflect(): deflecting %s from %s| chance threshold%d | %f %f",projectile.getclassname(),getclassname(),chance,damfac,velfac);
		//MVP Specific effects.
		TextureID NullTex;
		For (Int I = 0; I < 24; I++)
		{
			Projectile.A_SpawnParticleEx (
			"yellow",
			NullTex,
			STYLE_Add,
			lifetime:23,
			size:3,
			xoff:FRandom (6,-6),
			yoff:FRandom (6,-6),
			zoff:FRandom (6,-6),
			velx:FRandom (1,-1),
			vely:FRandom (1,-1),
			velz:FRandom (1,3),
			accelz: FRandom (-0.1,-0.25)
			);
		}
		A_StartSound (Projectile.BounceSound,flags:CHANF_OVERLAP,1,0.9); //Ricochet sound, uses the BounceSound property, naturally.
		
		Return Ret;
	}
	
	//=====|Other functions|=====\\
	//Pass the vehicles' user variables as properties.
	Void UpdateUserVariables()
	{
		RetreatRange = User_RetreatDistance;
		SearchTime = User_ChaseTime;
		bNoHeadlights = User_NoHeadlights;
	}
	
	Enum FindCorpseFlags
	{
		FNCF_RAISABLEONLY	= 1 << 0, //Only look for corpses that can be resurrected.
		FNCF_NOSIZECHECK	= 1 << 1, //Ignore the MaxCorpseRadius and MaxCorpseHeight properties.
		FNCF_STOPFORVILES	= 1 << 2, //Abort the check if a friendly Archvile-type NPC is in the search radius. This is handled here to not have to run another iterator just for the Vile search.
	}
	
	//Find the crushable corpse nearest to the vehicle. Used to get vehicles to crush corpses to deny enemy Archviles ando ther necormancer-type enemies.
	Actor FindNearestCorpse (Int Flags = FNCF_RAISABLEONLY|FNCF_STOPFORVILES)
	{
		If (bNoCrushing) Return Null;
		Array <Actor> NearbyCorpses;
		Double NearestDistance = INT.MAX;
		
		BlockThingsIterator CorpseSearch = BlockThingsIterator.Create (Self,1024);
		
		While (CorpseSearch.Next())
		{
			Actor Mobj = CorpseSearch.Thing;
			
			//Skip this actor if it's invalid or yourself.
			If (!Mobj || Mobj == Self) Continue;

			//Don't crush anything if a friendly necromancer is nearby.
			If (Flags & FNCF_STOPFORVILES && !IsDead(Mobj) && IsNecromancer(Mobj) && !IsActorHostile (Mobj) && CheckSight (Mobj)) Return Null;
			
			//Skip this actor if it's already your corpse target, is alive, is already crushed, is not a dead corpse, or cannot be targeted.
			If (Mobj == CorpseTarget || !IsDead (Mobj) || Mobj.bDontGib || Mobj.bDontCorpse || !CanBeTargeted (Self, Mobj)) Continue;
			
			If (!Mobj.bIsMonster && !Mobj.Player) Continue; //Ignore destroyed props.
			
			If (Flags & FNCF_RAISABLEONLY && !Mobj.CanRaise()) Continue; //Cannot even be resurrected.
			
			If (Mobj.Pos.Z > Mobj.FloorZ) Continue; //Corpse is off the ground. Like if it's falling.
			
			If (!(Flags & FNCF_NOSIZECHECK) && Mobj.Radius > MaxCorpseRadius || Mobj.Height > MaxCorpseHeight) Continue; //Actor is too big.
			
			If (!CheckSight (Mobj) || !IsPosReachable (Mobj.Pos)) Continue; //And at last, check if the corpse is even visible.
			
			NearbyCorpses.Push(Mobj); //Add it to the list.
		}
		Return GetClosestActor (NearbyCorpses,Self.Pos,1024);
	}
	
	//Increase an integer value based on the amount of enemies and how powerful they are, to use for AOE attacks.
	//TODO: Probably needs a rewrite in the future, besides being a bit basic. The specific checks for the callers' target are also a little sussy.
	//Range: The range around which to check for enemies.
	//AvoidAllies: Deduct points from the score for any allies in the AOE.
	Int AttackByQuantity (Actor Origin, Double Range = 256, Bool AvoidAllies = False)
	{
		If (!Origin) Return 0;
		Actor Mobj;
		Int Chance;
		Bool IsHostile, IsVisible; //Caching
		
		BlockThingsIterator FindEnemies = BlockThingsIterator.Create (Origin,Range);
		
		While (FindEnemies.Next())
		{
			Mobj = FindEnemies.Thing;
			
			If (!Mobj || IsDead (Mobj) || IsInanimateObject (Mobj) || Mobj == Self || Mobj == Origin) Continue;
			
			IsHostile = IsActorHostile (Mobj); IsVisible = IsVisible (Mobj,False);
			If (AvoidAllies && !IsHostile && IsVisible)
			{
				If (Mobj.bIsMonster) Chance -= 10;
				If (Mobj.Player) Chance -= 40;
				Continue;
			}
			
			If (IsHostile && IsVisible && Mobj.Distance3DSquared (Origin) <= Range*Range)
			{
				Switch (AssessThreatLevel (Mobj))
				{
					Case THREAT_UNSTOPPABLE:
						Chance += 500;
						Break;
					Case THREAT_SUPERDANGER:
						Chance += 200;
						Break;
					Case THREAT_VERYDANGEROUS:
						Chance += 80;
						Break;
					Case THREAT_DANGEROUS:
						Chance += 40;
						Break;
					Case THREAT_ABOVENORMAL:
						Chance += 20;
						Break;
					Case THREAT_NORMAL:
						Chance += 10;
						Break;
					Case THREAT_MILD:
						Chance += 8;
						Break;
					Case THREAT_LOW:
						Chance += 5;
						Break;
					Case THREAT_VERYLOW:
						Chance += 1;
						Break;
					Case THREAT_NONE:
						Break;
					Default:
						Chance += 1;
						Break;
				}
			}
		}
		
		Return Chance;
	}
	
	//Death flame handling.
	Array <Actor> DeathFlames; //Pointers to the flames created by the vehicle being gibbed.
	Enum KAIFlameFlags
	{
		FSP_WARNMARINES = 1 << 0, //If any flames are succesfully created around the vehicle, should a marine warning zone be made ?
		FSP_VEHICLEDEATH = 1 << 1 //Mark the warning zone as needing to vanish once all of the flames have evaporated.
	}
	
	//Creates multiple flames within the bounding box of the vehicle. Used to create flaming wrecks when vehicles are gibbed.
	//Flags: The flags that control the spawning behavior, look at KAIFlameFlags for more info. Default flags are FSP_WARNMARINES and FSP_VEHICLEDEATH.
	//Amount: The random amount of flames that will be created, the X component is the minimum amount of flames, and Y is the maximum.
	//Lifespan: The random lifespan each flame has in tics, the default is 35*30 (30 seconds). The X component is the minimum lifespan a flame can have, and Y is the maximum.
	//RadMul: How much should the random flame position be multiplied by the vehicles' radius.
	Void SpawnDeathFlames (Int Flags = FSP_WARNMARINES|FSP_VEHICLEDEATH, Vector2 Amount = (5,12), Vector2 Lifespan = (24*TICRATE,105*TICRATE), Double RadMul = 1.75)
	{
		Int RandomFlames = Random (Int(Amount.X),Int(Amount.Y));
		Actor Flame;
		Vector3 SpawnPos;
		
		//Spawn a random amount of flames around the APC wreck.
		For (Int I = 0; I < RandomFlames; I++)
		{
			SpawnPos.XY = Vec2Offset(FRandom (-Radius*RadMul,Radius*RadMul),FRandom (-Radius,Radius));
			SpawnPos.Z = GetZAt (SpawnPos.X,SpawnPos.Y,flags:GZF_ABSOLUTEPOS) + FRandom (8,Height);
			
			//If the random position relative to the vehicle is valid.
			If (Level.IsPointInLevel (SpawnPos))
				Flame = Spawn ("MVP_Flame",SpawnPos); //Then spawn the flame.
			
			If (Flame)
			{
				Flame.Master = Self; //So the flame knows what actor to warp to.
				MVP_Flame(Flame).Offsets = Level.Vec3Diff (Pos,SpawnPos);
				Flame.ReactionTime = Int(FRandom (Lifespan.X,LifeSpan.Y));
				DeathFlames.Push (Flame); //Add the valid flame to the list.
			}
		}
		
		//Clean up the null entries in the array.
		For (Int I = DeathFlames.Size()-1; I >= 0; I--)
			If (!DeathFlames[I]) DeathFlames.Delete(I); //Remove null entries.
		
		//Create a warning zone if any flames actually spawned.
		If (Flags & FSP_WARNMARINES && DeathFlames.Size())
			If (Flags & FSP_VEHICLEDEATH)
				DeathWarnZone = WarnNPCs (WRN_WARP|WRN_ALLIESTOO|WRN_VEHICLEDEATH,Radius*1.75+48,towho:Self);
			Else
				DeathWarnZone = WarnNPCs (WRN_WARP|WRN_ALLIESTOO,Radius*1.75+48,towho:Self);
	}
	
	//Throws actors away from the caller, the code is mostly copied from BlastActor.
	Void FlingActor (Actor Victim, Double Speed, Bool Harmless, Bool PushImmovables = False)
	{
		Double Ang = AngleTo(Victim);
		Vector2 Move = AngleToVector(Ang, Speed);
		
		Victim.Vel.XY = Move;
		Victim.Vel.Z = 500. / Victim.Mass;
		
		If (Victim.Player)
		{
			// Players handled automatically
		}
		Else If (!Harmless)
		{
			Victim.bBlasted = True;
		}
		
		If (Victim.bTouchy) // Touchy objects die when blasted
		{
			Victim.bArmed = False; // Disarm
			Victim.DamageMobj(Self, Self, Victim.Health, 'Melee', DMG_FORCED|DMG_EXPLOSION);
		}
	}
	
	//=====|Non-vehicle NPC related functions|=====\\
	//Check if the smart marines are loaded.
	Bool CustomMarinesAvailable()
	{
		Let MarineCheck = MVP_Handler (EventHandler.Find("MVP_Handler"));
		
		If (!MarineCheck.NoCustomMarines)
			Return True;
		Else
			Return False;
	}
	
	//Spawn a smart marine (Cool and smart), or fall back to spawning ZDoom marines (Cringe and dumb) if unavailable.
	//MAYDO: Since the MVP now needs the KAI library anyway. Maybe make a custom fallback marine ?
	Actor SpawnMarine (Vector3 Position = (0,0,0), Bool FollowVehicle = False, Bool SpawnRunning = False)
	{
		Name CustomMarine = 'SM_Marine';
		Name MarineGroup = 'SM_MarineGroup';
		Class<Actor> WhatToSpawn;
		Actor Spawnee;
		
		If (CustomMarinesAvailable())
			WhatToSpawn = CustomMarine;
		//Smart Marines aren't loaded, so spawn shitty ZDoom marines instead.
		Else
			WhatToSpawn = "MarineChaingun";
		
		Spawnee = Spawn (WhatToSpawn,KAI_Math.Vec3OffsetRelative (Self,Position,flags:KAI_Math.V3R_ANGLEONLY),ALLOW_REPLACE);
		If (Target != Goal)
			Spawnee.CopyFriendliness (Self,True);
		Else
			Spawnee.CopyFriendliness (Self,False);
		Spawnee.bSummonedMonster = True; //Mark marines as being spawned from another actor.
		
		Spawnee.Angle = Self.Angle;
		If (FollowVehicle && Spawnee Is CustomMarine)
		{
			KAI_Actor(Spawnee).SetNPCOrder (KAI_Actor.ORDER_FOLLOW,False,Self);
			//Spawnee.Master = Self;
			//Spawnee.bDontFollowPlayers = True;
			//Add dropped marines to the vehicles' group. Create the group if there's not one already.
			If (!VehicleGroup)
			{
				Array<Actor> Members; Members.Push (Spawnee);
				VehicleGroup = KAI_NPCGroup.CreateGroup (String.Format ("%s group",GetTag()),Members,Self,0,MarineGroup);
			}
			Else
				VehicleGroup.AddNPCToGroup (Spawnee);
		}
		
		//At least try to make the default ZDoom marines a bit smarter.
		If (WhatToSpawn != CustomMarine)
		{
			Spawnee.Speed = 16;
			Spawnee.bSeeFriendlyMonsters = True;
			Spawnee.FriendlySeeBlocks = 16;
			Spawnee.bAvoidMelee = Spawnee.bAvoidHazards = True;
		}
		Else
		{
			Name DeployToken = 'SM_VehicleDropToken';
			//Helps when a vehicle drops multiple marines, so they don't get stuck.
			If (SpawnRunning)
				Spawnee.GiveInventoryType (DeployToken);
		}
		
		Return Spawnee;
	}
}

//NOTE: Big mess, these are no longer really marine related functions. At all.
Mixin Class MVP_MarineFunctions
{	
	Enum NPCWarnFlags
	{
		WRN_ALLIESTOO		= 1 << 0, //The warning zone should warn marines friendly to the caller as well.
		WRN_WARP			= 1 << 1, //The warning zone should stick to the actor specified by the ToWho parameter.
		WRN_PAINONLY		= 1 << 2, //The warning zone is just warning the marines of an attack that only causes pain (e.g the Pain Ray).
		WRN_VEHICLEDEATH	= 1 << 3, //Despawn the warning zone if the vehicles DeathFlames array is empty.
		WRN_NOFLAMEREMOVE	= 1 << 4, //The warn type is for a vehicle death, but don't remove the zone just because there's no death flames.
		WRN_EXPLOSIVE		= 1 << 5, //This is a hazard zone for an explosive attack.
		WRN_CRUSHING		= 1 << 6, //This is a hazard zone for the ability of a vehicle to crush and push objects as it moves.
		WRN_ANTIAIR			= 1 << 7, //This hazard is particularly dangerous to flying NPCs.
	}
	
	//Spawns a custom warning zone for KAI NPCs, that alerts them to evade vehicle attacks.
	//Flags: The flags that determine the behavior of the warning zone. Info on the flags is above. Default flag is WRN_WARP.
	//Range: The range of the warning zone (NO WAYU !?1?1?1?!@?@?!/@/3/$3?3??543?), default is 256.
	//ToWho: What actor should the zone be attached to ?
	//Offsets: The offsets which the warning zone uses when warping to the specified actor. Default is no offsets.
	//ThreatLevel: Just how dangerous is the hazard ?
	//Origin: The origin of the hazard zone, used for the standard attack hazard.
	Actor WarnNPCs (Int Flags = WRN_WARP, Double Range = 256, Actor ToWho = Null, Vector3 Offsets = (0,0,0), Int ThreatLevel = HazardInfo.HAZARD_MEDIUM, Actor Origin = Null)
	{
		Vector3 SpawnPos = ToWho ? KAI_Math.Vec3OffsetRelative(ToWho,Offsets) : Self.Pos;
		Let WarnZone = Spawn ("MVP_HazardZone",SpawnPos);
		
		WarnZone.CopyFriendliness (Self,False);
		If (Flags & WRN_WARP) WarnZone.Master = ToWho;
		If (Flags & WRN_ALLIESTOO) MVP_HazardZone(WarnZone).Flags |= WRN_ALLIESTOO;
		If (Flags & WRN_PAINONLY) MVP_HazardZone(WarnZone).Flags |= WRN_PAINONLY; //I had forgot to make the function handle this warning zone flag for two months lmfao.
		If (Flags & WRN_VEHICLEDEATH) MVP_HazardZone(WarnZone).Flags |= WRN_VEHICLEDEATH;
		If (Flags & WRN_NOFLAMEREMOVE) MVP_HazardZone(WarnZone).Flags |= WRN_NOFLAMEREMOVE;
		If (Flags & WRN_EXPLOSIVE) MVP_HazardZone(WarnZone).Flags |= WRN_EXPLOSIVE;
		If (Flags & WRN_CRUSHING) MVP_HazardZone(WarnZone).Flags |= WRN_CRUSHING;
		If (Flags & WRN_ANTIAIR) MVP_HazardZone(WarnZone).Flags |= WRN_ANTIAIR;
		WarnZone.MaxTargetRange = Range;
		MVP_HazardZone(WarnZone).Offset = Offsets;
		MVP_HazardZone(WarnZone).HazardLevel = ThreatLevel;
		MVP_HazardZone(WarnZone).HazardOrigin = Origin;
		
		Return WarnZone; //Return a pointer to the created warning zone.
	}
	
	//Useful to call after a vehicle drops a marine, to get them to run out of the spawn point to not get stuck.
	Bool MVP_NPCDropoffMove (Vector3 Offset, Actor NPC)
	{
		If (!NPC || !(NPC Is "KAI_Actor"))
			Return False;
		
		HazardInfo StuckWarning = New ("HazardInfo");
		
		If (StuckWarning)
		{
			StuckWarning.Position = KAI_Math.Vec3OffsetRelative (Self,Offset,flags:KAI_Math.V3R_ANGLEONLY);
			StuckWarning.Origin = Self;
			StuckWarning.Range = NPC.Radius*2.5; //Get out of own radius.
			StuckWarning.Type = HazardInfo.HAZARD_ATTACK; //Not an attack, but attacks are the hazard type where the NPC is supposed to run away from Position.
			StuckWarning.Level = HazardInfo.HAZARD_MEDIUM;
			StuckWarning.CustomTags.Push ("Vehicle");
			StuckWarning.CustomTags.Push ("StuckRisk"); //DOOR STUCK
		}
		Else
			Return False;
		KAI_Actor(NPC).Hazards.Push (StuckWarning);
		
		Return True;
	}
	
	//HACK: Damage the actor drop with the specified parameters after one tic.
	Bool MVP_NPCDamageAfterExit (Actor Who, Actor Inflictor, Int Damage, Name DamageType, Int DmgFlags = DMG_NO_PAIN|DMG_THRUSTLESS)
	{
		If (!Who)
			Return False;
		
		Let Harm = Who.GiveInventoryType("MVP_DamageOnExit");
		
		If (Harm)
		{console.printf ("passed damage token");
			Harm.Target = Inflictor;
			Harm.Health = Damage;
			Harm.DeathType = DamageType;
			Harm.Threshold = DmgFlags;
			Return True;
		}
		
		Return False;
	}
}

//A generic check used to find where a projectile will roughly land, to place a warning zone for marines there.
//This is here because KAI projectiles usually go through allies.
Class MVP_GenericWarnMarineCheck : KAI_LOFRaycast
{
	Int BlockMode; //Works like the variable in KAI_LOFActorFinder.
	Override ETraceStatus TraceCallback()
	{
		Actor Mobj = Results.HitActor;
		
		//Standard KAI projectiles go through allies.
		If (Mobj && (IsInanimateObject (Mobj) || Shooter && IsHostile (Shooter,Mobj)) && Mobj.bSolid)
			Return Trace_Stop;
		
		//The trace specifically hit a projectile blocking line. e.g a window linedef or a polyobject.
		If (Results.HitLine && Results.HitLine.Flags & Line.ML_BLOCKEVERYTHING || BlockMode != 0 && BlockingLineInTheWay (Results.HitLine,BlockMode))
			Return Trace_Stop;
		
		//Level geometry is in the way.
		If (HitLevelGeometry (Results))
			Return Trace_Stop;
		
		Return Trace_Skip;
	}
}