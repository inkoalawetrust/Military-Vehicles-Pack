//$GZDB_SKIP
//Functions and code exclusive to the turret class.
Extend Class MVP_BaseTurret
{
	//Conditionally change the turrets' sprites based on pitch.
	Int UpdateElevation (Int FaceDown, Int FaceStraight, Int FaceUp, Int FaceUp2)
	{
		If (Pitch >= 6 && Pitch >= 0)
			Return FaceDown;
		Else If (Pitch < 6 && Pitch >= -15)
			Return FaceStraight;
		Else If (Pitch < -14 && Pitch >= -50)
			Return FaceUp;
		Else If (Pitch <= -50)
			Return FaceUp2;
		
		Return FaceStraight;
	}
	
	//Makes the turret rotate back over time to the direction that the vehicle is facing. Instead of snapping back instantly.
	Void RotateToVehicle (Bool NoTargetCheck = False, Bool OnlyRelativeRotation = False)
	{
		If (!Master) Return;
		
		If (IsDead (Self) || OnlyRelativeRotation)
		{
			Angle = Master.Angle+DeathAngleOffset;
			Return;
		}
		
		If ((!Target || NoTargetCheck))
		{
			//If the angle and pitch difference are too small, just start snapping to the vehicles' direction.
			If (!LastEnemyDelay || Abs (Master.Pitch - Pitch) < 0.75)
				Pitch = Master.Pitch;
			Else
				Pitch += (Master.Pitch - Pitch) * 0.15;
			
			If (!LastEnemyDelay || AbsAngle (Master.Angle, Angle) < 0.75)
				Angle = Master.Angle;
			Else
			{
				A_StartSound ("Vehicle/APC/TurretTurn",attenuation:0.8);
				Angle += DeltaAngle (Angle, Master.Angle) * 0.15;
			}
		}
	}
	
	Void UpdateLastEnemyTimer (Int DefaultValue = 50)
	{
		If (!Target && LastEnemyDelay > 0)
			LastEnemyDelay--;
		Else If (Target)
			LastEnemyDelay = DefaultValue;
	}
	
	//Handles making the vehicles lead their shots based on their targets' movement, regardless of whether or not it's a player or monster.
	//Projectile: The projectile to spawn.
	//SpreadHorz/SpreadVert: Maximum and minimum horizontal and vertical spread, stored in Vector2s.
	//MinDist: The minimum distance below which target prediction won't be used. And the projectile will be fired straight at the target instead.
	Void HandleTargetPrediction (Actor Projectile, Vector2 SpreadHorz, Vector2 SpreadVert, Double MinDist)
	{
		Vector3 OldVel;
		If (!Projectile || !Target) Return;
		
		//No movement prediction, so just shoot normally and move on.
		If (bNoTargetPrediction || Distance3DSquared(Target) <= MinDist*MinDist)
		{
			NormalProjectileFire (Projectile,SpreadHorz,SpreadVert);
			Return;
		}
		
		//Target has no velocity for VelIntercept to work with. This is almost always the case for normal NPCs, which move using small teleport steps, instead of actual movement.
		If ((Target.Vel.X == 0 && Target.Vel.Y == 0 && Target.Vel.Z == 0))
		{
			OldVel = Target.Vel;
			
			If (Target.CurState.Tics)
				Target.Vel = Level.Vec3Diff (LastEnemyPosition,CurrentEnemyPosition) / Target.CurState.Tics;
			Else //Fallback to prevent division by zero.
				Target.Vel = Level.Vec3Diff (LastEnemyPosition,CurrentEnemyPosition);
			
			If ((Target.Vel.X == 0 && Target.Vel.Y == 0 && Target.Vel.Z == 0)) //Still no velocity
			{
				NormalProjectileFire (Projectile,SpreadHorz,SpreadVert);
				Target.Vel = OldVel; //Revert velocity.
				Return;
			}
			Projectile.VelIntercept (Target);
			Projectile.Angle += FRandom (SpreadHorz.X,SpreadHorz.Y);
			Projectile.Pitch += FRandom (SpreadVert.X,SpreadVert.Y);
			Projectile.Vel3DFromAngle (Projectile.Speed,Projectile.Angle,Projectile.Pitch);
			Target.Vel = OldVel;
		}
		//Target has velocity, like if it's a player or a custom actor with velocity-based movement.
		Else
		{
			Projectile.VelIntercept (Target);
			Projectile.Angle += FRandom (SpreadHorz.X,SpreadHorz.Y);
			Projectile.Pitch += FRandom (SpreadVert.X,SpreadVert.Y);
			Projectile.Vel3DFromAngle (Projectile.Speed,Projectile.Angle,Projectile.Pitch);
		}
	}
	
	//Adds projectile spread and adjusts the projectiles' velocity accordingly. Basically just normal shooting with no prediction.
	Void NormalProjectileFire (Actor Projectile, Vector2 SpreadHorz, Vector2 SpreadVert)
	{
		Projectile.A_FaceMovementDirection();
		Projectile.Angle += FRandom (SpreadHorz.X,SpreadHorz.Y);
		Projectile.Pitch += FRandom (SpreadVert.X,SpreadVert.Y);
		Projectile.Vel3DFromAngle (Projectile.Speed,Projectile.Angle,Projectile.Pitch);
	}
	
	//The generic line of fire function used by turrets to performan additional checks.
	//HeightOffset is, well, the offset from the callers' Z position at which the cast will be shot.
	//PropHealthThreshold is the maximum amount of health that a destructible blocking decoration can have and still return true.
	//IgnoreActors makes the raycast ignore powerful enough or indestructible props in the way. Nor check for still-solid corpses, e.g vehicle wrecks.
	//IgnoreLinedefs makes the raycast ignore projectile blocking lines.
	Bool TurretLOFCheck (Double HeightOffset = 16, Int PropHealthThreshold = 400, Bool IgnoreActors = False, Bool IgnoreLinedefs = False)
	{
		Let Check = New ("MVP_TurretRaycast");
		
		Vector3 Direction = (AngleToVector(Angle, Cos(Pitch)), -Sin(Pitch)); //Fire the ray at wherever the actor is facing.
		
		Check.Shooter = Self;
		Check.IgnoreActors = IgnoreActors;
		Check.IgnoreLinedefs = IgnoreLinedefs;
		Check.PropHealthThreshold = PropHealthThreshold;
		Check.Trace ((Pos.X,Pos.Y,Pos.Z+HeightOffset),CurSector,Direction,MaxTargetRange,0);
		
		If (Check.BadLOF)
		{
			bDontStayAround = True;
			Check.Destroy();
			Return False;
		}
		
		bDontStayAround = False;
		Check.Destroy();
		Return True;
	}
	
	//This function can be used by turrets to make them able to pick different targets from their master, instead of chasing or firing at the same target.
	//The Avoid parameter specifies the actor to avoid targeting, Origin specifies the actor the search starts around, and CheckRange is the search range.
	/*MinAlternateTargetRange specifies how far the new target must be from the actor that must be avoided. A value of 0 or less makes it just randomly
	pick one of the target candidates. If there is no other target that is further than MinAlternateTargetRange from the actor to avoid, then it picks the
	last target candidate left in the array.*/
	Actor PickDifferentTarget (Actor Avoid, Actor Origin, Double CheckRange, Double MinAlternateTargetRange = -1)
	{
		If (!Avoid || !CheckRange) Return Null;
		
		Array <Actor> TargetList;
		
		BlockThingsIterator EnemyFinder = BlockThingsIterator.Create (Origin,CheckRange);
		
		CheckRange *= CheckRange; //Do the multiplication for Distance3DSquared only once.
		
		While (EnemyFinder.Next())
		{
			Actor Mobj = EnemyFinder.Thing;
			
			If (!Mobj || Mobj == Avoid) Continue; //AVOID THIS TARGET.
			
			If (Mobj.bDormant || !Mobj.bIsMonster) Continue; //Don't attack dormant or non-monster actors.
			
			If (!CanBeTargeted(Mobj)) Continue; //Can't be targeted. (Duh)
			
			If (IsDead (Mobj)) Continue; //Is dead (Duuuuuuuuuuh)
			
			If (Origin.Distance3DSquared(Mobj) > CheckRange) Continue; //Too out of reach.
			
			If (!IsHostile (Mobj)) Continue; //Actor isn't hostile.
			
			If (!CheckSight(Mobj)) Continue; //Actor is not visible.
			
			TargetList.Push(Mobj); //Actor passed the checks, put it on the list of candidates.
		}
		
		//If no target was found at all.
		If (!TargetList.Size()) Return Null;
		
		//The minimum distance the new target must have from the actor to avoid is zero, so just pick a random potential target that was found.
		If (MinAlternateTargetRange <= 0) Return TargetList[Random(0,TargetList.Size()-1)];
		
		For (Int I = 0; I < TargetList.Size(); I++)
		{
			If (I == TargetList.Size()-1) Return TargetList[I]; //No target that were further than the actor to avoid, so return the last candidate left.
			
			If (TargetList[I].Distance3DSquared(Avoid) > MinAlternateTargetRange) Return TargetList[I]; //Candidate is too close to the actor to avoid.
			Else {} //Found a potential target that is far enough away from the actor that must be avoided.
		}
		
		Return Null;
	}
}

//Todo: Fix a big caused by the blocking actor check returning BadLOF even when it hits an enemy actor. Caused by actors that are invulnerable.
Class MVP_TurretRaycast : LineTracer
{
	Bool BadLOF; //If true, there is something standing in the turrets' line of fire.
	Bool IgnoreActors, IgnoreLinedefs; //Tells the raycast what checks to perform.
	Int PropHealthThreshold; //The threshold over which a non-indestructible solid prop is considered too strong for the turret to bother shooting through.
	Actor Shooter; //The actor firing the raycast.
	Override ETraceStatus TraceCallback ()
	{
		Actor Mobj = Results.HitActor;
		
		If (!IgnoreActors && Results.HitType == Trace_HitActor)
		{
			If (Shooter && Mobj == Shooter.Master) Return Trace_Skip; //Ignore the vehicle you are attached to.
			//If you hit an actor that is not a monster or player, and is a really strong or indestructible prop.
			If(((Mobj.bInvulnerable || Mobj.bNoDamage) && !(Mobj.bIsMonster || Mobj.Player) || !Mobj.bIsMonster && !Mobj.Player) && Mobj.bSolid && (Mobj.Health > PropHealthThreshold))
			{
				BadLOF = True;
				Return Trace_Stop;
			}
			//If the collidable corpse of an enemy is in the way (e.g a destroyed vehicle), don't shoot.
			Else If (Shooter && Shooter.IsHostile (Mobj) && Mobj.Health <= 0 && Mobj.bDontCorpse)
			{
				Return Trace_Stop;
			}
			//Alternatively, if you hit a monster or player that is hostile to you, or is just your target.
			Else If (Shooter && (Mobj.bIsMonster || Mobj.Player) && (Shooter.IsHostile (Mobj) || Mobj == Shooter.Target))
				Return Trace_Stop;
		}
		
		If (!IgnoreLinedefs && Results.HitType == Trace_HitWall)
		{
			//If there is a line in the way that is set to block projectiles or everything, then don't try shooting at it pointelessly.
			If (Results.HitLine.Flags & (Line.ML_BLOCKPROJECTILE | Line.ML_BLOCKEVERYTHING))
			{
				BadLOF = True;
				Return Trace_Stop;
			}
			//If it isn't blocking the projectile, then ignore it.
			Else
				Return Trace_Skip;
		}
		
		Return Trace_Skip;
	}
}