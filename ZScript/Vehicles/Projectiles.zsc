//Generic projectiles used by multiple vehicles.

Class MVP_50CalBullet : MVP_BaseProjectile
{
	Default
	{
		Radius 4;
		Height 8;
		Speed 230;
		FastSpeed 250;
		XScale 0.2;
		YScale 0.166667; //0.2 / 1.2
		DamageFunction (Random (25,40));
		ProjectileKickback 32;
		RipperLevel 3;
		Obituary "%o was gunned down by a machine gun";
		Decal "50CalChip";
		DamageType "LargeRifleBullet";
		BounceSound "SFX/BulletRicochet";
		KAI_BaseProjectile.TrailSprite "MVP_Tracer";
		KAI_BaseProjectile.InitialTrailsSkipped 4;
		KAI_BaseProjectile.MaxTrails 128;
		KAI_BaseProjectile.RipDepth 5;
		+Ripper;
		+KAI_BaseProjectile.RipOnce;
	}
	Bool HitLiquid;
	
	Override Int SpecialMissileHit (Actor Victim)
	{
		If (Super.SpecialMissileHit(Victim) == 1) Return 1;
		If (Victim.bSolid && !Victim.bShootable) Return 1; //Don't stop at decorations that normally block projectiles.
		
		//Always bounce off players with god mode. Or player pawns and monsters with Invulnerable or NoDamage.
		If ((HasGodMode(Victim) || IsIndestructible(Victim) && !IsInanimateObject(Victim)) && DeflectProjectile (Victim,0,FRandom(0.4,0.6),FRandom (1.,0.7),(10,-10),(10,-10),attenuation:0.75)) {bRipper = False; Return 1;}
		//Super likely to bounce off tanks.
		Else If (MVP_RifleBullet.DeflectOffTank(Victim) && DeflectProjectile (Victim,225,FRandom(0.6,0.8),FRandom (1.,0.7),(20,-20),(20,-20))) Return 1;
		//Fairly likely to bounce off healthy enough actors that don't bleed (Which should suggest its' something inorganic like a robot or golem or something, where deflection would make sense).
		Else If (Victim.bNoBlood && !IsIndestructible (Victim) && Victim.SpawnHealth() >= 2000 && DeflectProjectile (Victim,192,FRandom(0.5,0.7),FRandom (1.,0.85),(6,-6),(6,-6),attenuation:0.75)) {bRipper = False; Return 1;}
		
		bExtremeDeath = (Victim.SpawnHealth() <= 200); //Obliterate any weak enemy.
		
		//Stop penetrating if the target has a lot of health.
		bRipper = (Victim.SpawnHealth() >= 500);
		Return -1;
	}
	
	Void Do50BMGSplash (Int LiquidType, Bool UpsideDown = False)
	{
		If (LiquidType == LIQUID_NONE) Return;
		HitLiquid = True;
		Actor Splash = SpawnLiquidSplash (LiquidType,volume:0.4,1.0);
		
		Double Size = FRandom (0.3,0.7);
		Splash.Scale.X = Splash.Scale.Y = (UpsideDown ? -Size : Size);
		Splash.bXFlip = Random (False,True);
	}
	
	States
	{
		Spawn:
			BUL1 A 0;
			BUL1 # 1 Light ("50CalTracerLight")
			{
				PlayFlybySound ("SFX/BulletFlyby",flags:CHANF_NOSTOP,0.75,ATTN_STATIC);
				Frame = UpdateProjectileElevation (2,2,0,1,1); //C, C, A, B, B
			}
			Loop;
		Death: //Bullet hit level geometry.
			TNT1 A 1
			{
				A_StopSound (CHAN_BODY);
				//The floor was hit.
				If (Pos.Z <= FloorZ)
					Do50BMGSplash(CheckLiquid(FloorPic));
				//The ceiling was hit.
				Else If (Pos.Z + Height >= CeilingZ)
					Do50BMGSplash(CheckLiquid(CeilingPic),True);
				
				If (HitLiquid) Destroy(); //Splash was spawned, so just delete yourself.
				Else A_StartSound ("Vehicle/APC/MGImpact");
			}
			Stop;
		XDeath: //Bullet hit a bleeding actor.
			TNT1 A 1; //Don't play the impact sound on bleeding actors.
			Stop;
		Crash: //Bullet hit a non bleeding actor.
			TNT1 A 1 A_StartSound ("Vehicle/APC/MGImpact");
			Stop;
	}
}

Class MVP_BulletCasing : Actor
{
	Default
	{
		Radius 4;
		Height 8;
		XScale 0.2;
		YScale 0.166667; //0.2 / 1.2
		+NoBlockmap;
		//+NoInteraction;
	}
	States
	{
		Spawn:
			BUL1 DEFG Random (2,4) A_CheckFloor ("Death");
			Loop;
		//Stay for 4 seconds, then fade over the course of 4 seconds.
		Death:
			BUL1 H 0 A_StartSound ("SFX/CasingImpact",volume:0.75,2.5);
			BUL1 H 140;
			BUL1 H 4 A_FadeOut (0.0142);
			Wait;
	}
}

//A smaller bullet projectile sort of based on the 7.62mm NATO round.
Class MVP_RifleBullet : MVP_BaseProjectile
{
	Default
	{
		Radius 4;
		Height 6;
		Speed 200; //IRL, the M240 has a slightly slower muzzle velocity than the M2 Browning, so the rifle round is slightlky slower too, but not as slow as the autocannon.
		//I mean, autocannon shells are also fired at a higher muzzle velocity than bullets, yet the autocannon projectile is SLOWER instead of faster, but whatever.
		FastSpeed 220;
		DamageFunction (Random (10,16)); //The marines' rifles do 6 to 10 damage, so this is about double that. Why ? I don't fucking know, let's just say the marines use 5.56mm rounds or something.
		XScale 0.1;
		YScale 0.083333; //0.1 / 1.2
		ProjectileKickback 16;
		Decal "BulletChip";
		DamageType "RifleBullet";
		Obituary "%o found out that rifle rounds are more dangerous than in the movies";
		BounceSound "SFX/BulletRicochet";
		KAI_BaseProjectile.TrailSprite "MVP_Tracer";
		KAI_BaseProjectile.InitialTrailsSkipped 2;
		KAI_BaseProjectile.MaxTrails 64;
		KAI_BaseProjectile.TrailLineSpacing 1;
	}
	
	Bool HitLiquid;
	
	Void DoRifleSplash (Int LiquidType, Bool UpsideDown = False)
	{
		If (LiquidType == LIQUID_NONE) Return;
		HitLiquid = True;
		Actor Splash = SpawnLiquidSplash (LiquidType,"SFX/WaterHit",1.0,1.0);
		
		Double Size = FRandom (0.2,0.3);
		Splash.Scale.X = Splash.Scale.Y = (UpsideDown ? -Size : Size);
		Splash.bXFlip = Random (False,True);
	}
	
	Override Void TrailSpawn (VisualThinker Trail)
	{
		Super.TrailSpawn (Trail);
		
		Trail.Scale.X = Trail.Scale.Y = 0.25;
	}
	
	Override Int SpecialMissileHit (Actor Victim)
	{
		If (Super.SpecialMissileHit(Victim) == 1) Return 1;
		
		//Always bounce off players with god mode. Or player pawns and monsters with Invulnerable or NoDamage.
		If ((HasGodMode(Victim) || IsIndestructible(Victim) && !IsInanimateObject(Victim)) && DeflectProjectile (Victim,0,FRandom(0.4,0.6),FRandom (1.,0.7),(10,-10),(10,-10))) Return 1;
		//Be at least somewhat likely to bounce off if hitting an APC.
		Else If ((Victim Is "MVP_APC" || Victim Is "MVP_APCProp") && DeflectProjectile (Victim,128,FRandom(0.4,0.6),FRandom (1.,0.7),(10,-10),(10,-10))) Return 1;
		//Almost always bounce off the main battle tank.
		Else If (DeflectOffTank(Victim) && DeflectProjectile (Victim,225,FRandom(0.5,0.8),FRandom (1.,0.7),(20,-20),(20,-20))) Return 1;
		//Be very likely to bounce off a non-bleeding actor with a lot of health.
		Else If (Victim.bNoBlood && !IsIndestructible (Victim) && Victim.SpawnHealth() >= 2000 && DeflectProjectile (Victim,64,FRandom(0.5,0.7),FRandom (1.,0.8),(6,-6),(6,-6),attenuation:0.75)) Return 1;
		
		
		Return -1;
	}
	
	Static Bool DeflectOffTank (Actor Other) //Static so the 50. cal can call it too.
	{
		//Bounce off MBT turrets.
		If (Other Is "MVP_MBTTurret" || Other Is "MVP_MBTTurretProp"
		/*|| Other Is "MVP_MBTMissileTurret"*/ || Other Is "MVP_MBTMissileTurretProp"
		|| Other Is "MVP_BMPTTurret" || Other Is "MVP_MBTTerminatorTurretProp"
		|| Other Is "MVP_SPAAGTurret" || Other Is "MVP_MBTSPAAGTurretProp")
			Return True;
		//Deflect off the tank hulls too of course.
		Else If (Other Is "MVP_MBT" || Other Is "MVP_MBTProp")
			Return True;
		Return False;
	}
	
	//Mom, can we have MVP_50CalBullet ?
	//No, we have MVP_50CalBullet at home.
	//The MVP_50CalBullet at home:
	States
	{
		Spawn:
			BUL1 A 0;
			BUL1 # 1 Light ("RifleTracerLight")
			{
				PlayFlybySound ("SFX/BulletFlyby",flags:CHANF_NOSTOP,0.6,ATTN_STATIC,distance:384);
				Frame = UpdateProjectileElevation (2,2,0,1,1); //C, C, A, B, B
			}
			Loop;
		Death: //Bullet hit level geometry.
			TNT1 A 1
			{
				//The floor was hit.
				If (Pos.Z <= FloorZ)
					DoRifleSplash(CheckLiquid(FloorPic));
				//The ceiling was hit.
				Else If (Pos.Z + Height >= CeilingZ)
					DoRifleSplash(CheckLiquid(CeilingPic),True);
				
				If (HitLiquid) Destroy(); //Splash was spawned, so just delete yourself.
				Else A_StartSound ("Vehicle/APC/SmallMGImpact");
			}
			Stop;
		XDeath: //Bullet hit a bleeding actor.
			TNT1 A 1; //Don't play the impact sound on bleeding actors.
			Stop;
		Crash: //Bullet hit a non bleeding actor.
			TNT1 A 1 A_StartSound ("Vehicle/APC/SmallMGImpact");
			Stop;
	}
}

Class MVP_AutocannonShell : MVP_BaseProjectile
{
	Default
	{
		Radius 12;
		Height 16;
		Speed 180;
		FastSpeed 200;
		XScale 0.5;
		YScale 0.416666; //0.5 / 1.2
		DamageFunction (Random (60,80));
		ProjectileKickback 128;
		Obituary "%o took a 30mm round to the face";
		Decal "30mmScorch";
		DamageType "Autocannon";
		KAI_BaseProjectile.TrailSprite "MVP_AutocannonTrail";
		KAI_BaseProjectile.TrailDelay 1;
		KAI_BaseProjectile.InitialTrailsSkipped 16;
		KAI_BaseProjectile.TrailFadeAndScaleStart 64;
		KAI_BaseProjectile.TrailLineSpacing 4;
		KAI_BaseProjectile.MaxTrails 128;
		KAI_BaseProjectile.ScaleAmountX -0.05;
		KAI_BaseProjectile.ScaleAmountY -0.05;
		KAI_BaseProjectile.FadeAmount -0.05;
	}
	
	Override Void Tick()
	{
		Super.Tick();
		If (IsFrozen()) Return;
		If (bMissile) PlayFlybySound ("SFX/BulletFlyby",CHAN_VOICE,CHANF_NOSTOP,0.90,2.5,distance:400);
		
		//If you are an airburst shell and have a specific target.
		If (IsAirburst && Tracer && bMissile) //bMissile is removed when projectiles explode. Making this check not run on exploded shells.
		{
			//And are within blast range of the tracer.
			If (!IsDead(Tracer) && Distance3DSquared (Tracer) <= 176*176)
			{
				FLineTraceData TracerCheck;
				
				LineTrace (Angle,192,Pitch,TRF_THRUHITSCAN|TRF_SOLIDACTORS|TRF_BLOCKSELF,data:TracerCheck);
				
				//If you aren't going to directly impact the tracer.
				If (TracerCheck.HitActor != Tracer)
					SmokeCounter++; //Give it another chance in the next tick.
				Else
					SmokeCounter = 0;
				
				//If you still haven't lined up to hit the tracer. Then airburst.
				If (SmokeCounter > 1)
				{
					AirBursted = True;
					ExplodeMissile();
				}
			}
		}
	}
	
	Override Int SpecialMissileHit (Actor Victim)
	{
		If (Super.SpecialMissileHit(Victim) == 1) Return 1;
		
		If (Victim.SpawnHealth() <= 400) bExtremeDeath = True; //Always gib weak enough enemies.
		Else bExtremeDeath = False;
		
		Return -1;
	}
	
	Void DoAutocannonSplash (Int LiquidType, Bool UpsideDown = False)
	{
		If (LiquidType == LIQUID_NONE) Return;
		HitLiquid = True;
		Actor Splash = SpawnLiquidSplash (LiquidType,explosiondamage:96,48,0,'Explosive', True);
		
		Double Size = FRandom (1.8,2.2);
		Splash.Scale.X = Splash.Scale.Y = (UpsideDown ? -Size : Size);
		Splash.bXFlip = Random (False,True);
	}
	
	Bool HitLiquid; //Removes the autocannon shell if it hit a liquid texture.
	Bool IsAirburst; //Should the shell prematurely explode if it's within 150 map units of its' tracer ?
	Bool Airbursted; //Did the shell explode in an airburst ? Ensures that airbursted shells ALWAYS go to the AirBlast state.
	DynamicLight Light;
	
	States
	{
		Spawn:
			30MS A 0;
			30MS # 4 Light ("AutocannonTracer")
			{
				A_FaceMovementDirection ();
				Frame = UpdateProjectileElevation (2,2,0,1,1); //C, C, A, B, B
			}
			Wait;
		Death: //Shell hit level geometry.
			TNT1 A 0
			{
				A_StopSound (CHAN_VOICE);
				If (Airbursted) //The shell detonated mid air to hit a target that it missed.
				{
					SpawnHitscanShrapnel(128);
					A_SetScale (1.5,1.5);
					A_SetRenderStyle (1.0,Style_Add);
					Return ResolveState ("AirBlast");
				}
				
				//The floor was hit.
				If (Pos.Z <= FloorZ)
					DoAutocannonSplash(CheckLiquid(FloorPic));
				//The ceiling was hit.
				Else If (Pos.Z + Height >= CeilingZ)
					DoAutocannonSplash(CheckLiquid(CeilingPic),True);
				
				If (HitLiquid) Destroy(); //Splash was spawned, so just delete yourself.
				
				Return State (Null);
			}
			TNT1 A 0
			{
				A_SetScale (1.5,1.5);
				A_SetRenderStyle (1.0,Style_Add);
				If (Pos.Z + Height >= CeilingZ) Scale.Y = -1.5; //If a ceiling was hit, invert the explosion.
				Else If (Pos.Z >= FloorZ+24) Return ResolveState ("AirBlast"); //If the explosion happened above 24 map units from the ground, trigger the air explosion.
				//A_AttachLight ("ExplosionLight",DynamicLight.PulseLight,"FFE2B3",512,0,DYNAMICLIGHT.LF_ATTENUATE,(0,0,1),param:1.714285714285714*3.4); //Only for ground explosions !
				//SetOrigin ((Pos.X,Pos.Z,FloorZ),False); //Otherwise stick to the ground to explode if you didn't hit level geometry too far above the ground.
				Return State (Null);
			}
			GXPL A 2 Bright {If (Light) Light.Args[3]-= 8.53;}
			GXPL B 4 Bright
			{
				Light = DynamicLight(Spawn ("PointLight",Vec3Offset (0,0,8)));
				If (Light)
				{
					Light.Args[3] = 128; //Intensity
					Light.Args[0] = 255; Light.Args[1] = 225; Light.Args[2] = 179; //RGB
				}
				A_StartSound ("Vehicle/APC/AutocannonHit",attenuation:0.3);
				MakeAlliesImmuneToExplosion (Target, 128);
				A_Explode (Int(96*RadiusDamageFactor),128,XF_EXPLICITDAMAGETYPE,True,32,damagetype:'Explosive');
				RemoveAllyExplosionImmunity();
			}
			GXPL CDEFGHIJKLMNO 4 Bright {If (Light) Light.Args[3]-= 9.84;}
			TNT1 A 0 {If (Light) Light.Destroy();}
			Stop;
		XDeath: //Shell hit a bleeding actor.
			Goto AirBlast;
		Crash: //Shell hit a non bleeding actor.
			Goto AirBlast;
		AirBlast:
			TNT1 A 0 //Stop moving in the air, and add some random rotation for variety.
			{
				Light = DynamicLight(Spawn ("PointLight",Vec3Offset (0,0,8)));
				If (Light)
				{
					Light.Args[3] = 128; //Intensity
					Light.Args[0] = 255; Light.Args[1] = 253; Light.Args[2] = 117; //RGB
				}
				A_StartSound ("Vehicle/APC/AutocannonHit",attenuation:0.15); //Air explosions makes sound that travels further.
				A_Stop();
				A_SetRenderStyle (1.0,Style_Add);
				A_SetScale (1.5,1.5);
				Gravity = 0;
				bRollSprite = True;
				Roll = FRandom (0,180);
			}
			GAXP A 4 Bright {If (Light) Light.Args[3]-= 32;}
			GAXP B 4 Bright
			{
				If (Light) Light.Args[3]-= 32;
				MakeAlliesImmuneToExplosion (Target, 128);
				A_Explode (Int(96*RadiusDamageFactor),192,XF_EXPLICITDAMAGETYPE,True,48,damagetype:'Explosive');
				RemoveAllyExplosionImmunity();
			}
			GAXP C 4 {If (Light) Light.Args[3]-= 32;}
			GAXP C 0 {If (Light) Light.Destroy();}
			GAXP DEFGHIJ 4 Bright;
			Stop;
	}
}

Class MVP_AutocannonTrail : MVP_Tracer
{
	Override Void SetProperties()
	{
		Super.SetProperties();
		DefaultScale = (1.1,1.1);
	}
}

Class MVP_AutocannonCasing : Actor
{
	Default
	{
		Radius 12;
		Height 16;
		Speed 180;
		FastSpeed 200;
		XScale 0.25;
		YScale 0.208333; //0.25 / 1.2
		+NoBlockmap;
		//+NoInteraction;
	}
	States
	{
		Spawn:
			30MS DEFG Random (2,4) A_CheckFloor ("Death");
			Loop;
		//Stay for 5 seconds, then fade over the course of 4 seconds.
		Death:
			30MS H 0 A_StartSound ("SFX/CasingImpact",attenuation:2.5);
			30MS H 175;
			30MS H 4 A_FadeOut (0.0142);
			Wait;
	}
}