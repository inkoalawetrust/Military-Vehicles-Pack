Class MVP_MBTProp : MVP_BaseProp
{
	Default
	{
		//$Title Main Battle Tank (Prop)
		//$Category Vehicles/Tanks
		//$Sprite MMBT[1
		Health 6000;
		WoundHealth 1500;
		GibHealth 2000;
		XScale 1;
		YScale 0.833333; //1 / 1.2
		Radius 96;
		Height 61;
		DeathHeight 61;
		Mass 30000;
		RipLevelMin 16;
		Tag "M6V3-EX Main Battle Tank (Prop)";
		Obituary "%o got blown up along with a tank";
		//Armor, yes, good luck, lmao.
		DamageFactor 0.6; //Generic damage factor.
		DamageFactor "ExplosiveImpact", 0.5;
		DamageFactor "Explosion", 0.5;
		DamageFactor "Explosive", 0.5;
		DamageFactor "TankShell", 0.5;
		DamageFactor "Shell", 0.7;
		DamageFactor "APShell", 1.0; //Super susceptible to APFSDS.
		DamageFactor "Grenade", 0.4;
		DamageFactor "HitScan", 0.55; //The generic damage type of hitscan attacks.
		DamageFactor "Shrapnel", 0.2;
		DamageFactor "Fire", 0.3;
		DamageFactor "Plasma", 0.5;
		//Damage factors specific to the Smart Marines.
		DamageFactor "MarineHMG", 0.2;
		DamageFactor "MarineGrenade", 0.5;
		DamageFactor "MarineRifle", 0.55;
		//Vehicle damage factors
		DamageFactor "Autocannon", 0.25;
		DamageFactor "RifleBullet", 0.1;
		DamageFactor "Missile", 0.7;
		DamageFactor "AntiAir", 0.3;
		+DontSquash;
		+DontBlast;
	}
	
	Override Void UserVariableDefaults()
	{
		Super.UserVariableDefaults();
		
		If (!User_Turret || User_Turret ~== " " || User_Turret ~== "Standard" || User_Turret ~== "MBT") //The MBT turret is the default.
			VehicleTurret = "MVP_MBTTurretProp";
		Else If (User_Turret ~== "Missile" || User_Turret ~== "Artillery" || User_Turret ~== "TOS-1" || User_Turret ~== "Rocket")
		{
			VehicleTurret = "MVP_MBTMissileTurretProp";
			SetTag ("M6-MLRS Artillery System (Prop)");
			Health = StartHealth = 2000;
		}
		Else If (User_Turret ~== "Terminator" || User_Turret ~== "BMPT")
		{
			VehicleTurret = "MVP_MBTTerminatorTurretProp";
			SetTag ("M6 Fire Support Vehicle (Prop)");
			Health = StartHealth = 3000;
		}
		Else If (User_Turret ~== "SPAAG" || User_Turret ~== "AA" || User_Turret ~== "Anti-Air" || User_Turret ~== "Gepard")
		{
			VehicleTurret = "MVP_MBTSPAAGTurretProp";
			SetTag ("M6-SPAAG (Prop)");
			Health = StartHealth = 2000;
			Mass = 25000;
			RipLevelMin = 8;
		}
		Else
			VehicleTurret = "MVP_MBTTurretProp"; //Fallback
	}
	
	Override Void SpawnHeadlights ()
	{
		Headlights.Push (SpawnVehicleHeadlight (Self,(64,48,32),VHSF_SPRITEROT|VHSF_CARDINALS|VHSF_16ANGLES,lightcolor:(255,195,165),512,spotlightangles:(25,50)));
		Headlights.Push (SpawnVehicleHeadlight (Self,(64,-48,32),VHSF_SPRITEROT|VHSF_CARDINALS|VHSF_16ANGLES,lightcolor:(255,195,165),512,spotlightangles:(25,50)));
		Headlights.Push (SpawnVehicleHeadlight (Self,(128,56,32),VHSF_SPRITEROT|VHSF_BACKLIGHT|VHSF_CARDINALS|VHSF_16ANGLES,lightcolor:(255,150,0),64,spotlightangles:(45,90)));
		Headlights.Push (SpawnVehicleHeadlight (Self,(128,-56,32),VHSF_SPRITEROT|VHSF_BACKLIGHT|VHSF_CARDINALS|VHSF_16ANGLES,lightcolor:(255,150,0),64,spotlightangles:(45,90)));
	}
	
	Override Void Die (Actor Source, Actor Inflictor, Int DmgFlags, Name MeansOfDeath)
	{
		If (DeathLight) DeathLight.Destroy();
		Turret.TurretOffsets.Z -= 1;
		Super.Die (Source, Inflictor, DmgFlags, MeansOfDeath);
	}
	
	Override Void OnDestroy()
	{
		Super.OnDestroy();
		If (DeathLight) DeathLight.Destroy();
	}
	
	Override Void PostBeginPlay ()
	{
		TurretOffsets = (0.1,0,-0.2);
		Super.PostBeginPlay();
		IdleSound = "Vehicle/Tank/Idle";
		//Decide movement sound for this tank instance.
		If (Random (False,True) == True) ActiveSound = "Vehicle/Tank/AltMove";
		
		/*I just overheard a secure access transmission...soldiers have arrived and they're coming to rescue us.
		Of course, I have my doubts that we'll live long enough to greet them.*/
		If (Random(0,255) < 16) //Since the tank prop is always stationary (Duh), it has the same original sound chance as a moving NPC tank.
		{
			IdleSound = "Vehicle/Tank/IdleOriginal";
			ActiveSound = "Vehicle/Tank/MoveOriginal";
			Turret.TurnSound = "Vehicle/Tank/TurretTurnOriginal";
			Turret.bTurnSoundNoStop = False;
		}
	}
	
	Override Void SpawnVehicleTurret ()
	{
		If (User_TurretAngle == -1) User_TurretAngle = Random (180,-180); //Randomize angle.
		If (VehicleTurret == "MVP_MBTTurretProp")
		{
			If (User_RWSAngle == -1) User_RWSAngle = Random (180,-180);
			If (User_RWSPitch == -1) User_RWSPitch = Random (45,-90);
			
			SpawnTurret (VehicleTurret);
			If (User_RWS ~== "MG" || User_RWS ~== "MachineGun" || User_RWS ~== "Machine Gun")
				Turret.VehicleTurret = "MVP_MBTRWSProp";
			Else If (User_RWS ~== "Minigun" || User_RWS ~== "Gatling")
				Turret.VehicleTurret = "MVP_MBTRWSMinigunProp";
			Else If (User_RWS ~== "Random")
				Turret.VehicleTurret = Random (True,False) ? "MVP_MBTRWSProp" : "MVP_MBTRWSMinigunProp";
			
			Turret.TurretRotationOffset = User_TurretAngle;
			Turret.Angle = User_TurretAngle;
			Turret.Pitch = (User_TurretPitch != -1) ? Pitch+User_TurretPitch : Pitch+Random (10,-20);
			MVP_MBTTurretProp(Turret).MetalCoffin = User_T72Mode;
			MVP_MBTTurretProp(Turret).RWSAngle = User_RWSAngle; //Pass angle and pitch to the turret, to rotate the RWS on its' own.
			MVP_MBTTurretProp(Turret).RWSPitch = User_RWSPitch;
			Return;
		}
		Else If (VehicleTurret == "MVP_MBTMissileTurretProp" || VehicleTurret == "MVP_MBTSPAAGTurretProp")
			HasAltHull = True;
		
		SpawnTurret (VehicleTurret);
		Turret.TurretRotationOffset = User_TurretAngle;
		Turret.Angle = User_TurretAngle;
		Turret.Pitch = (User_TurretPitch != -1) ? Pitch+User_TurretPitch : Pitch+Random (45,-90);
		
		If (User_Lowered && VehicleTurret == "MVP_MBTSPAAGTurretProp")
			MVP_MBTSPAAGTurretProp(Turret).Lowered = True;
	}
	
	String User_Turret; //What turret should the tank have ? Can have the normal MBT turret, the SPAAG turret, the Terminator turret, or the missile turret.
	String User_RWS; //What remote weapon station should the MBT turret use.
	Double User_TurretAngle, User_TurretPitch; //Main turret direction offset.
	Double User_RWSAngle, User_RWSPitch; //RWS direction offset.
	Bool User_T72Mode;
	
	Bool User_Lowered; //Used by the SPAAG variant. Spawns the anti air turret with its' radar lowered.
	
	Mixin MVP_MBT_SmokeHandling;
	Bool HasAltHull; //Skirtless hull.
	DynamicLight DeathLight;
	Sound IdleSound;
	
	States
	{
		Sprites:
			AMBT ABCDEF 0;
		Spawn:
			MMBT A 0 NoDelay {Sprite = !HasAltHull ? GetSpriteIndex ("MMBT") : GetSpriteIndex ("AMBT");}
			#### A 1
			{
				If (User_IdleSound)
					A_StartSound(IdleSound,CHAN_IDLING,CHANF_LOOPING,attenuation:0.5);
				Else
					A_StopSound (CHAN_IDLING);
			}
			Loop;
		Death:
			MBTD A 1
			{
				Vector3 Back = Vec3Angle (96,GetNearestCardinalAngle(True));
				DamageSmokeDelay = 0;
				A_StartSound ("SFX/Fire",CHAN_VOICE,CHANF_LOOPING,0.7,0.8);
				Frame = !HasAltHull ? 0 : 1; //Normal = A, Alt = B
				
				//General explosion
				Actor Boom = Spawn ("MVP_Explosion",Pos.PlusZ(Height/2));
				Boom.Scale *= 2.5;
				Boom.SetDamage (300);
				Boom.MaxTargetRange = 384;
				Boom.MeleeRange = 96;
				Boom.bNoGravity = True;
				Boom.bGetOwner = True; //So the dead tank is considered the source.
				Boom.Target = Self;
				
				//Spawn dust around tank.
				Actor Dusty = Spawn ("MVP_GroundDustSpawner",Pos.PlusZ(Height/2));
				//Dusty.RadiusDamageFactor = 0;
				Dusty.ReactionTime = 128;
				Dusty.Threshold = 256;
				
				//Engine explosion and fire
				Boom = Spawn ("MVP_Explosion",Back.PlusZ(Height/2+16));
				Boom.Scale *= 1.75;
				Boom.SetDamage (150);
				Boom.MaxTargetRange = 192;
				Boom.MeleeRange = 48;
				Boom.bNoGravity = True;
				Boom.bGetOwner = True; //So the dead tank is considered the source.
				Boom.Target = Self;
				DeathLight = DynamicLight(Spawn("PointLightFlickerRandom",Back));
				If (DeathLight)
				{
					DeathLight.Args[3] = 64;
					DeathLight.Args[4] = 96;
					DeathLight.Args[0] = 231; //RGB
					DeathLight.Args[1] = 207;
					DeathLight.Args[2] = 13;
					DeathLight.Angle = 350; //Flicker chance.
				}
			}
			MBTD # -1;
			Stop;
		XDeath:
			MBTD A 1
			{
				Frame = !HasAltHull ? 22 : 23; //Normal = W, Alt = X
				
				Actor Boom = Spawn ("MVP_BigExplosion",Pos.PlusZ(32));
				Boom.MaxTargetRange = 640;
				Boom.MeleeRange = 256;
				Boom.SetDamage(600);
				Boom.A_SetScale (2.5);
				
				Actor Dusty = Spawn ("MVP_GroundDustSpawner",Pos.PlusZ(32));
				Dusty.RadiusDamageFactor = 0;
				Dusty.ReactionTime = 512;
				Dusty.Threshold = 512;
				
				A_QuakeEx (2,2,2,GameTicRate*2,0,1024,flags:QF_3D|QF_SCALEDOWN|QF_GROUNDONLY,rollintensity:2);
				
				//Spawn a random amount of flames around the APC wreck.
				SpawnDeathFlames(amount:(12,24),radmul:1);
			}
			MBTD # -1;
			Stop;
	}
}

Class MVP_MBTWreck : MVP_MBTProp
{
	Default
	{
		//$Title Main Battle Tank (Wreck)
		//$Category Vehicles/Tanks
		//$Sprite MBTD]1
		+NoDamage;
		Tag "M6V3-EX Main Battle Tank (Wreck)";
	}
	
	Override Void OnDestroy()
	{
		Super.OnDestroy();
		If (DeathLight) DeathLight.Destroy();
	}
	
	Override Void UserVariableDefaults()
	{
		Super.UserVariableDefaults();
		
		If (!User_Turret || User_Turret ~== " " || User_Turret ~== "Standard" || User_Turret ~== "MBT") //The MBT turret is the default.
			VehicleTurret = "MVP_MBTTurretWreck";
		Else If (User_Turret ~== "Missile" || User_Turret ~== "Artillery" || User_Turret ~== "TOS-1")
		{
			VehicleTurret = "MVP_MBTMissileTurretWreck";
			SetTag ("M6-MLRS Artillery System (Wreck)");
			Health = StartHealth = 2000;
		}
		Else If (User_Turret ~== "Terminator" || User_Turret ~== "BMPT")
		{
			VehicleTurret = "MVP_MBTTerminatorTurretWreck";
			SetTag ("M6 Fire Support Vehicle (Wreck)");
			Health = StartHealth = 3000;
		}
		Else If (User_Turret ~== "SPAAG" || User_Turret ~== "AA" || User_Turret ~== "Anti-Air" || User_Turret ~== "Gepard")
		{
			VehicleTurret = "MVP_MBTSPAAGTurretWreck";
			SetTag ("M6-SPAAG (Wreck)");
			Health = StartHealth = 2000;
		}
	}
	
	Override Void SpawnVehicleTurret ()
	{
		If (User_TurretAngle == -1) User_TurretAngle = Random (180,-180); //Randomize angle.
		If (VehicleTurret == "MVP_MBTTurretWreck")
		{
			If (User_RWSAngle == -1) User_RWSAngle = Random (180,-180);
			If (User_RWSPitch == -1) User_RWSPitch = Random (45,-90);
			
			SpawnTurret (VehicleTurret);
			If (User_RWS ~== "MG" || User_RWS ~== "MachineGun" || User_RWS ~== "Machine Gun")
				Turret.VehicleTurret = "MVP_MBTRWSWreck";
			Else If (User_RWS ~== "Minigun" || User_RWS ~== "Gatling")
				Turret.VehicleTurret = "MVP_MBTRWSMinigunWreck";
			Else If (User_RWS ~== "Random")
				Turret.VehicleTurret = Random (True,False) ? "MVP_MBTRWSWreck" : "MVP_MBTRWSMinigunWreck";
			
			Turret.TurretRotationOffset = User_TurretAngle;
			Turret.Angle = User_TurretAngle;
			//Turret.Pitch = (User_TurretPitch != -1) ? Pitch+User_TurretPitch : Pitch+Random (10,-20); //Dead turrets have no elevations.
			MVP_MBTTurretWreck(Turret).RWSAngle = User_RWSAngle; //Pass angle and pitch to the turret, to rotate the RWS on its' own.
			MVP_MBTTurretWreck(Turret).RWSPitch = User_RWSPitch;
			Return;
		}
		Else If (VehicleTurret == "MVP_MBTMissileTurretWreck" || VehicleTurret == "MVP_MBTSPAAGTurretWreck")
			HasAltHull = True;
		
		SpawnTurret (VehicleTurret);
		Turret.TurretRotationOffset = User_TurretAngle;
		Turret.Angle = User_TurretAngle;
		Turret.Pitch = (User_TurretPitch != -1) ? Pitch+User_TurretPitch : Pitch+Random (45,-90);
	}
	
	Override Void SpawnHeadlights(){}
	
	Override Void PostBeginPlay ()
	{
		User_Destructible = False; //Ignore User_Destructible
		
		TurretOffsets = (0,0,-1);
		MVP_BaseProp.PostBeginPlay ();
		FlamingWreck = User_Burning; //Used by the smoke handling mixin.
	}
	
	Bool User_Burning;
	
	States
	{
		Spawn:
			MBTD A 0 NoDelay
			{
				If (User_Burning)
				{
					DamageSmokeDelay = 0;
					A_StartSound ("SFX/Fire",CHAN_VOICE,CHANF_LOOPING,0.7,0.8);
					Frame = !HasAltHull ? 0 : 1; //Normal = A, Alt = B
					DeathLight = DynamicLight(Spawn("PointLightFlickerRandom",Vec3Angle (96,GetNearestCardinalAngle(True))));
					If (DeathLight)
					{
						DeathLight.Args[3] = 64;
						DeathLight.Args[4] = 96;
						DeathLight.Args[0] = 231; //RGB
						DeathLight.Args[1] = 207;
						DeathLight.Args[2] = 13;
						DeathLight.Angle = 350; //Flicker chance.
					}
				}
			}
			MBTD # -1;
			Stop;
	}
}

Class MVP_MBTRuin : MVP_MBTWreck
{
	Default
	{
		//$Title Main Battle Tank (Ruin)
		//$Category Vehicles/Tanks
		//$Sprite MBTDW1
		Tag "M6V3-EX Main Battle Tank (Ruin)";
	}
	
	Override Void SpawnVehicleTurret(){}
	Override Bool SpawnDamageSmoke(){Return False;}
	
	Bool User_AltHull; //Is the hull skirtless ?
	States
	{
		Spawn:
			MBTD A 0 NoDelay
			{
				If (User_Burning) SpawnDeathFlames(amount:(12,24),(INT.MAX,INT.MAX),1);
				Frame = !User_AltHull ? 22 : 23; //Normal = W, Alt = X
			}
			MBTD # -1;
			Stop;
	}
}

Class MVP_MBTTossedTurret : MVP_MBTTurretWreck
{
	Default
	{
		//$Title Main Battle Tank Turret Wreck
		//$Category Vehicles/Tanks
		//$Sprite MBTDV1
		+NoDamage;
		Tag "Destroyed M6V3-EX Turret";
	}
	States
	{
		Spawn:
			MBTD V -1;
			Stop;
	}
}

Class MVP_MBTTurretWreck : MVP_MBTTurretProp
{
	Default
	{
		+NoDamage;
		Tag "M6V3-EX Turret (Wreck)";
	}
	States
	{
		Spawn:
			MBTD C 1 RotateToVehicle (RTVF_RELATIVEONLY); //No crew to bail.
			Wait;
	}
}

Class MVP_MBTMissileTurretWreck : MVP_MBTTurretWreck
{
	Default
	{
		Tag "M6-MLRS Turret (Wreck)";
	}
	States
	{
		Spawn:
			MBTD F 1 RotateToVehicle (RTVF_RELATIVEONLY);
			Wait;
	}
}

Class MVP_MBTTerminatorTurretWreck : MVP_MBTTurretWreck
{
	Default
	{
		Height 24;
		Radius 64;
		Tag "M6-FSCV Turret (Wreck)";
	}
	States
	{
		Spawn:
			MBTD G 1 RotateToVehicle (RTVF_RELATIVEONLY);
			Wait;
	}
}

Class MVP_MBTSPAAGTurretWreck : MVP_MBTTurretWreck
{
	Default
	{
		Tag "M6-SPAAG Turret (Wreck)";
	}
	States
	{
		Spawn:
			MBTD H 1 RotateToVehicle (RTVF_RELATIVEONLY);
			Wait;
	}
}


Class MVP_MBTRWSWreck : MVP_MBTRWSProp
{
	Default
	{
		+NoDamage;
		Tag "M20 Remote Weapon Station (Wreck)";
	}
	States
	{
		Spawn:
			MBTD Q 1 RotateToVehicle (RTVF_RELATIVEONLY);
			Wait;
	}
}

Class MVP_MBTRWSMinigunWreck : MVP_MBTRWSMinigunProp
{
	Default
	{
		+NoDamage;
		Tag "M20 Minigun Remote Weapon Station (Wreck)";
	}
	States
	{
		Spawn:
			MBTD R 1 RotateToVehicle (RTVF_RELATIVEONLY);
			Wait;
	}
}

Class MVP_MBTTurretProp : MVP_BaseTurretProp
{
	Default
	{
		XScale 1;
		YScale 0.833333; //1 / 1.2
		Health 2500;
		Height 32;
		DeathHeight 32;
		Radius 72;
		Mass 30000;
		Tag "M6V3-EX Turret";
		Obituary "%o was blown up by a tank turret";
		KAI_BaseTurret.MaximumPitch -20;
		KAI_BaseTurret.MinimumPitch 10;
		MVP_BaseTurretProp.SmokeDelay 0;
		+KAI_BaseTurret.TransferDamage;
		
		//"Armor"
		DamageFactor 0.6; //Generic damage factor.
		DamageFactor "ExplosiveImpact", 0.5;
		DamageFactor "Explosion", 0.5;
		DamageFactor "Explosive", 0.5;
		DamageFactor "TankShell", 0.5;
		DamageFactor "Shell", 0.7;
		DamageFactor "APShell", 1.0; //Super susceptible to APFSDS.
		DamageFactor "Grenade", 0.4;
		DamageFactor "HitScan", 0.55; //The generic damage type of hitscan attacks.
		DamageFactor "Shrapnel", 0.2;
		DamageFactor "Fire", 0.3;
		DamageFactor "Plasma", 0.5;
		//Damage factors specific to the Smart Marines.
		DamageFactor "MarineHMG", 0.5;
		DamageFactor "MarineGrenade", 0.5;
		DamageFactor "MarineRifle", 0.55;
		//Vehicle damage factors
		DamageFactor "Autocannon", 0.5;
		DamageFactor "RifleBullet", 0.6;
		DamageFactor "Missile", 0.7;
	}
	
	Int UpdateTankElevation (Int FaceDown, Int FaceStraight, Int FaceUp, Int FaceUp2)
	{
		If (Pitch >= 10 && Pitch >= 5)
			Return FaceDown;
		Else If (Pitch < 10 && Pitch >= -10)
			Return FaceStraight;
		Else If (Pitch < -10 && Pitch >= -17)
			Return FaceUp;
		Else If (Pitch <= -20)
			Return FaceUp2;
		
		Return FaceStraight;
	}
	
	Override Void PostBeginPlay ()
	{
		Vector3 Original = TurretOffsets;
		/*NOTE: The RWS can never look perfect due to the tank being made out of sprites. A Z offset of 0 looks like the station is sunken into its' platform
		from the front, but from the side makes it look actually attached. While a Z of 3 looks normal from the front, but makes the RWS float on the side.*/
		TurretOffsets = (-6,7.5,3);
		Super.PostBeginPlay();
		TurretOffsets = Original;
	}
	
	//User passed remote weapon station aim direction.
	Override Void SpawnVehicleTurret()
	{
		Super.SpawnVehicleTurret();
		If (Turret)
		{
			Turret.TurretRotationOffset = RWSAngle;
			Turret.Angle = RWSAngle;
			Turret.Pitch = RWSPitch;
		}
	}
	
	//Fire a ray right below the turret.
	Override Vector3 GetAttackLocation ()
	{
		Let Check = New ("MVP_GenericWarnMarineCheck");
		
		Vector3 Direction = (0,0,-1); //Aim warning straight down.
		Vector3 StartPos = Pos.PlusZ(-1); //So the warn trace isn't blocked by the turret, which IS a prop
		Check.Trace (StartPos , CurSector, Direction, MaxTargetRange, 0 );
		Return Check.Results.HitPos;
	}
	
	Override String GetObituary (Actor Victim, Actor Inflictor, Name MOD, Bool PlayerAttack)
	{
		If (IsDead (Self) && MOD == 'Crush')
			Return "%o had a Russian tank turret fall on them";
		
		If (IsDead (Self) && Inflictor Is "MVP_Explosion" || Inflictor Is "MVP_BigExplosion")
			Return "%o got blown up along with a tank";
		
		Return Super.GetObituary (Victim, Inflictor, MOD, PlayerAttack); //Return the generic obituary property.
	}
	
	Override Void Tick()
	{
		If (IsFrozen()) Return;
		Super.Tick();
		If (WarningZone) WarningZone.SetOrigin (GetAttackLocation(),True); //Track warn zone to fall position.
	}
	
	Bool MetalCoffin; //Ejection seat system.
	Actor WarningZone;
	Mixin MVP_MBTTurret_SmokeHandling;
	
	Double RWSAngle, RWSPitch;
	States
	{
		Spawn:
			MMBT G 0;
			MMBT # 1
			{
				RotateToVehicle(RTVF_RELATIVEONLY);
				Frame = UpdateTankElevation (15,6,9,12); //P, G, J, M
			}
			Loop;
		Death:
			MBTD C 1 A_JumpIf (MetalCoffin,"FlyingDeath");
			MBTD C 1
			{
				Actor Boom = Spawn ("MVP_Explosion",Vec3Angle (96,GetNearestCardinalAngle(True)).PlusZ(Height/2));
				Boom.Scale *= 2.5;
				Boom.SetDamage (300);
				Boom.MaxTargetRange = 384;
				Boom.MeleeRange = 96;
				Boom.bNoGravity = True;
				Boom.bGetOwner = True; //So the dead tank is considered the source.
				Boom.Target = Self;
			}
			MBTD C 1 RotateToVehicle (RTVF_NOTARGETCHECK); //No crew to bail.
			Wait;
		FlyingDeath: //Soviet engineering
			#### # 1
			{
				InFlight = bCastSpriteShadow = True;
				WarningZone = WarnMarines (MWRN_ALLIESTOO,Radius*4,Self); //Create a new warning zone after the old one is erased due to the tank dying, to warn marines below.
				Actor Boom = Spawn ("MVP_Explosion",Pos);
				Boom.Scale *= 1.5;
				Boom.SetDamage (384);
				Boom.MaxTargetRange = 512;
				Boom.MeleeRange = 128;
				Boom.bNoGravity = True;
				Boom.bGetOwner = True; //So the dead tank is considered the source.
				Boom.Target = Self;
				
				SetOrigin (Pos.PlusZ(Height+8),True);
				bFallOnDeath = True;
				Vel.Z = TossVelocity = FRandom (32,56);
				Double XVel = FRandom (-2,8); Double YVel = FRandom (8,16);
				Vel.X = XVel * Cos (Angle) + YVel * Sin (Angle);
				Vel.Y = XVel * Sin (Angle) - YVel * Cos (Angle);
			}
			//Update animation based on vertical velocity.
			MBTD S 1 A_JumpIf ((Vel.Z <= TossVelocity/1.5),1);
			Wait;
			MBTD T 1 A_JumpIf ((Vel.Z <= TossVelocity/2),1);
			Wait;
		FlyingDeath.Landing:
			MBTD U 1 A_JumpIf ((bOnMobj || (FloorZ >= Pos.Z) || (CeilingZ <= Pos.Z+Height)),1); //Hit the floor, ceiling, or an actor.
			Wait;
			MBTD V 1
			{
				InFlight = False;
				If (WarningZone) WarningZone.Destroy();
				A_StartSound ("SFX/MetalCrash",attenuation:0.4);
				A_Explode (800,Radius*1.5,XF_EXPLICITDAMAGETYPE|XF_NOTMISSILE,True,Radius*1.5,damagetype:'Crush');
				A_QuakeEx (1,1,1,GameTicRate*2,0,768,"",QF_SCALEDOWN|QF_GROUNDONLY,falloff:64,rollintensity:0.5);
				Actor Dusty = Spawn ("MVP_GroundDustSpawner",Pos.PlusZ(Height/2));
				Dusty.RadiusDamageFactor = 0.9;
				Dusty.ReactionTime = 128;
				Dusty.Threshold = 256;
			}
			MBTD V 2 A_JumpIf (Abs(Vel.Z) >= 24,"FlyingDeath.Restart"); //We are in vertical motion again.
			Wait;
		FlyingDeath.Restart:
			TNT1 A 0
			{
				InFlight = True;
				WarningZone = WarnMarines (MWRN_ALLIESTOO,Radius*4,Self); //Create a new warning zone after the old one is erased due to the tank dying, to warn marines below.
			}
			Goto FlyingDeath.Landing;
		//Whole turret vanishes if the tank was hit by something strong enough to gib it.
		XDeath:
			TNT1 A 1 A_JumpIf ((MetalCoffin || Random(0,255) < 72),"FlyingDeath");
			Stop;
	}
	
	Double TossVelocity;
	Bool InFlight;
}

//TODO: Once I begin coding the actual NPC versions of these turrets, put their settings like damage factors and obituaries here, these are basically placeholders.
Class MVP_MBTMissileTurretProp : MVP_MBTTurretProp
{
	Default
	{
		Height 72;
		Tag "M6-MLRS Turret";
	}
	//TODO: Since the MLRS can actually rise up and down in addition to the aiming elevations, it'll also have a User_Elevation variable.
	//Int User_Elevation;
	Override Bool SpawnDamageSmoke (){Return False;}
	States
	{
		Spawn:
			AMBT R 0;
			AMBT # 1
			{
				RotateToVehicle(RTVF_RELATIVEONLY);
				Frame = UpdateTankElevation (18,17,19,19); //S, R, T, T
			}
			Loop;
		Death:
			MBTD F 1
			{
				Actor Boom = Spawn ("MVP_Explosion",Vec3Angle (96,GetNearestCardinalAngle(True)).PlusZ(Height/2));
				Boom.Scale *= 2.5;
				Boom.SetDamage (300);
				Boom.MaxTargetRange = 384;
				Boom.MeleeRange = 96;
				Boom.bNoGravity = True;
				Boom.bGetOwner = True; //So the dead tank is considered the source.
				Boom.Target = Self;
			}
			MBTD F 1 RotateToVehicle (RTVF_NOTARGETCHECK);
			Wait;
		XDeath:
			TNT1 A 0;
			Stop;
	}
}

Class MVP_MBTTerminatorTurretProp : MVP_MBTTurretProp
{
	Default
	{
		Height 24;
		Radius 64;
		Tag "M6-FSCV Turret (Prop)";
		Mass 10000;
	}
	Override Bool SpawnDamageSmoke (){Return False;}
	States
	{
		Spawn:
			MBT1 A 0;
			MBT1 # 1
			{
				RotateToVehicle(RTVF_RELATIVEONLY);
				Frame = UpdateTankElevation (6,0,3,3); //G, A, D, D
			}
			Loop;
		Death:
			MBTD G 1
			{
				Actor Boom = Spawn ("MVP_Explosion",Vec3Angle (96,GetNearestCardinalAngle(True)).PlusZ(Height/2));
				Boom.Scale *= 2.5;
				Boom.SetDamage (300);
				Boom.MaxTargetRange = 384;
				Boom.MeleeRange = 96;
				Boom.bNoGravity = True;
				Boom.bGetOwner = True; //So the dead tank is considered the source.
				Boom.Target = Self;
			}
			MBTD G 1 RotateToVehicle (RTVF_NOTARGETCHECK);
			Wait;
		XDeath:
			TNT1 A 0;
			Stop;
	}
}

Class MVP_MBTSPAAGTurretProp : MVP_MBTTurretProp
{
	Default
	{
		Height 40;
		KAI_BaseVehicle.VehicleTurret "MVP_SPAAGRadarProp";
		Tag "M6-SPAAG Turret (Prop)";
		Mass 20000;
	}
	
	Override Void PostBeginPlay ()
	{
		If (Lowered) VehicleTurret = "";
		Vector3 Original = TurretOffsets;
		TurretOffsets = (-0.1,0,3);
		MVP_BaseTurretProp.PostBeginPlay();
		TurretOffsets = Original;
	}
	
	//The elevation works different on the SPAAG since it can nearly aim straight up.
	Int UpdateSPAAGElevation (Int FaceDown, Int FaceStraight, Int FaceUp, Int FaceUp2, Int FaceUp3)
	{
		If (Pitch >= 10 && Pitch >= 5)
			Return FaceDown;
		Else If (Pitch < 10 && Pitch >= -10)
			Return FaceStraight;
		Else If (Pitch < -30 && Pitch >= -60)
			Return FaceUp;
		Else If (Pitch < -60 && Pitch >= -80)
			Return FaceUp2;
		Else If (Pitch <= -80)
			Return FaceUp3;
		
		Return FaceStraight;
	}
	
	Bool Lowered; //The SPAAGs' radar is lowered.
	
	States
	{
		Spawn:
			MBT2 D 0;
			MBT2 # 1
			{
				RotateToVehicle(RTVF_RELATIVEONLY);
				If (!Lowered)
					Frame = UpdateSPAAGElevation (15,3,19,9,12); //P, D, G, J, M
				Else
					Frame = 0; //A
			}
			Loop;
		Death:
			MBTD H 1
			{
				Actor Boom = Spawn ("MVP_Explosion",Vec3Angle (96,GetNearestCardinalAngle(True)).PlusZ(Height/2));
				Boom.Scale *= 2.5;
				Boom.SetDamage (300);
				Boom.MaxTargetRange = 384;
				Boom.MeleeRange = 96;
				Boom.bNoGravity = True;
				Boom.bGetOwner = True; //So the dead tank is considered the source.
				Boom.Target = Self;
			}
			MBTD H 1 RotateToVehicle (RTVF_NOTARGETCHECK);
			Wait;
		XDeath:
			TNT1 A 0;
			Stop;
	}
}

Class MVP_SPAAGRadarProp : MVP_BaseTurretProp
{
	Default
	{
		Health 100;
		Radius 8; //Since the radar is so horizontally offset, it also uses an hitbox attached to it instead, placed at where the radar VISUALLY is.
		Height 16;
		DeathHeight 16;
		XScale 1;
		YScale 0.833333; //1.0 / 1.2
		Mass 100;
		Tag "Anti-aircraft radar (Prop)";
	}
	
	Actor Hitbox;
	
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		Hitbox = Spawn("MVP_SPAAGRadarHitbox",Vec3Angle(-44,Angle));
		Hitbox.Master = Self;
	}
	States
	{
		Spawn:
			RAD0 F 1 RotateToVehicle (RTVF_RELATIVEONLY);
			Loop;
		Death:
			TNT1 A 0 A_SpawnItemEx ("MVP_SPAAGRadarDishChunk",-48,zofs:40,FRandom (-2,-4),FRandom (2,-2),FRandom (0,4));
			TNT1 A 0 A_SpawnItemEx ("MVP_SPAAGRadarAntennaChunk",-44,zofs:40,FRandom (2,4),FRandom (2,-2),FRandom (0,4));
			Stop;
	}
}

//URGENT: These should eventually be put in another file, since the NPC SPAAG will use them too !
Class MVP_SPAAGRadarDishChunk : Actor
{
	Default
	{
		Radius 8;
		Height 8;
		XScale 0.5;
		YScale 0.416666;
		Mass 20;
	}
	States
	{
		Spawn:
			MBTD IJK 4 A_CheckFloor("Crash");
			Loop;
		Crash:
			MBTD L -1;
			Stop;
	}
}

Class MVP_SPAAGRadarAntennaChunk : MVP_SPAAGRadarDishChunk
{
	States
	{
		Spawn:
			MBTD MNO 4 A_CheckFloor("Crash");
			Loop;
		Crash:
			MBTD P -1;
			Stop;
	}
}

Class MVP_MBTRWSProp : MVP_BaseTurretProp
{
	Default
	{
		Health 200;
		Radius 16;
		Height 16;
		DeathHeight 16;
		XScale 0.5; //The remote weapon stations are rendered at double the resolution of the rest of the tank hull and turret, for extra detail.
		YScale 0.416666;
		Mass 50;
		KAI_BaseTurret.MaximumPitch -35;
		KAI_BaseTurret.MinimumPitch 15;
		AttackSound "Vehicle/APC/MGFire";
		Tag "M20 Remote Weapon Station (Prop)";
		DamageFactor "Autocannon", 0.95;
		DamageFactor "Melee", 0.4;
		DamageFactor "Electric", 0.4;
		DamageFactor "ExplosiveImpact", 0.825;
		DamageFactor "Explosion", 0.825;
		DamageFactor "HitScan", 0.9;
	}
	
	Int UpdateRWSElevation (Int FaceDown, Int FaceStraight, Int FaceUp, Int FaceUp2)
	{
		If (Pitch >= 8 && Pitch >= 0)
			Return FaceDown;
		Else If (Pitch < 8 && Pitch >= -17.5)
			Return FaceStraight;
		Else If (Pitch < -17.5 && Pitch >= -25)
			Return FaceUp;
		Else If (Pitch <= -25)
			Return FaceUp2;
		
		Return FaceStraight;
	}
	
	Override Void Die (Actor Source, Actor Inflictor, Int DmgFlags, Name MeansOfDeath)
	{
		Super.Die (Source, Inflictor, DmgFlags, MeansOfDeath);
		If (Master) Master.SetTag (Master.Default.GetTag());
	}
	
	Override Void OnDestroy()
	{
		If (Master) Master.SetTag (Master.Default.GetTag());
		Super.OnDestroy();
	}
	
	States
	{
		Spawn:
			MMBT S 0;
			MMBT # 1
			{
				RotateToVehicle(RTVF_RELATIVEONLY);
				Frame = UpdateRWSElevation (24,18,20,22); //Y, S, U, W
			}
			Wait;
		Death:
			MBTD Q 1
			{
				If (Master)
				{
					Angle = Master.Angle;
					TurretRotationOffset = 0;
				}
				RotateToVehicle (RTVF_NOTARGETCHECK);
				Actor Boom = Spawn ("MVP_Explosion",Pos);
				Boom.Scale *= 0.6;
				Boom.SetDamage (32);
				Boom.MaxTargetRange = 96;
				Boom.MeleeRange = 12;
				Boom.bNoGravity = True;
			}
			MBTD Q 1 RotateToVehicle (RTVF_NOTARGETCHECK);
			Wait;
		XDeath:
			TNT1 A 0
			{
				Actor Boom = Spawn ("MVP_Explosion",Pos);
				Boom.Scale *= 0.9;
				Boom.SetDamage (56);
				Boom.MaxTargetRange = 128;
				Boom.MeleeRange = 48;
				Boom.bNoGravity = True;
				
				SmokeCounter = 48;
				Bool b; Actor Debris;
				For (Int I; I <= SmokeCounter; I++)
				{
					[B, Debris] = A_SpawnItemEx ("MVP_DiCokkaDebris",FRandom (Radius,-Radius),FRandom(Radius,-Radius),FRandom (0,Height),FRandom (-12,12),FRandom (-12,12),FRandom (6,16));
					If (Debris)
					{
						Debris.Scale *= FRandom (0.1,0.3);
						Debris.bXFlip = Random (False,True);
					}
				}
			}
			Stop;
		GenericFreezeDeath:
			MMBT # 0 {Frame = UpdateRWSElevation (24,18,20,22); /*Y, S, U, W*/}
			Goto Super::GenericFreezeDeath;
	}
}

Class MVP_MBTRWSMinigunProp : MVP_MBTRWSProp
{
	Default
	{
		Tag "M20 Minigun Remote Weapon Station (Prop)";
	}
	States
	{
		Spawn:
			AMBT G 0;
			AMBT # 1
			{
				RotateToVehicle(RTVF_RELATIVEONLY);
				Frame = UpdateRWSElevation (12,6,8,10); //M, G, I, K
			}
			Loop;
		Death:
			MBTD R 1
			{
				If (Master)
				{
					Angle = Master.Angle;
					TurretRotationOffset = 0;
				}
				RotateToVehicle (RTVF_NOTARGETCHECK);
				Actor Boom = Spawn ("MVP_Explosion",Pos);
				Boom.Scale *= 0.6;
				Boom.SetDamage (32);
				Boom.MaxTargetRange = 96;
				Boom.MeleeRange = 12;
				Boom.bNoGravity = True;
			}
			MBTD R 1 RotateToVehicle (RTVF_NOTARGETCHECK);
			Wait;
		XDeath:
			TNT1 A 0
			{
				Actor Boom = Spawn ("MVP_Explosion",Pos);
				Boom.Scale *= 0.9;
				Boom.SetDamage (56);
				Boom.MaxTargetRange = 128;
				Boom.MeleeRange = 48;
				Boom.bNoGravity = True;
			}
			Stop;
		GenericFreezeDeath:
			MMBT # 0 {Frame = UpdateRWSElevation (12,6,8,10); /*M, G, I, K*/}
			Goto Super::GenericFreezeDeath;
	}
}