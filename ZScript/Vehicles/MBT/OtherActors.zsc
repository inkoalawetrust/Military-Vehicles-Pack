//$GZDB_SKIP
Class MVP_MBTFireEffect : KAI_MixinActor
{
	Default
	{
		RenderStyle "Add";
		DamageType "Explosive";
		MaxTargetRange 224; //The maximum range of the explosion.
		MeleeRange 96; //The range around the explosion in which actors take it's full damage.
		Damage 500; //The damage of the explosion, this property can only be changed with the SetDamage() function.
		RadiusDamageFactor 0.35; //How much distance off the ground affects the firing effect. 1 is a direct conversion of: 1 MU of the ground = 1 less dust cloud
		ReactionTime 64; //How much smoke to spawn.
		Threshold 256; //How far to spawn dust.
		
		+NeverTarget;
		+NotAutoaimed;
		+Bright;
		+NoGravity;
		+AlwaysPuff; //Spawn default shockwave ring.
	}
	DynamicLight Light;
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				If (bAlwaysPuff) //Can be set to false when spawning to not spawn a ring, and/or spawn your own.
				{
					Actor Ring = Spawn ("MVP_ShockwaveRing",Pos);
					If (Ring)
					{
						Ring.Speed = 1;
						Ring.FloatSpeed = 0.1;
						Ring.ReactionTime = (GameTicRate/2);
					}
				}
				
				A_StartSound ("SFX/BigExplosion",CHAN_VOICE,attenuation:0.1);
				A_QuakeEx (2,2,2,16,0,1024,"world/quake",QF_SCALEDOWN|QF_GROUNDONLY,falloff:128,rollintensity:2);
				Light = DynamicLight(Spawn("DynamicLight",Pos));
				If (Light)
				{
					Light.Args[3] = 192;
					Light.Args[0] = 231; //RGB
					Light.Args[1] = 207;
					Light.Args[2] = 13;
				}
				
				Actor Duster = Spawn ("MVP_GroundDustSpawner",Pos);
				//Pass parameters to spawner.
				Duster.RadiusDamageFactor = RadiusDamageFactor;
				Duster.ReactionTime = ReactionTime;
				Duster.Threshold = Threshold;
			}
			MBTF A 1
			{
				Light.Args[3] += 24;
				MakeAlliesImmuneToExplosion (Target, MaxTargetRange);
				A_Explode (Damage,MaxTargetRange,0,True,MeleeRange);
				RemoveAllyExplosionImmunity();
			}
			MBTF BCD 1 {Light.Args[3] += 24;}
			MBTF EF 2 {Light.Args[3] += 24;}
			MBTF G 2 {Light.Args[3] = 96;}
			TNT1 A 0 {If (Light) Light.Destroy();} //Fire over, get rid of the light.
			MBTF HI 2;
			Stop;
	}
}

//Spawns ground dust around an explosion.
Class MVP_GroundDustSpawner : Actor
{
	Default
	{
		RadiusDamageFactor 0.35; //How much distance off the ground affects the firing effect. 1 is a direct conversion of: 1 MU of the ground = 1 less dust cloud
		ReactionTime 64; //How much smoke to spawn.
		Threshold 256; //How far to spawn dust.
	}
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		Int SmokeFactor = (Pos.Z - FloorZ) * RadiusDamageFactor;
		Int DustCount = ReactionTime - SmokeFactor; //Decrement the dust to spawn the further off the ground the blast is.
		//Console.Printf ("Ground height: %.2f, Dust count %d, SmokeFactor %d",(Pos.Z - FloorZ),DustCount,SmokeFactor);
		Actor Dust;
		Class<Actor> DustClasses[] = {"MVP_GroundDust","MVP_GroundDust2","MVP_GroundDust3"};
		//Spawn random dust actors on the ground, the closer to the ground, the more dust spawned.
		For (Int I = DustCount; 0 <= I; I--)
		{
			Dust = Spawn (DustClasses[Random(0,DustClasses.Size()-1)],Vec3Offset (FRandom (Threshold,-Threshold),FRandom(Threshold,-Threshold),0));
			Dust.SetOrigin ((Dust.Pos.XY,GetZAt (Dust.Pos.X,Dust.Pos.Y,flags:GZF_ABSOLUTEPOS)),False);
			//If the dust is out of bounds, or the height difference from the explosions' ground level is too high, remove it.
			If (!Level.IsPointInLevel (Dust.Pos) || (FloorZ - Dust.Pos.Z) > 64 || Dust.Pos.Z > Pos.Z+16|| Distance2DSquared (Dust) > Threshold*Threshold)
				Dust.Destroy();
			
			Dust.Scale *= FRandom (0.6,1.25);
			Dust.Speed *= FRandom (0.75,1.25); //Set roll speed, doesn't work for MVP_GroundDust3 though, which doesn't use it.
			If (Random (0,255) < 255/2-16 && !(Dust Is "MVP_GroundDust3")) Dust.Vel.Z = FRandom(0.5,2);
			If (Random (0,255) < 64) Dust.A_SetRenderStyle (1,STYLE_ADD);
		}
		Destroy();
	}
}

//Gray circular cloud.
Class MVP_GroundDust : Actor
{
	Default
	{
		Speed 2;
		//RenderStyle "Add";
		+NoBlockmap;
		+NoInteraction;
		+NoGravity;
		+RollSprite;
	}
	
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		If (!bSynchronized) Tics = Random(0,8); //Randomize the dust a bit.
	}
	
	States
	{
		Spawn:
			SMK3 ABCDEFGHIJKLM 2 A_SetRoll (Roll+Speed);
			Stop;
	}
}

//Dark circular cloud.
Class MVP_GroundDust2 : MVP_GroundDust
{
	States
	{
		Spawn:
			SMK6 ABCDEFGHIJKLM 2 A_SetRoll (Roll+Speed);
			Stop;
	}
}

//Light gray dust puff.
Class MVP_GroundDust3 : MVP_GroundDust
{
	States
	{
		Spawn:
			SMOK ABCDEFGHIJKLMNOPQR 2;
			Stop;
	}
}

Class MVP_HEATShell : MVP_BaseProjectile
{
	Default
	{
		Radius 16;
		Height 22;
		Speed 300;
		FastSpeed 350;
		XScale 0.5;
		YScale 0.416666; //0.5 / 1.2
		DamageFunction (Random(600,1000));
		ProjectileKickback 512;
		Obituary "%o was sent straight to god by a HEAT shell";
		Tag "130mm High Explosive Anti Tank Munition";
		Decal "HEATScorch";
		DamageType "Shell";
		KAI_BaseProjectile.TrailSprite "MVP_Tracer";
		KAI_BaseProjectile.InitialTrailsSkipped 24;
		KAI_BaseProjectile.MaxTrails 256;
	}
	Void DoSplash (Int LiquidType, Bool UpsideDown = False)
	{
		If (LiquidType == LIQUID_NONE) Return;
		HitLiquid = True;
		Actor Splash = SpawnLiquidSplash (LiquidType,"SFX/AltLiquidExplosion",attenuation:0.25,1000,384,128,'Explosive', True);
		
		Splash.A_QuakeEx (1,1,1,24,0,1024,"",QF_SCALEDOWN|QF_GROUNDONLY,rollintensity:1);
		Double Size = FRandom (4,6);
		Splash.Scale.X = Splash.Scale.Y = (UpsideDown ? -Size : Size);
		Splash.Scale.X *= UpsideDown ? FRandom (-1.2,-2.5) : FRandom (1.2,2.5);
		Splash.bXFlip = Random (False,True);
	}
	Override Void Tick()
	{
		Super.Tick();
		If (IsFrozen()) Return;
		If (bMissile) PlayFlybySound ("SFX/BulletFlyby",CHAN_VOICE,CHANF_NOSTOP,1,2.0,distance:600);
	}
	
	Override Int SpecialMissileHit (Actor Victim)
	{
		Int Result = Super.SpecialMissileHit(Victim);
		
		If (Result == -1)
			If (Pos.Z >= FloorZ+88) bFalling = True; //This is going to be an air blast, so mark it as such for the tank turrets' obituaries.
		
		Return Result;
	}
	
	Bool HitLiquid;
	DynamicLight Light;
	States
	{
		Spawn:
			MBTP A 0 NoDelay
			{
				A_SpawnItemEx ("MVP_HEATShellPetal",yvel:FRandom(2,4));
				A_SpawnItemEx ("MVP_HEATShellPetal",yvel:FRandom(-2,-4));
			}
			MBTP # 1
			{
				A_FaceMovementDirection ();
				Frame = UpdateProjectileElevation (2,2,0,1,1); //C, C, A, B, B
			}
			Wait;
		Death:
			TNT1 A 1
			{
				//The floor was hit.
				If (Pos.Z <= FloorZ)
					DoSplash(CheckLiquid(FloorPic));
				//The ceiling was hit.
				Else If (Pos.Z + Height >= CeilingZ)
					DoSplash(CheckLiquid(CeilingPic),True);
				
				If (HitLiquid) Destroy(); //Splash was spawned, so just delete yourself.
			}
			TNT1 A 0
			{
				A_SetScale (1,1);
				A_SetRenderStyle (1.0,Style_Add);
				If (Pos.Z + Height >= CeilingZ) Scale.Y = -1; //If a ceiling was hit, invert the explosion.
				Else If (Pos.Z >= FloorZ+88) Return ResolveState ("Death.Air"); //If the explosion happened above 24 map units from the ground, trigger the air explosion.
				Return State (Null);
			}
			TNT1 A 0
			{
				SetZ (FloorZ); //Stick to the ground to explode properly.
				Light = DynamicLight(Spawn("DynamicLight",Pos));
				If (Light)
				{
					Light.Args[3] = 128;
					Light.Args[0] = 231; //RGB
					Light.Args[1] = 207;
					Light.Args[2] = 13;
				}
				Actor Ring = Spawn ("MVP_ShockwaveRing",Pos);
				If (Ring)
				{
					Ring.Speed = 1;
					Ring.FloatSpeed = 0.1;
					Ring.ReactionTime = (GameTicRate/2);
				}
				A_QuakeEx (3,3,3,GameTicRate*2,0,2048,"",QF_SCALEDOWN|QF_GROUNDONLY,falloff:128,rollintensity:3);
				A_StartSound ("SFX/BigExplosion",flags:CHANF_OVERLAP,attenuation:0.2);
				MakeAlliesImmuneToExplosion (Target, 512);
				A_Explode (1200,512,XF_EXPLICITDAMAGETYPE,True,256,damagetype:"Explosive");
				RemoveAllyExplosionImmunity();
				
				Actor Duster = Spawn ("MVP_GroundDustSpawner",Pos);
				Duster.ReactionTime = 128;
				Duster.Threshold = 512;
			}
			MBTF JKL 1 {Light.Args[3] += 48;}
			MBTF MNO 4 {Light.Args[3] += 48;}
			MBTF P 6 {Light.Args[3] += 48;}
			MBTF Q 16 {If (Light) Light.Destroy();}
			Stop;
		Death.Air:
			TNT1 A 0
			{
				Actor Boom = Spawn ("MVP_MBTFireEffect",Pos);
				Boom.Scale *= 1.5;
				Boom.Target = Target;
				Boom.MaxTargetRange = 512;
				Boom.MeleeRange = 256;
				Boom.SetDamage(1500);
			}
			Stop;
	}
}

Class MVP_APFSDSShell : MVP_BaseProjectile
{
	Default
	{
		Radius 16;
		Height 22;
		Speed 400;
		FastSpeed 500;
		XScale 0.5;
		YScale 0.416666; //0.5 / 1.2
		DamageFunction (2500);
		ProjectileKickback 512;
		RipperLevel 12;
		
		KAI_BaseProjectile.RipDepth 32;
		KAI_BaseProjectile.TrailSprite "MVP_Tracer";
		KAI_BaseProjectile.InitialTrailsSkipped 24;
		KAI_BaseProjectile.MaxTrails 256;

		Obituary "%o was penetrated by a depleted uranium rod";
		Tag "130mm APFSDS Munition";
		Decal "50CalChip";
		DamageType "APShell";
		+HitTracer; //Store the actor that killed the round as the tracer, used by the god mode code.
		+ExtremeDeath;
		+FoilInvul;
		+FoilBuddha;
		+CausePain;
		+Ripper;
		+KAI_BaseProjectile.RipOnce;
	}
	
	Override Void TrailSpawn (VisualThinker Trail)
	{
		Super.TrailSpawn (Trail);
		If (!Trail) Return;
		
		Trail.SetTranslation ("Tracer_White"); //Cum blast
	}
	
	//P_RipperBlood() is not exposed to ZScript, like most useful functions apparently. So I had to copy it here for the DU dart.
	//It does ignore the cl_bloodtype checks however, since P_DrawSplash2 isn't exposed either.
	Void ShitOutBlood (Actor AnnihilatedRemains)
	{
		Let Blud = AnnihilatedRemains.GetBloodType(0);
		
		Double XO = Random2 [pr_ripperblood](255) / 8.;
		Double YO = Random2 [pr_ripperblood](255) / 8.;
		Double ZO = Random2 [pr_ripperblood](255) / 8.;
		Vector3 BloodPos = Vec3Offset (XO,YO,ZO);
		
		If (Blud)
		{
			Actor Mo = Spawn (Blud,BloodPos);
			If (AnnihilatedRemains.bPuffGetsOwner) Mo.Target = AnnihilatedRemains;
			If (GameInfo.GameType == GAME_HERETIC) Mo.bNoGravity;
			Mo.Vel.X = Vel.X / 4; //Natively it's divided by two. But that's too fast for the APFSDS shell.
			Mo.Vel.Y = Vel.Y / 4;
			Mo.Tics = Random2 [pr_ripperblood](255) & 3;
			
			If (!Mo.bDontTranslate)
				Mo.Translation = AnnihilatedRemains.BloodTranslation;
		}
	}
	
	Override Int SpecialMissileHit (Actor Victim)
	{
		Int Num = Super.SpecialMissileHit(Victim);
		
		If (!Victim) Return 1; //Ignore apparently nonexistent victim.
		
		//Godkilling handling.
		bNoExtremeDeath = False;
		ProjectileKickback = Default.ProjectileKickback;
		If (Victim.Player) KilledCheater = False;
		
		If (Num == -1 && !Victim.bNoBlood && !Victim.bReflective && !bBloodlessImpact && !Victim.bInvulnerable && !Victim.bDormant && !IsInanimateObject(Victim))
		{
			For (Int I = 128; I >= 0; I--)
				ShitOutBlood (Victim);
		}
		
		Bool HostileVictim = IsHostileToShooter (Victim);
		
		//Skill issue.
		If (Victim.Player && HostileVictim && (Victim.Player.Cheats & (CF_GODMODE|CF_BUDDHA) || Victim.bBuddha || Victim.bInvulnerable))
		{
			//Nice try Graf.
			Let FuckYou = Victim.GiveInventoryType ("MVP_APFSDS_CheatBypass");
			If (Victim.Player.Cheats & CF_GODMODE) FuckYou.bFoilInvul = True;
			If (Victim.Player.Cheats & CF_BUDDHA) FuckYou.bFoilBuddha = True;
			FuckYou.bBuddha = Victim.bBuddha;
			FuckYou.bInvulnerable = bInvulnerable;
			
			//Lol, lmfao even.
			Victim.Player.Cheats &= ~(CF_GODMODE|CF_BUDDHA);
			Victim.bInvulnerable = Victim.bInvulnerable = False;
			KilledCheater = bNoExtremeDeath = True;
		}
		
		If (Victim.Player && HostileVictim && (Victim.Player.Cheats & CF_GODMODE2 || Victim.bNoDamage))
		{
			ProjectileKickBack *= 2; //Weee
			bBloodlessImpact = True;
			ExplodeMissile(Null,Victim);
		}
		
		If (Victim Is "MVP_MBT" || Victim Is "MVP_MBTProp")
			bExtremeDeath = (Random(0,255) < 64); //Don't always gib tanks.
		Else If (Victim.Health >= 10000)
			bExtremeDeath = False; //Don't gib mega strong enemies.
		
		Return Num;
	}
	
	Void DoAPFSDSSplash (Int LiquidType, Bool UpsideDown = False)
	{
		If (LiquidType == LIQUID_NONE) Return;
		HitLiquid = True;
		Actor Splash = SpawnLiquidSplash (LiquidType,volume:0.4,0.8);
		
		Double Size = FRandom (0.8,1.2);
		Splash.Scale.X = Splash.Scale.Y = (UpsideDown ? -Size : Size);
		Splash.Scale.Y *= UpsideDown ? FRandom (-1.2,-2.5) : FRandom (1.2,2.5);
		Splash.bXFlip = Random (False,True);
	}
	Bool HitLiquid;
	Bool KilledCheater;
	Bool Shatter; //Used by the APS in case it ever manages to shoot down an APFSDS round.
	States
	{
		Spawn:
			MBTP H 0 NoDelay
			{
				A_SpawnItemEx ("MVP_APFSDSShellPetal",yvel:FRandom(2,4));
				A_SpawnItemEx ("MVP_APFSDSShellPetal",yvel:FRandom(-2,-4));
			}
			MBTP # 1
			{
				A_FaceMovementDirection ();
				Frame = UpdateProjectileElevation (9,9,7,8,8); //J, J, H, I, I
			}
			Wait;
		Death: //Bullet hit level geometry.
			TNT1 A 1
			{
				A_StopSound (CHAN_BODY);
				//The floor was hit.
				If (Pos.Z <= FloorZ)
					DoAPFSDSSplash(CheckLiquid(FloorPic));
				//The ceiling was hit.
				Else If (Pos.Z + Height >= CeilingZ)
					DoAPFSDSSplash(CheckLiquid(CeilingPic),True);
				
				If (HitLiquid) Destroy(); //Splash was spawned, so just delete yourself.
				Else A_StartSound ("Vehicle/APC/MGImpact",CHAN_WEAPON);
				A_QuakeEx (1,1,1,GameTicRate,0,256,falloff:32,rollintensity:1);
			}
			Stop;
		XDeath: //Bullet hit a bleeding actor.
			TNT1 A 1; //Don't play the impact sound on bleeding actors.
			TNT1 A 0 A_JumpIf ((Shatter || Tracer.Player && Tracer.Player.Cheats & CF_GODMODE2 || Tracer.bNoDamage),"XDeath.God"); //Go to non-bleeding state for super indestructible actors.
			Stop;
		XDeath.God:
			TNT1 A 1
			{
				A_StartSound ("Vehicle/Tank/APFSDSShatter",CHAN_WEAPON);
				For (Int I = 0; I <= 8; I++)
					A_SpawnItemEx ("MVP_APFSDSShard",yvel:FRandom(6,-6),FRandom(6,-6),FRandom(6,-6));
			}
			TNT1 A 17 A_QuakeEx (1,1,1,GameTicRate,0,256,falloff:32,rollintensity:1);
			Stop;
		Crash: //Bullet hit a non bleeding actor.
			TNT1 A 1 A_StartSound ("Vehicle/APC/MGImpact",CHAN_WEAPON);
			TNT1 A 17 A_QuakeEx (1,1,1,GameTicRate,0,256,falloff:32,rollintensity:1);
			Stop;
	}
}

Class MVP_HESHShell : MVP_BaseProjectile
{
	Default
	{
		Radius 16;
		Height 22;
		Speed 170;
		FastSpeed 220;
		XScale 0.25;
		YScale 0.208333; //0.25 / 1.2
		DamageFunction (Random(300,500));
		ProjectileKickback 385;
		ReactionTime /*17*/1000; //Time before the round detonates.
		Obituary "%o was smacked by a HESH round";
		Tag "130mm High Explosive Squash Head Munition";
		//Decal "HEATScorch";
		DamageType "Shell";
		KAI_BaseProjectile.TrailSprite "MVP_Tracer";
		KAI_BaseProjectile.InitialTrailsSkipped 12;
		KAI_BaseProjectile.MaxTrails 256;
	}
	
	Void DoSplash (Int LiquidType, Bool UpsideDown = False)
	{
		If (LiquidType == LIQUID_NONE) Return;
		HitLiquid = True;
		Actor Splash = SpawnLiquidSplash (LiquidType,"SFX/AltLiquidExplosion",attenuation:0.35,700,256,110,'Explosive', True);
		
		Splash.A_QuakeEx (0.6,0.6,0.6,24,0,768,"",QF_SCALEDOWN|QF_GROUNDONLY,rollintensity:1);
		Double Size = FRandom (3,5);
		Splash.Scale.X = Splash.Scale.Y = (UpsideDown ? -Size : Size);
		Splash.Scale.X *= UpsideDown ? FRandom (-1.2,-2.5) : FRandom (1.2,2.5);
		Splash.bXFlip = Random (False,True);
	}
	
	Override Int DoSpecialDamage (Actor Target, Int Damage, Name DamageType)
	{
		If (Target)
		{
			If (Pos.Z >= Target.Pos.Z+Target.Height) //Hit the top of an actors' hitbox.
				AboveMobj = True;
			Else If (Pos.Z+Height <= Target.Pos.Z) //Hit the bottom of an actors' hitbox.
				BelowMobj = True;
		}
		Int Dmg = Super.DoSpecialDamage (Target, Damage, DamageType);
		Return Dmg;
	}
	
	//Credit: RaveYard
	static clearscope double EdgeFunction(Vector2 a, Vector2 b, Vector2 c)
	{
		return ((b.X - a.X)*(c.Y - a.Y) - (b.Y - a.Y)*(c.X - a.X));
	}
	
	Override Void Tick()
	{
		Super.Tick();
		If (IsFrozen()) Return;
		If (bMissile) PlayFlybySound ("SFX/BulletFlyby",CHAN_VOICE,CHANF_NOSTOP,1,2.0,distance:600);
		Else //No longer a missile AKA you hit something, now stick to it like a sticky bomb.
		{
			If (!BlockingLine && !BlockingMObj) Return;
			Vector3 TrackPos;
			If (BlockingLine && HitSide && (HitSide.Flags & Side.WALLF_POLYOBJ))
			{
				//Credit: RaveYard
				//Get line angle.
				Vector2 Dir = BlockingLine.Delta;//Level.Vec2Diff (BlockingLine.V1.P,BlockingLine.V2.P);
				Double LineAngle = VectorAngle (Dir.X,Dir.Y);
				
				TrackPos.XY = (((BlockingLine.V1.P + BlockingLine.V2.P) / 2)); //Get the middle point of the line the HESH round hit, that can be considered its' "origin".
				SetOrigin (KAI_Math.Vec3OffsetRelative2 ((TrackPos.XY,Pos.Z),SquashOfs,(LineAngle,0,0)),True);
				Console.Printf ("BlockingLine Vertex 1: %d %d | Vertex 2: %d %d",BlockingLine.V1.P,BlockingLine.V2.P);
				//Angle = GetAngleToPos (TrackPos,0);//HitMObj.Angle + AngDiff;
				Angle = Atan2 (BlockingLine.Delta.Y,BlockingLine.Delta.X) + AngDiff;
			}
			If (BlockingMobj)
			{
				//TrackPos = BlockingMobj.Pos;
				console.printf ("angdiff is %.2f",angdiff);
				SetOrigin (KAI_Math.Vec3OffsetRelative2 (HitMobj.Pos,SquashOfs,(HitMobj.Angle - AngDiff,0,0)),True);
				Angle = AngleTo (HitMobj);//HitMObj.Angle + AngDiff;
			}
			//SetOrigin (KAI_Math.Vec3OffsetRelative2 (TrackPos,SquashOfs,flags:KAI_Math.V3R_ANGLEONLY),True);
			console.printf ("MVP_HESHSHELL: Warped to position %d %d %d",pos);
		}
	}
	
	Override Int SpecialMissileHit (Actor Victim)
	{
		If (!FuckYouGZDoom)
			Return Super.SpecialMissileHit (Victim);
		Else
			Return 1;
	}
	
	Bool HitLiquid;
	DynamicLight Light;
	Bool AboveMobj, BelowMobj;
	Vector3 SquashOfs;
	Double AngDiff;
	Actor HitMobj;
	Side HitSide;
	Bool FuckYouGZDoom;
	
	States
	{
		Spawn:
			MBT0 G 1 NoDelay
			{
				A_FaceMovementDirection ();
				Frame = UpdateProjectileElevation (8,8,6,7,7); //I, I, G, H, H
			}
			Wait;
		//TODO: When the the round hits a wall, make its' angle align with the line it hit.
		Death:
			TNT1 A 1
			{
				//The floor was hit.
				If (Pos.Z <= FloorZ)
				{
					DoSplash(CheckLiquid(FloorPic));
					Frame = 10; //K
					SpriteOffset.Y -= 8;
				}
				//The ceiling was hit.
				Else If (Pos.Z + Height >= CeilingZ)
				{
					DoSplash(CheckLiquid(CeilingPic),True);
					bYFlip = True;
					Frame = 10; //K
					SpriteOffset.Y -= 16;
				}
				
				If (BlockingLine)
				{
					//Fire a trace to get the exact location the shell should stick to.
					FLineTraceData Trace;
					LineTrace (Angle,Speed*2,Pitch,TRF_BLOCKSELF|TRF_SOLIDACTORS,offsetforward:-64,data:Trace);
					SetOrigin ((Trace.HitLocation - Trace.HitDir.Unit() * Radius),True);
					FSpawnParticleParams P; P.Color1 = "Red"; P.Style = STYLE_None; P.Lifetime = 35*5; P.Size = 2; P.StartAlpha = 1; P.FadeStep = -1; P.Flags = SPF_FULLBRIGHT;
					KAI_LOFRaycast.VisualizeTracePath(Pos,Trace.HitLocation,Trace.Distance,0.5,p);
					
					SquashOfs.XY = Level.Vec2Diff (Pos.XY, ((BlockingLine.V1.P + BlockingLine.V2.P) / 2) );
					Double EdgeVal = EdgeFunction (BlockingLine.V1.P,BlockingLine.V2.P,Pos.XY);
					HitSide = (EdgeVal < 0) ? BlockingLine.SideDef[Line.Front] : BlockingLine.SideDef[Line.Back];
					AngDiff += (EdgeVal < 0) ? 90 : -90; //Change angle offset based on direction of line.
					Angle = Atan2 (BlockingLine.Delta.Y,BlockingLine.Delta.X) + AngDiff;
				}
				
				If (Frame != 10) Frame = 9; //J: Default impact sprite for the plastic explosive landing on a wall or side of an actor.
				console.printf ("MVP_HESHSHELL: Hit object at position %d %d %d",pos);
				If (BlockingMobj)
				{
					AngDiff = AbsAngle (Angle, BlockingMobj.Angle);
					console.printf ("angdiff is now set to %.2f, self is %p, BlockMobj is %p",angdiff,self,blockingmobj);
					SquashOfs = KAI_Math.Vec3OffsetRelative2((0, 0, 0), Level.Vec3Diff(BlockingMobj.Pos, Pos), (-Angle, 0 , 0));
					HitMobj = BlockingMobj;
				}
				
				FuckYouGZDoom = True; //HACK: THE SHELL FUCKING HIT, IT'S DONE. IT WILL NOT MAGICALLY COME BACK TO LIFE AND DIE AGAIN !
				bMissile = False;
				console.printf ("MVP_HESHSHELL: Offsets upon impact are %d %d %d",squashofs);
				
				If (HitLiquid) Destroy(); //Splash was spawned, so just delete yourself.
			}
			MBT0 # 35 A_SetTics (ReactionTime);
			TNT1 A 0
			{
				A_SprayDecal ("HESHScorch");
				A_SetScale (0.7,0.7);
				A_SetRenderStyle (1.0,Style_Add);
				If (Pos.Z + Height >= CeilingZ) Scale.Y = -1; //If a ceiling was hit, invert the explosion.
				Else If (Pos.Z >= FloorZ+88) Return ResolveState ("Death.Air"); //If the explosion happened above 88 map units from the ground, trigger the air explosion.
				Return State (Null);
			}
			TNT1 A 0
			{
				SetZ (FloorZ); //Stick to the ground to explode properly.
				Light = DynamicLight(Spawn("DynamicLight",Pos));
				If (Light)
				{
					Light.Args[3] = 96;
					Light.Args[0] = 231; //RGB
					Light.Args[1] = 207;
					Light.Args[2] = 13;
				}
				Actor Ring = Spawn ("MVP_ShockwaveRing",Pos);
				If (Ring)
				{
					Ring.Speed = 1;
					Ring.FloatSpeed = 0.8;
					Ring.Threshold = 2;
					Ring.ReactionTime = (GameTicRate/2);
				}
				A_QuakeEx (1.5,1.5,1.5,GameTicRate*2,0,1536,"",QF_SCALEDOWN|QF_GROUNDONLY,falloff:64,rollintensity:1.5);
				A_StartSound ("SFX/BigExplosion",flags:CHANF_OVERLAP,attenuation:0.35);
				MakeAlliesImmuneToExplosion (Target, 384);
				A_Explode (600,384,XF_EXPLICITDAMAGETYPE,True,192,damagetype:"Explosive");
				RemoveAllyExplosionImmunity();
				
				Actor Duster = Spawn ("MVP_GroundDustSpawner",Pos);
				Duster.ReactionTime = 128;
				Duster.Threshold = 512;
			}
			MBTF JKL 1 {Light.Args[3] += 32;}
			MBTF MNO 4 {Light.Args[3] += 32;}
			MBTF P 6 {Light.Args[3] += 32;}
			MBTF Q 16 {If (Light) Light.Destroy();}
			Stop;
		Death.Air:
			TNT1 A 0
			{
				Actor Boom = Spawn ("MVP_MBTFireEffect",Pos);
				Boom.Scale *= 1.0;
				Boom.Target = Target;
				Boom.MaxTargetRange = 384;
				Boom.MeleeRange = 128;
				Boom.SetDamage(650);
			}
			Stop;

	}
}

Class MVP_HESHFindHitSpot : KAI_LOFRaycast
{
	Override ETraceStatus TraceCallback ()
	{
		If (HitLevelGeometry (Results))
			Return Trace_Stop;
		
		Return Trace_Skip;
	}
}

//Once the APFSDS shell disables the basic god modes, this function turns them back one 1 tick after the impact.
//FoilInvul: Give the owner CF_GODMODE.
//FoilBuddha: Give the owner CF_BUDDHA.
//Invulnerable: Give the player bInvulnerable.
//Buddha: Give the player bBuddha.
Class MVP_APFSDS_CheatBypass : Inventory
{
	Override Void DoEffect ()
	{
		If (GetAge() >= 1 && Owner.Player)
		{
			If (bFoilInvul) Owner.Player.Cheats |= CF_GODMODE;
			If (bFoilBuddha) Owner.Player.Cheats |= CF_BUDDHA;
			Owner.bInvulnerable = bInvulnerable;
			Owner.bBuddha = bBuddha;
			GoAwayAndDie();
		}
	}
}

Class MVP_APFSDSShard : Actor
{
	Default
	{
		Scale 0.2;
		Radius 4;
		Height 8;
		+ThruActors;
	}
	Override Void Tick()
	{
		Super.Tick();
		If (Pos.Z <= FloorZ || BlockingLine)
		{
			If (Frame >= 7 && Random (0,256) < 48) A_StartSound ("Vehicle/Di-Cokka/MetalHit",volume:FRandom (0.3,0.8),ATTN_STATIC);
			Destroy();
		}
	}
	States
	{
		Spawn:
			MSDB QRSTUVWX 1;
			Loop;
	}
}

Class MVP_HEATShellPetal : Actor
{
	Default
	{
		XScale 0.5;
		YScale 0.416666; //0.5 / 1.2
		+NoBlockmap;
	}
	Double RotAng;
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		RotAng = Random (1,6);
		RotAng *= Random (1,-1);
	}
	
	Override Void Tick ()
	{
		Super.Tick();
		If (!IsFrozen() && !InStateSequence (CurState,FindState("Death"))) Angle += RotAng;
	}
	
	States
	{
		Spawn:
			MBTP DDDDEEEEFFFF 1 A_CheckFloor ("Death");
			Loop;
		Death:
			MBTP G -1;
			Stop;
	}
}

Class MVP_APFSDSShellPetal : MVP_HEATShellPetal
{
	States
	{
		Spawn:
			MBTP KKKKLLLLMMMM 1 A_CheckFloor ("Death");
			Loop;
		Death:
			MBTP N -1;
			Stop;
	}
}

Class MVP_ATGM : MVP_BaseProjectile
{
	Default
	{
		XScale 0.5;
		YScale 0.416666; //0.5 / 1.2
		Radius 16;
		Height 16;
		Speed 80;
		FastSpeed 120;
		DamageFunction (Random(600,800));
		Decal "ATGMScorch";
		DamageType "Missile";
		Projectile;
		Obituary "%o failed to outrun a guided missile";
		MissileType "MVP_RocketFlame";
		//KAI_BaseProjectile.TrailActor "MVP_RocketFlame";
		//KAI_BaseProjectile.InitialTrailsSkipped 32;
		//KAI_BaseProjectile.MaxTrails 33;
		KAI_BaseProjectile.TrailDelay 12; //Delay until the missile unfolds.
		+SeekerMissile;
		+CastSpriteShadow; //I mean, it's big and slow enough.
		+KAI_BaseProjectile.NoTrailLine;
	}
	
	Mixin MVP_MarineFunctions;
	Actor WarnZone;
	Vector3 WarnPos;
	KAI_LOFActorFinder NPCWarner;
	Bool HitLiquid;
	DynamicLight Light;
	HazardInfo MissileThreat;
	
	Void DoSplash (Int LiquidType, Bool UpsideDown = False)
	{
		If (LiquidType == LIQUID_NONE) Return;
		HitLiquid = True;
		Actor Splash = SpawnLiquidSplash (LiquidType,"SFX/AltLiquidExplosion",attenuation:0.35,600,256,96,'Explosive', True);
		
		Splash.A_QuakeEx (1,1,1,24,0,768,"",QF_SCALEDOWN|QF_GROUNDONLY,rollintensity:1);
		Double Size = FRandom (2,4);
		Splash.Scale.X = Splash.Scale.Y = (UpsideDown ? -Size : Size);
		Splash.Scale.X *= UpsideDown ? FRandom (-1.2,-2.5) : FRandom (1.2,2.5);
		Splash.bXFlip = Random (False,True);
		Splash.Target = Target; //HACK: If I don't do this, then liquid explosions from the ATGM in particular will be able to hurt allies.
	}
	
	Actor TrackPoint; //DEBUG: What position is the missile warping to.
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		WarnZone = WarnNPCs (WRN_ALLIESTOO|WRN_EXPLOSIVE,512,Self,threatlevel:HazardInfo.HAZARD_HUGE);
		NPCWarner = New ("KAI_LOFActorFinder");
		NPCWarner.Shooter = Self;
		//TrackPoint = Spawn ("KAI_DebugPoint",Pos);
		SmokeCounter = Int(GameTicRate*5.5); //Used to add a limited burntime to the missile.
		
		MissileThreat = New ("HazardInfo");
		If (MissileThreat)
		{
			MissileThreat.Position = KAI_Math.Vec3OffsetRelative (Self,(Speed*4,0,0));
			MissileThreat.Origin = Target;
			MissileThreat.Range = Radius*4;
			MissileThreat.Type = HazardInfo.HAZARD_ATTACK;
			MissileThreat.Level = HazardInfo.HAZARD_HUGE;
			//MissileThreat.Flags = Flags;
			MissileThreat.CustomTags.Push ("Projectile");
			MissileThreat.CustomTags.Push ("Explosive");
		}
	}
	
	//Rocket trail.
	Override Void ActorTrailSpawn (Actor Trail)
	{
		Super.ActorTrailSpawn(Trail);
		Trail.bStandStill = True;
		Trail.SetOrigin (KAI_Math.Vec3OffsetRelative (Self,(-48,0,0)),False);
		Trail.Roll = FRandom(-180,180);
		Trail.A_SetScale (Trail.Scale.X*FRandom(0.7,1.2));
		Trail.Vel.X = FRandom (-2,2);
		Trail.Vel.Y = FRandom (-2,2);
		Trail.Vel.Z = FRandom (-0.5,3);
	}
	
	Override Int SpecialMissileHit (Actor Victim)
	{
		Int Result = Super.SpecialMissileHit(Victim);
		
		If (Result == -1)
		{
			If (WarnZone) WarnZone.Destroy();
			If (Flare) Flare.Destroy();
			If (Pos.Z >= FloorZ+88) bFalling = True; //This is going to be an air blast, so mark it as such for the tank turrets' obituaries.
		}
		
		Return Result;
	}
	
	Override Void OnDestroy()
	{
		Super.OnDestroy();
		If (WarnZone) WarnZone.Destroy();
		If (Flare) Flare.Destroy();
	}
	
	//Update the in-flight sprites.
	Int UpdateATGMSprites()
	{
		If (SteerDir == STEER_NONE)
			Return UpdateProjectileElevation (21,21,20,21,21,True); //V, V, U, V, V
		Else If (SteerDir == STEER_RIGHT)
			Return UpdateProjectileElevation (23,23,22,23,23,True); //X, X, W, X, X;
		Else If (SteerDir == STEER_LEFT)
			Return UpdateProjectileElevation (25,25,24,25,25,True); //Z, Z, Y, Z, Z;
		
		Return UpdateProjectileElevation (21,21,20,21,21,True); //V, V, U, V, V
	}
	
	Double OldAngle;
	Bool SteerDir;
	Actor Flare;
	
	Enum SteerDirections
	{
		STEER_RIGHT = -1,
		STEER_NONE	= 0,
		STEER_LEFT	= 1
	}
	
	Override Void Tick ()
	{
		OldAngle = Angle;
		Super.Tick();
		If (IsFrozen()) Return;
		If (TrackPoint) TrackPoint.SetOrigin(GetFutureTrajectory((8,8,8)),False);
		
		If (DeltaAngle (Angle,OldAngle) < -0.1)
			SteerDir = STEER_RIGHT;
		Else If (DeltaAngle (Angle,OldAngle) > 0.1)
			SteerDir = STEER_LEFT;
		Else
			SteerDir = STEER_NONE;
		
		If (Flare)
			Flare.SetOrigin (KAI_Math.Vec3OffsetRelative(Self,(-40,0,0)),True);
		
		Vector3 Direction = (AngleToVector(Angle, Cos(Pitch)), -Sin(Pitch));
		
		NPCWarner.Trace (Pos.PlusZ(Height/2),CurSector,Direction,768,0);
		//Check all the actors the trace hit.
		ForEach (Mobj : NPCWarner.Mobjs)
			If (Mobj && !IsDead (Mobj) && IsHostileToShooter(Mobj))
				HazardInfo.GiveHazard (Mobj, MissileThreat); //Then warn them.
		
		If (WarnZone) WarnZone.SetOrigin (NPCWarner.Results.HitPos,True); //And move the detonation zone to the position the trace hit.
	}
	States
	{
		//Deploy the wings.
		Spawn:
			MBTP O 0 NoDelay A_ScaleVelocity (0.5);
			MBTP # 5
			{
				A_FaceMovementDirection();
				Frame = UpdateProjectileElevation (15,15,14,15,15,True); //P, P, O, P, P
			}
			MBTP # 5
			{
				A_FaceMovementDirection();
				Frame = UpdateProjectileElevation (17,17,16,17,17,True); //R, R, Q, R, R
			}
			MBTP # 2
			{
				A_FaceMovementDirection();
				Frame = UpdateProjectileElevation (19,19,18,19,19,True); //T, T, S, T, T
			}
			MBTP # 0
			{
				A_ScaleVelocity (2.0);
				A_StartSound ("Vehicle/Tank/RocketMotor",flags:CHANF_LOOPING,0.5,0.5);
				Flare = Spawn ("MVP_FireLens",KAI_Math.Vec3OffsetRelative(Self,(-40,0,0)));
				If (Flare)
				{
					Flare.bAlwaysFast = True;
					Flare.Scale *= 1.2;
				}
				A_AttachLight ('ATGMLight',DynamicLight.FlickerLight,"F1F1A0",76,88,DynamicLight.LF_ATTENUATE,(-40,0,0));
			}
			Goto Fly;
		Fly:
			MBTP # 1 Bright
			{
				KAI_SeekerMissile (1,0.05,SMF_SMART|SMF_LOOK,(8,8,8),16,255);
				//A_SeekerMissile (0,1,SMF_PRECISE);
				Frame = UpdateATGMSprites();
				If (Vel.Length() < 100) //Accelerate over time to 100, when FastMonsters is off of course.
					A_ScaleVelocity (1.02);
				
				If (--SmokeCounter <= 0) //Decrement fuel until zero, then just glide with no more guidance.
				{
					A_RemoveLight ('ATGMLight');
					TrailDelay = INT.MAX;
					If (Flare) Flare.Destroy();
					A_StopSound (CHAN_BODY);
					Return FindState ("Glide");
				}
				
				Return State (Null);
			}
			Wait;
		Glide: //Glide until impact.
			MBTP # 1
			{
				KAI_SeekerMissile (0,0.005,SMF_LOOK,(24,24,24),16,255); //Can still glide towards the tracer, very slowly.
				Frame = UpdateProjectileElevation (19,19,18,19,19,True); //T, T, S, T, T
			}
			Wait;
		//Like the HEAT shell, the missile produces a large explosion, however it's explosion is smaller.
		Death:
			#### # 1;
			TNT1 A 0
			{
				If (Flare) Flare.Destroy();
				A_StopSound (CHAN_BODY);
				bCastSpriteShadow = bYFlip = False;
				
				//The floor was hit.
				If (Pos.Z <= FloorZ)
					DoSplash(CheckLiquid(FloorPic));
				//The ceiling was hit.
				Else If (Pos.Z + Height >= CeilingZ)
					DoSplash(CheckLiquid(CeilingPic),True);
				
				If (HitLiquid) Destroy(); //Splash was spawned, so just delete yourself.
			}
			TNT1 A 0
			{
				A_SetScale (0.75,0.75);
				A_SetRenderStyle (1.0,Style_Add);
				If (Pos.Z + Height >= CeilingZ) Scale.Y = -0.75; //If a ceiling was hit, invert the explosion.
				Else If (Pos.Z >= FloorZ+88) Return ResolveState ("Death.Air"); //If the explosion happened above 88 map units from the ground, trigger the air explosion.
				Return State (Null);
			}
			TNT1 A 0
			{
				SetZ (FloorZ); //Stick to the ground to explode properly.
				Light = DynamicLight(Spawn("DynamicLight",Pos));
				If (Light)
				{
					Light.Args[3] = 96;
					Light.Args[0] = 231; //RGB
					Light.Args[1] = 207;
					Light.Args[2] = 13;
				}
				Actor Ring = Spawn ("MVP_ShockwaveRing",Pos);
				If (Ring)
				{
					Ring.Speed = 0.75;
					Ring.FloatSpeed = 0.2;
					Ring.ReactionTime = (GameTicRate/2);
				}
				A_QuakeEx (2,2,2,GameTicRate*2,0,1536,"",QF_SCALEDOWN|QF_GROUNDONLY,falloff:64,rollintensity:1.5);
				A_StartSound ("SFX/BigExplosion",flags:CHANF_OVERLAP,attenuation:0.2);
				MakeAlliesImmuneToExplosion (Target, 448);
				A_Explode (1000,448,XF_EXPLICITDAMAGETYPE,True,128,damagetype:"Explosive");
				RemoveAllyExplosionImmunity();
				
				Actor Duster = Spawn ("MVP_GroundDustSpawner",Pos);
				Duster.ReactionTime = 128;
				Duster.Threshold = 384;
			}
			MBTF JKL 1 {Light.Args[3] += 32;}
			MBTF MNO 4 {Light.Args[3] += 32;}
			MBTF P 6 {Light.Args[3] += 32;}
			MBTF Q 16 {If (Light) Light.Destroy();}
			Stop;
		Death.Air:
			TNT1 A 0
			{
				Actor Boom = Spawn ("MVP_MBTFireEffect",Pos);
				Boom.Scale *= 1.2;
				Boom.Target = Target;
				Boom.MaxTargetRange = 512;
				Boom.MeleeRange = 256;
				Boom.SetDamage(1150);
				Boom.RadiusDamageFactor = 0.2;
				Boom.ReactionTime = 128; //How much smoke to spawn.
				Boom.Threshold = 384; //How far to spawn dust.
				Boom.bAlwaysPuff = False; //We use our own ring.
				
				Actor Ring = Spawn ("MVP_ShockwaveRing",Pos);
				If (Ring)
				{
					Ring.Speed = 0.75;
					Ring.FloatSpeed = 0.1;
					Ring.ReactionTime = GameTicRate;
				}
			}
			Stop;
	}
}

Class MVP_RocketFlame : KAI_TracerActor
{
	Default
	{
		+WindThrust; //Doesn't work for some reason ? There's nothing internally that should stop wind from working on the smoke particles.
		+RollSprite;
		+NoInteraction;
		Translation "BrightZDoomFire";
		Alpha 0.75;
		Scale 0.5;
		ReactionTime 35;
	}
	
	Override Void Tick()
	{
		Actor.Tick();
		Super.Tick();
	}
	
	States
	{
		Spawn:
			RSMK A 1; //Bright flame.
			RSMK A 1 //Normal flame.
			{
				A_SetTranslation ("ZDoomFire");
				A_SetRenderStyle (1,STYLE_ADD);
			}
			RSMK A 0 //Smoke
			{
				A_SetRenderStyle (0.8,STYLE_TRANSLUCENT);
				A_SetTranslation ("");
			}
			RSMK BC 1;
			RSMK DE 1;
			Stop;
	}
}

//Custom meandering decoy. Kinda like a flare, but invisible and self propelling, so not like a flare.
Class MVP_SeekerDecoy : Actor
{
	Default
	{
		Speed 4;
		+NoInteraction;
		+NoClip; //We do want it going through level geometry.
		+NoBlockmap;
		+Shootable; //So that the decoys are actually tracked.
		ReactionTime 175; //Time until the decoy begins going in one direction to kill the seeker.
		Threshold 16; //Time before next turn while wandering around.
	}
	
	Int Turns;
	Double TurnAmount;
	Int VertTurns;
	Double VertTurnAmount;
	
	Override Void Tick()
	{
		Super.Tick();
		If (IsFrozen())
			Return;
		
		//Time to turn.
		If (--Threshold < 0 && GetAge() > ReactionTime)
		{
			If (!Turns)
			{
				Turns = Random (4,32);
				TurnAmount = FRandom (0.25,-0.25);
			}
			If (!VertTurns)
			{
				VertTurns = Random (4,32);
				VertTurnAmount = FRandom (0.25,-0.25);
			}
			
			Angle += TurnAmount;
			Pitch += VertTurnAmount;
			Turns--;
			VertTurns--;
		}
		If (Turns < 0 && VertTurns < 0) //Finished turning, restart the turn timer.
			Threshold = Default.Threshold;
		
		SetOrigin (Level.Vec3Offset(Pos,KAI_Math.AngleToVector3D(Angle,Pitch,Speed)),False);
		
		If (!Master) //No more projectile left.
			Destroy();
	}
	//DEBUG
	/*States
	{
		Spawn:
			PLSS A -1;
			Stop;
	}*/
}

Class MVP_SmokeScreenParticle : Actor
{
	Default
	{
		Speed 2; //How fast the smoke rolls around.
		Radius 24;
		Height 48;
		ReactionTime 35; //How long the smoke lasts.
		ShadowPenaltyFactor 1.5;
		+NoGravity;
		+RollSprite;
		+ShadowBlock; //The secret sauce.
	}
	
	Override Void Tick ()
	{
		If (IsFrozen())
			Return;
		
		//Copy of the basic MF5_NOINTERACTION movement code. Since that flag also disables blockmap linking, which is needed for SHADOWBLOCK.
		If (!KAI_Math.IsEmptyVector3 (Vel))
			SetOrigin (Vec3Offset(Vel.X,Vel.Y,Vel.Z),True);
		
		ReactionTime--;
		
		//FastProjectile state progression code.
		if (Tics != -1)
		{
			If (Tics > 0) Tics--;
			While (!Tics)
			{
				If (!SetState (CurState.NextState))
				{ // Mobj was removed
					Return;
				}
			}
		}
	}
	
	States
	{
		Spawn:
			SMK3 ABCDEFG 2 A_SetRoll (Roll+Speed,SPF_INTERPOLATE);
			SMK3 G 0 A_JumpIf (ReactionTime < 0, 2);
			SMK3 G 2 A_SetRoll (Roll+Speed,SPF_INTERPOLATE);
			Goto Spawn+7;
			SMK3 HIJKLM 2
			{
				A_SetRoll (Roll+Speed,SPF_INTERPOLATE);
				A_SetSize (Radius*0.98,Height*0.98); //The hitbox size matters for SHADOWBLOCK as well.
				A_SetScale (Scale.X*0.98);
				A_FadeOut (0.02);
			}
			Stop;
	}
}

//Creates a smoke screen around itself. Can also be attached to an actor by setting it as its' master pointer.
Class MVP_SmokeScreen : Actor
{
	Default
	{
		Speed 35; //How frequently to spawn new particles.
		ReactionTime 32; //How much smoke to spawn.
		Threshold 256; //How far to spawn Smoke.
		Stamina 70; //Smoke lifespan.
		Mass 175; //How long the smoke lasts;
	}
	
	Int Timer;
	
	Override Void Tick ()
	{
		If (IsFrozen())
			Return;
		
		If (Timer > Mass)
			Destroy();
		
		If (Master)
			SetOrigin (Master.Pos,True);
		
		If (++Timer % Speed != 0 && GetAge() > 1) //Not an interval tick to spawn more smoke in. Ignore this in the first tick to immediately begin smoking.
			Return;
		
		Actor Smoke;
		//Spawn random Smoke actors on the ground, the closer to the ground, the more Smoke spawned.
		For (Int I = ReactionTime; 0 <= I; I--)
		{
			Smoke = Spawn ("MVP_SmokeScreenParticle",Vec3Offset (FRandom (Threshold,-Threshold),FRandom(Threshold,-Threshold),0));
			//Smoke.SetOrigin ((Smoke.Pos.XY,GetZAt (Smoke.Pos.X,Smoke.Pos.Y,flags:GZF_ABSOLUTEPOS)),False);
			//If the Smoke is out of bounds or too far, remove it.
			If (!Level.IsPointInLevel (Smoke.Pos) || Distance2DSquared (Smoke) > Threshold*Threshold)
				Smoke.Destroy();
			
			Smoke.Scale *= FRandom (0.8,1.25);
			Smoke.Speed *= FRandom (-1.25,1.25); //Set roll speed.
			Smoke.ReactionTime = Int(Stamina*FRandom(0.75,1.25));
			
			Smoke.Vel = (FRandom(3,-3),FRandom(3,-3),FRandom (0.2,4)); //Add some varied movement.
			
			If (Random (0,255) < 200)
				Smoke.A_SetRenderStyle (FRandom(0.8,1),STYLE_ADD);
			Else
				Smoke.A_SetRenderStyle (FRandom(0.8,1),STYLE_TRANSLUCENT);
		}
	}
}

//Check for level geometry to hide behind.
Class MVP_MBTHullDownCheck : KAI_LOFRaycast
{
	Override ETraceStatus TraceCallback ()
	{
		If (HitLevelGeometry (Results))
		{
			BadLOF = False;
			Return Trace_Stop;
		}
		
		BadLOF = True;
		Return Trace_Skip;
	}
}