Class MVP_BMPT : MVP_MBT
{
	Default
	{
		//$Title Tank Support Vehicle
		//$Category Vehicles/Tanks
		//$Sprite MMBT]1
		Health 3000;
		Tag "M6 Fire Support Vehicle";
		KAI_BaseVehicle.VehicleTurret "MVP_BMPTTurret";
	}
	Override Void UserVariableDefaults ()
	{
		Super.UserVariableDefaults();
		
		User_APSDelay = INT.MAX; //Don't shoot projectiles down practically ever.
		User_AltAPSDelay = INT.MAX; //Don't dazzle projectiles practically ever.
		User_NoSmokescreen = True; //Only the MBT turret has smoke launchers. All variants can enter hull down positions though.
		User_T72Mode = False; //No funny, this doesn't even have tossed sprites.
	}
}


Class MVP_BMPTTurret : MVP_MBTTurret
{
	Default
	{
		Health 1500;
		Height 24;
		Radius 64;
		Tag "M6-FSCV Turret";
		Mass 10000;
		FriendlySeeBlocks 80;
		MaxTargetRange 10000;
		Obituary "%o was mowed down by a tank support vehicle";
		KAI_Actor.ThreatLevel THREAT_DANGEROUS;
		AttackSound "Vehicle/APC/MGFire";
		KAI_BaseTurret.MaximumPitch -80;
		KAI_BaseTurret.MinimumPitch 10;
		KAI_BaseTurret.AttackSpeed 230;
		KAI_BaseTurret.FastAttackSpeed 250;
		KAI_BaseTurret.CombatAngleTurnRate 80;
		KAI_BaseTurret.CombatPitchTurnRate 60;
		KAI_Actor.Inaccuracy (6,6,6);
	}
	Override String GetObituary (Actor Victim, Actor Inflictor, Name MOD, Bool PlayerAttack)
	{
		If (Inflictor Is "MVP_50CalBullet")
			Return Inflictor.Obituary;
		
		Return MVP_BaseTurret.GetObituary (Victim, Inflictor, MOD, PlayerAttack);
	}
	
	Override Void PostBeginPlay()
	{
		MVP_BaseTurret.PostBeginPlay();
		MissileState = FindState ("Fire",True);
		AttackStates.Push (FindState("Fire",True));
		AttackStates.Push (FindState("Fire.ATGM",True));
		WarningZone = WarnNPCs (0,128,Self,threatlevel:HazardInfo.HAZARD_LARGE);
		APSCooldown = APSDelay = INT.MAX;
		AltAPSCooldown = AltAPSDelay = INT.MAX;
	}
	
	Override Void Tick()
	{
		Super.Tick();
		If (IsFrozen()) Return;
		
		If (ATGMCoolDown)
			ATGMCooldown--;
		
		If (MGDelay)
			MGDelay--;
		
		If (GetAge() % GameTicRate == 0) //Search for a tank every second.
			NearbyTank = SearchForTanks ();
	}
	
	Override Bool ShouldAttack (Bool NoStateJump)
	{
		If (!KAI_BaseTurret.ShouldAttack()) Return False;
		If (IsOverPitchLimits (Target,8,Target.Height/2) != ELEVATION_INBOUNDS) Return False;
		If (!bLookAllAround && Target && !CheckFOV (Target,120/2)) Return False; //Out of sight.
		If (Distance3DSquared (Target) >= MaxTargetRange*MaxTargetRange) Return False;
		
		If (!ATGMCooldown) //Try finding a strong enemy to fire a missile at.
			A_FindStrongEnemy (Target, Target, 1024);
		
		Int Threat = AssessThreatLevel (Target);
		
		If (ShouldFireMissile (Threat))
		{
			If (!NoStateJump)
				SetStateLabel ("Fire.ATGM");
			Return True;
		}
		
		If (MGDelay)
			Return False;
		
		If (!NoStateJump) //Didn't decide to fire a rocket yet, so fire the machine guns.
			SetStateLabel ("Fire");
		
		Return True;
	}
	
	//Fire a missile if the target is dangerous, if the missile would kill a lot of enemies, or if the target is very far away indeed.
	//However, if you have a friendly visible tank near you, only fire missiles at groups and distant enemies.
	Bool ShouldFireMissile (Int EnemyThreatLevel)
	{
		Int Chance = Random (0,32);
		Return (!ATGMCooldown && ((!NearbyTank && EnemyThreatLevel >= THREAT_DANGEROUS) || AttackByQuantity (Target,448) >= 200-Chance || Distance3DSquared(Target) >= 7000*7000));
	}
	
	//Searches around the BMPT for visible friendly tanks, if it finds one, and if the tanks find a BMPT, the BMPT will focus on weak enemies, and the MBT on strong ones.
	MVP_MBT SearchForTanks (Double Range = 2048)
	{
		MVP_MBT Ptr = Null;
		ForEach (Veh : KAIHandler.AllVehicles)
		{
			If (!Veh || IsDead (Veh) || IsActorHostile (Veh)) //Nonexistent, dead, or hostile.
				Continue;
			
			If (!(Veh.GetClass() == "MVP_MBT")) //Not an MBT.
				Continue;
			
			If (Distance3DSquared (Veh) > Range*Range || !CheckSight (Veh,SF_IGNOREWATERBOUNDARY)) //Too far or not visible.
				Continue;
			
			Ptr = MVP_MBT(Veh);
		}
		Return Ptr;
	}
	
	//The elevation works different on the SPAAG since it can nearly aim straight up.
	Int UpdateBMPTElevation (Int FaceDown, Int FaceStraight, Int FaceUp)
	{
		If (Pitch >= 10 && Pitch >= 5)
			Return FaceDown;
		Else If (Pitch < 5 && Pitch >= -5)
			Return FaceStraight;
		Else If (Pitch < -5)
			Return FaceUp;
		
		Return FaceStraight;
	}
	
	//Fires an ATGM at the specified offsets based on what launch tube is next to fire.
	Void A_BMPTFire()
	{
		Double ATGMPos;
		Switch (ATGMPosition) //Update fire coordinates based on current pos.
		{
			Case ATGM_POD1:
				ATGMPos = 48;
				Break;
			Case ATGM_POD2:
				ATGMPos = 32;
				Break;
			Case ATGM_POD3:
				ATGMPos = -32;
				Break;
			Case ATGM_POD4:
				ATGMPos = -48;
				Break;
		}
		
		A_StartSound ("Vehicle/Tank/RocketFire",CHAN_WEAPON,CHANF_OVERLAP,1.0,0.5);
		Actor Missile = A_SpawnProjectile ("MVP_ATGM",24,ATGMPos,flags:CMF_AIMDIRECTION,Pitch);
		Missile.Tracer = Target;
		
		ATGMPosition++; //Loop to next missile position.
		If (ATGMPosition > ATGM_POD4) //If the position is overflowed, set it back to 0.
			ATGMPosition = ATGM_POD1;
		
		ATGMCooldown = GameTicRate*Random (8,10);
	}
	
	Int MGDelay; //Delay firing the machinegun a bit right after firing a rocket.
	Int ATGMCooldown;
	Int ATGMPosition; //Spawns the ATGM at one of 4 rocket tubes, cycles around with every rocket fired.
	Enum ATGMPositions //The positions to spawn the missile at, cycled through.
	{
		ATGM_POD1,
		ATGM_POD2,
		ATGM_POD3,
		ATGM_POD4,
	}
	MVP_MBT NearbyTank; //A pointer to the closest tank.
	
	States
	{
		Spawn:
			MBT1 A 0;
			MBT1 # 1
			{
				RotateToVehicle(RTVF_ADDANGLE);
				KAI_Look (maxseedist:MaxTargetRange,8196,bLookAllAround ? 360 : 120,extraflags:KAIL_CHASETARGET);
				Frame = UpdateBMPTElevation (6,0,3); //G, A, D
			}
			Loop;
		See:
			MBT1 # 1
			{
				DoCombatTraverse();
				RotateToVehicle();
				KAI_LandVehicleChase (flags:LVC_MAKEFRIENDSIDLE,chaseflags:CHF_DONTMOVE);
				UpdateTurretSnapTimer();
				
				Frame = UpdateBMPTElevation (6,0,3); //G, A, D
			}
			Loop;
		Fire: //Wait, it's all APC ?
			MBT1 ######## 1
			{
				Frame = UpdateBMPTElevation (6,0,3); //G, A, D
			}
			MBT1 # 3 Light ("50CalFiringLight") Bright //Right shot
			{
				A_StartSound (AttackSound,CHAN_WEAPON,CHANF_OVERLAP,1.0,0.3);
				Actor Proj = A_SpawnProjectile ("MVP_50CalBullet",12,-8,flags:CMF_AIMDIRECTION,Pitch); //pew pew
				AddProjectileSpread (Proj,(0.8,-0.8),(1.0,-1.0));
				A_SpawnItemEx ("MVP_BulletCasing",-32,32,8,FRandom(2,-2),FRandom(8,14),FRandom(6,12));
				Frame = UpdateBMPTElevation (7,1,4); //H, B, E
			}
			MBT1 # 3 Light ("50CalFiringLight") Bright //Left shot
			{
				A_StartSound (AttackSound,CHAN_WEAPON,CHANF_OVERLAP,1.0,0.3);
				Actor Proj = A_SpawnProjectile ("MVP_50CalBullet",12,8,flags:CMF_AIMDIRECTION,Pitch); //pew pew
				AddProjectileSpread (Proj,(0.8,-0.8),(1.0,-1.0));
				A_SpawnItemEx ("MVP_BulletCasing",-32,-32,8,FRandom(2,-2),FRandom(-8,-14),FRandom(6,12));
				Frame = UpdateBMPTElevation (8,2,5); //I, C, F
			}
			MBT1 # 1
			{
				//If you have no target, or it's dead.
				If (!Target || IsDead (Target))
				{
					A_ClearTarget();
					LookForPlayers (True); //Look for a new target.
				}
				
				If (Random2[pr_monsterrefire]() < 48 &&
				//If the target is too high or low to shoot.
				((Target && IsOverPitchLimits (Target,12,Target.Height/2) != ELEVATION_INBOUNDS) ||
				!KAI_TurretCheckLOF (Target,0,0,(0,-8,12),0,"MVP_50CalBullet")))
				{
					A_ClearTarget();
					Return ResolveState ("See");
				}
				
				HandleChaseTimer();
				
				Frame = UpdateBMPTElevation (6,0,3); //G, A, D
				
				If (!ATGMCooldown && GetAge() % GameTicRate*2 == 0)
				{
					A_FindStrongEnemy (Target, Target, 1024); //Try finding a strong enemy to fire a missile at.
					If (Target && ShouldFireMissile (AssessThreatLevel (Target)))
						Return ResolveState ("Fire.ATGM");
				}
				Return State (Null);
			}
			MBT1 # 0 KAI_TurretRefire (48,"See",True,fov:90/2);
			Goto Fire+8;
		Fire.ATGM:
			MBT1 # 0
			{
				If (WarningZone)
				{
					WarningZone.MaxTargetRange = 512; //Alert NPCs in an extra wide radius.
					If (MVP_HazardZone(WarningZone).Hazard)
					{
						MVP_HazardZone(WarningZone).Hazard.Range = WarningZone.MaxTargetRange;
						MVP_HazardZone(WarningZone).Hazard.Level = HazardInfo.HAZARD_HUGE;
						MVP_HazardZone(WarningZone).Hazard.CustomTags.Push ("Explosive"); //It's about to fire a missile.
					}
				}
				TurretAttackSpeed = GetDefaultByType("MVP_ATGM").Speed; FastTurretAttackSpeed = GetDefaultByType("MVP_ATGM").FastSpeed; //Use ATGM speed.
				A_StartSound ("Vehicle/Tank/RocketLock",CHAN_VOICE,attenuation:0.5);
			}
			//4 seconds, updates every tick.
			MBT1 ############################################################################################################################################ 1
			{
				Frame = UpdateBMPTElevation (6,0,3); //G, A, D
			}
			MBT1 # 1
			{
				A_BMPTFire();
				TurretAttackSpeed = Default.TurretAttackSpeed; //Reset prediction speeds to the machine guns.
				FastTurretAttackSpeed = Default.FastTurretAttackSpeed;
				MGDelay = GameTicRate*Random (1,2);
				If (WarningZone)
				{
					WarningZone.MaxTargetRange = 128;
					Let Hazard = MVP_HazardZone(WarningZone).Hazard;
					If (Hazard)
					{
						Hazard.Range = WarningZone.MaxTargetRange;
						Hazard.Level = HazardInfo.HAZARD_LARGE;
						Hazard.CustomTags.Delete (Hazard.CustomTags.Find("Explosive")); //Remove tag.
					}
				}
			}
			//MBT1 ##### 1 {Frame = UpdateBMPTElevation (6,0,3); /*G, A, D*/}
			//Goto Fire.ATGM+141; //DEBUG: Loop the missile launcher sequence to test the changing pod positions.
			Goto See;
	}
}