//To do
//Make the generic big explosion actor, and the army car specific debris actors, who should be able to act as gravity affected projectiles as well.
//Figure out why all army cars, friendly or hostile, are made aware of the players' presense right after being spawned, even when the player is not in sight.

Class MVP_ArmyCar : MVP_BaseVehicle
{
	Default
	{
		//$Title Army Car
		//$Category Vehicles
		//$Sprite MCR1A1
		//Most of the actors' properties are basically the default properties for the base class.
		Speed 12;
		FastSpeed 18;
		XScale 0.65;
		YScale 0.541666; //0.65 / 1.2
		Health 800;
		GibHealth 200;
		Tag "Army Car";
		MVP_BaseVehicle.VehicleTurret "MVP_PainRay";
		+MissileEvenMore
		+MVP_BaseVehicle.Transport;
	}
	
	Override Void PostBeginPlay ()
	{
		TurretOffsets = (0,0,1.25);
		Super.PostBeginPlay();
		
		MarinesDeployed = User_NoMarines;
		If (HasSupplies()) SetTag ("Army Car (Open Trunk)");
		
		//Initialize headlights
			//Front left headlight
			Headlights.Push(MVP_HeadLight(Spawn("MVP_Headlight",Pos)));
			HeadLights[0].Offset = (28,12,8);
			Headlights[0].Master = Self;
			//Front right headlight
			Headlights.Push(MVP_HeadLight(Spawn("MVP_Headlight",Pos)));
			HeadLights[1].Offset = (-28,12,8);
			Headlights[1].Master = Self;
			
			//Back left headlight
			Headlights.Push(MVP_HeadLight(Spawn("MVP_Headlight",Pos)));
			HeadLights[2].Offset = (28,40,8);
			Headlights[2].Master = Self;
			HeadLights[2].IsBacklight = True;
			HeadLights[2].Args[DynamicLight.LIGHT_GREEN] = HeadLights[2].Args[DynamicLight.LIGHT_BLUE] = 0;
			HeadLights[2].Args[DynamicLight.LIGHT_INTENSITY] = 32;
			HeadLights[2].SpotInnerAngle = 40;
			Headlights[2].SpotOuterAngle = 80;
			//Back right headlight
			Headlights.Push(MVP_HeadLight(Spawn("MVP_Headlight",Pos)));
			HeadLights[3].Offset = (-28,40,8);
			Headlights[3].Master = Self;
			HeadLights[3].IsBacklight = True;
			HeadLights[3].Args[DynamicLight.LIGHT_GREEN] = HeadLights[3].Args[DynamicLight.LIGHT_BLUE] = 0;
			HeadLights[3].Args[DynamicLight.LIGHT_INTENSITY] = 32;
			HeadLights[3].SpotInnerAngle = 40;
			Headlights[3].SpotOuterAngle = 80;
		
		If (CustomMarinesAvailable())
			Console.Printf ("It's marinatin' time.");
		Else
			Console.Printf ("Forever alone.");
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		If (IsFrozen()) Return;
		
		If (Turret && !IsDead (Turret) && !Turret.Target) Turret.Angle = Self.Angle;
		
		If (WaitTimer) WaitTimer--;
		
		If (HeadLightsOn)
			TurnHeadlightsOn();
		Else
			TurnHeadlightsOff();
	}
	
	Override Void SpawnVehicleTurret ()
	{
		If (User_PainRay)
			Super.SpawnVehicleTurret();
	}
	
	Override Void UserVariableDefaults()
	{
		If (User_SupplyAmount <= 0) User_SupplyAmount = 5;
	}
	
	/*Supply system:
	This is the code that makes the car give different types of items to the player when they use it,
	you can change what kind of items each supply type uses by adding more User.GiveInventory lines for each type, or replace the existing ones.
	For example, if you mod adds a rocker launcher with custom "SmartRocketAmmo" and "SmartRocketBox" ammo types, that's how you can make cars
	with User_SupplyType set to Ammo give those smart rockets to the player, instead of the vanilla ones.
	==============*/
	Override Bool Used (Actor User)
	{
		Super.Used (User);
		
		//Non-existent users, cars with no supplies, used up cars, hostile cars, and dead cars GTFO.
		If (!User || !HasSupplies() || User_SupplyAmount <= 0 || !bFriendly || IsDead (Self))
			Return False;
		
		//If the car is friendly and not in deathmatch, or if in deathmatch and the player that used the car is its' friend.
		If (!Deathmatch || Deathmatch && User.Player && User.Player.Mo.PlayerNumber() == FriendPlayer)
		{
			//Ammo drops.
			If (User_SupplyType ~== "Ammo" || User_SupplyType ~== "Ammunition")
			{
				A_StartSound ("Vehicle/ArmyCar/Crate");
				User.GiveInventory ("Clip",50);
				User.GiveInventory ("Shell",8);
				User.GiveInventory ("RocketAmmo",1);
				User_SupplyAmount--;
				//Only go back to spawn and wait there if the car ISN'T already stopped to drop troops.
				If (!IsInState ("DeployMarines") && !IsInState ("Spawn") && !IsPatrolling())
				{a_log ("going to spawn");
					WaitTimer = 35*2;
					SetStateLabel ("Spawn");
				}
				Return True;
			}
			//Health drops.
			Else If (User_SupplyType ~== "Health" || User_SupplyType ~== "First Aid" || User_SupplyType ~== "FirstAid")
			{
				//Dont waste uses if the player has 100+ health already.
				If (User.Player && User.Player.Health < 100)
				{
					A_StartSound ("Vehicle/ArmyCar/Crate");
					User.GiveBody (25,100); //Basically acts like the vanilla Medikit.
					User_SupplyAmount--;
					If (!IsInState ("DeployMarines") && !IsInState ("Spawn") && !IsPatrolling())
					{
						WaitTimer = 35*2;
						SetStateLabel ("Spawn");
					}
					Return True;
				}
			}
			//Armor drops, I love ZDoom's armor systen.
			Else If (User_SupplyType ~== "Armor")
			{
				A_StartSound ("Vehicle/ArmyCar/Crate");
				User.GiveInventory ("GreenArmor",1);
				User_SupplyAmount--;
				If (!IsInState ("DeployMarines") && !IsInState ("Spawn") && !IsPatrolling())
				{
					WaitTimer = 35*2;
					SetStateLabel ("Spawn");
				}
				Return True;
			}
			//You can define more supply types here if you want, such as combinations of armaments.
		}
		
		Return False;
	}
	
	Bool HasSupplies()
	{
		Return (User_SupplyType && !(User_SupplyType ~== "" || User_SupplyType ~== "None"));
	}
	
	String User_SupplyType; //Maybe I could make friendly cars carrying supplies follow the player around after dropping off their marines.
	Int User_SupplyAmount; //The amount of times a player can use a car carrying supplies before it runs out. 5 is the default.
	
	Actor[4] Marines; //Keeps track of the marines the car deployed.
	Bool MarinesDeployed; //Has the car already dropped its' marines ?
	Bool User_PainRay; //The car carries a non lethal weapon that pain locks enemies, similar to the Active Denial System.
	Bool User_NoMarines; //The car spawns with no marines in it.
	Int WaitTimer; //Makes the car stop for a bit after picking up supplies, so you don't have to chase it.
	States
	{
		Spawn:
			MCR1 A 0; //Has to exist to shut GZDoom up.
			#### A 1
			{
				//If the car is carrying supplies, change all of its' non-death sprites to have an open trunk.
				If (HasSupplies())
					Sprite = GetSpriteIndex ("MCR2");
				Else
					Sprite = GetSpriteIndex ("MCR1");
				
				A_StopSound (CHAN_MOVING);
				A_StartSound("Vehicle/ArmyCar/Idle",CHAN_IDLING,CHANF_LOOPING,attenuation:0.8);
				A_LookEx (0,0,8192,3072);
				
				If (!IsPatrolling() && WaitTimer <= 0)
					SetStateLabel ("See");
			}
			Loop;
		See:
			#### DDDDCCCCBBBBAAAA 2
			{
				A_StopSound (CHAN_IDLING);
				A_StartSound ("Vehicle/ArmyCar/Moving",CHAN_MOVING,CHANF_LOOPING,attenuation:0.8);
				console.printf ("reaction time: %d",reactiontime);
				LookExParams ArmyCarSight;
				ArmyCarSight.MaxDist = 2048*FRandom (1.0,1.25);
				
				If (Target && MarinesDeployed && !User_PainRay || Target && (Health <= 200 || (IsPowerful (Target))))
					If (Target.IsVisible(Self, True))
						bFrightened = True;
				
				If (bFrightened)
					MinMissileChance = bMissileMore = 1;
				
				FollowPlayerControl();
				
				If (!MarinesDeployed)
					A_Chase (Null,"DeployMarines",CHF_DONTIDLE | (((!Target || !MarinesDeployed) && !IsPatrolling()) ? CHF_NORANDOMTURN : 0));
				Else
					A_Chase (Null,Null,CHF_DONTIDLE | (((!Target || !MarinesDeployed) && !IsPatrolling()) ? CHF_NORANDOMTURN : 0));
				
				MinMissileChance = Default.MinMissileChance;
				bFrightened = bMissileMore = False;
			}
			Loop;
		DeployMarines:
			#### A 0 A_JumpIf (MarinesDeployed,"See"); //Abort the attack if you are supposed to be empty.
			#### A 0 //Temporarily make the car bigger, to see if any of the marines would get stuck anywhere.
			{
				A_SetSize (Radius*1.75);
				
				If (!TestMobjLocation()) //If they would be stuck, cancel the drop.
				{
					A_SetSize (Default.Radius);
					Return ResolveState ("See");
				}
				
				A_SetSize (Default.Radius);
				
				Return State (Null);
			}
			#### E 5 A_StartSound ("Vehicle/ArmyCar/DoorHandle",flags:CHANF_OVERLAP);
			#### F 8;
			#### G 12 A_StartSound ("Vehicle/ArmyCar/DoorSlam",flags:CHANF_OVERLAP);
			#### G 17
			{
				//Store the marines spawned in an array, just in case they need to be kept track of.
				Marines[0] = SpawnMarine ((Default.Radius*0.70,48),True); //Front left door.
				Marines[1] = SpawnMarine ((-Default.Radius*0.75,-48),True); //Back right door.
				Marines[2] = SpawnMarine ((-Default.Radius*0.75,48),True); //Back left door.
				MarinesDeployed = True;
			}
			#### G 12 A_StartSound ("Vehicle/ArmyCar/DoorHandle",flags:CHANF_OVERLAP);
			#### F 8;
			#### E 5;
			Goto See;
		Death:
			MCR1 H 4
			{
				A_Explode (128,80,XF_HURTSOURCE|XF_EXPLICITDAMAGETYPE,True,damagetype:'Explosion');
				A_StartSound ("SFX/Explosion",CHAN_BODY,attenuation:0.6);
				A_StopSound (CHAN_IDLING);
				A_StopSound (CHAN_MOVING);
				
				If (Turret)
					Turret.A_ChangeVelocity (FRandom (12,-12),FRandom (12,-12),FRandom (0,6),CVF_RELATIVE);
				
				//Spawn parts of the vehicle as debris.
				//A_SpawnItemEx ("MVP_ArmyCarDoor",-8,-Radius,6,FRandom(-0.2,0.2),FRandom (8,14),FRandom (-1,1),flags:SXF_SETTARGET);
				//A_SpawnItemEx ("MVP_ArmyCarHood",24,0,8,FRandom(-0.5,0.5),FRandom (-0.5,0.5),FRandom (8,32),flags:SXF_SETTARGET);
				
				//Don't spawn the spare wheel if the car had a back open trunk, since if it did, that would mean that it had no spare wheel visible on it.
				//If (User_SupplyType == 0)
				//A_SpawnItemEx ("MVP_ArmyCarWheel",-32,0,10,FRandom(-6,-16),FRandom (-2,2),FRandom (-0.5,4),flags:SXF_SETTARGET);
			}
			MCR1 IJ 6;
			MCR1 KLM 8;
			MCR1 M -1;
			Stop;
		XDeath:
			MCR1 N 0
			{
				Int RandomFlames; RandomFlames = Random (2,6);
				Actor Flame;
				Vector3 SpawnPos;
				
				Height = 34;
				
				/*Spawn ("MVP_BigExplosion",Pos); //BigExplosion is a generic effect, not specific to this vehicle.
				//Spawn a random amount of flames around the car wreck.
				For (Int I = 0; I < RandomFlames; I++)
				{
					SpawnPos = Vec3Offset(FRandom (-Radius,Radius),FRandom (-Radius,Radius),0);
					Flame = Spawn ("MVP_Flame",SpawnPos); //So is the flame actor.
					
					If (!Level.IsPointInLevel (Flame.Pos))
						Flame.Destroy();
				}*/
				
				If (Turret)
					Turret.A_ChangeVelocity (FRandom (16,-16),FRandom (16,-16),FRandom (0,32),CVF_RELATIVE);
			}
			MCR1 N -1;
			Stop;
		//So the conditional sprite change for the open trunk doesn't crash the game.
		Sprites:
			TNT1 A 0 A_Log ("The army car shouldn't be in this state.");
			MCR1 ABCDEFG 0;
			MCR2 ABCDEFG 0;
			Stop;
	}
}