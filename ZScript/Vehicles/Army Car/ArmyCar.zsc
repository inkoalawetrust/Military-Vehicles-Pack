Class MVP_ArmyCar : MVP_BaseVehicle
{
	Default
	{
		//$Title Army Car
		//$Category Vehicles/Army Car
		//$Sprite MCR1A1
		//Most of the actors' properties are basically the default properties for the base class.
		Speed 16;
		FastSpeed 24;
		Health 800;
		GibHealth 200;
		WoundHealth 200;
		Tag "Army Car";
		KAI_BaseVehicle.VehicleTurret "MVP_PainRay";
		KAI_Actor.ThreatLevel THREAT_ABOVENORMAL;
		KAI_Actor.ActorFollowDist 384;
		DamageFactor "MarineGrenade", 1.25;
		DamageFactor "Grenade", 1.25;
		DamageFactor "RifleBullet", 0.9;
		DamageFactor "SmallRifleBullet", 0.75;
		ActiveSound "Vehicle/ArmyCar/Moving";
		DeathSound "SFX/Explosion";
		//+MissileEvenMore
		+KAI_BaseVehicle.Transport;
	}
	
	Override Void PostBeginPlay ()
	{
		TurretOffsets = (0,0,1.25);
		Super.PostBeginPlay();
		
		If (!CanAttack()) ThreatLevel = THREAT_NONE;
		If (HasSupplies()) SetTag ("Army Car (Open Trunk)");
		
		MissileState = FindState ("DeployMarines"); //Car uses a custom ranged attack state, these states are set so that internal flags like AvoidMelee work properly.
		AttackStates.Push (FindState("DeployMarines",True));
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		If (IsFrozen()) Return;
		
		If (Turret && !IsDead (Turret) && !Turret.Target) Turret.Angle = Self.Angle;
		
		If (WaitTimer) WaitTimer--;
		
		If (DeployTimer) DeployTimer--;
	}
	
	Mixin MVP_ArmyCar_Smoke;
	
	Override String GetObituary (Actor Victim, Actor Inflictor, Name MOD, Bool PlayerAttack)
	{
		If (Inflictor && Inflictor != Self) //If another actor get killed the player on your behalf.
			Return Inflictor.Obituary;
		
		Return Super.GetObituary (Victim, Inflictor, MOD, PlayerAttack);
	}
	
	Override Void SpawnVehicleTurret ()
	{
		If (User_PainRay)
			Super.SpawnVehicleTurret();
	}
	
	Override Void OnTurretDeath (Actor DeadTurret, Bool Removed)
	{
		Super.OnTurretDeath(DeadTurret,Removed);
		
		User_PainRay = False; //No more painray.
		If (!CanAttack()) ThreatLevel = THREAT_NONE; //Check if the car has no attacks left to lower the threat level.
	}
	
	Override Void SpawnHeadlights ()
	{
		Headlights.Push(SpawnVehicleHeadlight(Self,(64,28,8)));
		Headlights.Push(SpawnVehicleHeadlight(Self,(64,-28,8)));
		Headlights.Push(SpawnVehicleHeadlight(Self,(40,28,8),VHSF_BACKLIGHT,(255,0,0),32,(40,80)));
		Headlights.Push(SpawnVehicleHeadlight(Self,(40,-28,8),VHSF_BACKLIGHT,(255,0,0),32,(40,80)));
	}
	
	Override Void UserVariableDefaults()
	{
		Super.UserVariableDefaults();
		If (User_SupplyAmount <= 0) User_SupplyAmount = 5;
	}
	
	Override Bool CanAttack ()
	{
		Return (!(CurSector.Flags & Sector.SECF_NOATTACK) && (!User_NoMarines || User_PainRay));
	}
	
	Override Bool ShouldAttack (Bool NoStateJump)
	{
		If (!User_NoMarines && DeployTimer <= 0 && KAI_CheckMissileRange(Target) && Target != Goal && !(IsPatrolling(Self) && bChaseGoal))
		{
			If (!NoStateJump) SetStateLabel ("DeployMarines");
			Return True; //Tell KAI_LandVehicleChase to end.
		}
		
		Return False;
	}
	
	Override Bool StayStillAndShoot (Actor CheckSightFrom)
	{
		If (!Turret || IsDead(Turret)) Return False;
		If (Random[pr_cajump](0,255) >= 3) Return False; //Luck is not on your side.
		If (Turret.Target && Turret.Distance3DSquared(Turret.Target) > Turret.MaxTargetRange*Turret.MaxTargetRange) Return False; //Too far
		If (Turret.Health <= Turret.SpawnHealth()/4) Return False; //The pain ray is really weak, so don't risk losing it.
		If (!User_NoMarines || User_NoMarines && !User_PainRay) Return False; //Still have marines in, or no pain ray, so don't stop.
		//Don't stop if you or your turrets' target is more dangerous than you.
		If (AssessThreatLevel (Target, False) > Self.ThreatLevel || AssessThreatLevel (Turret.Target, False) > Self.ThreatLevel) {a_log ("too strong");Return False;}
		
		//And at last, run the standard KAI vehicle checks.
		If (KAI_BaseVehicle.StayStillAndShoot(CheckSightFrom))
		{
			A_StopSound (CHAN_MOVING);
			A_StartSound("Vehicle/ArmyCar/Idle",CHAN_IDLING,CHANF_LOOPING,attenuation:0.8);
			ChaseTimer = Random (16,32);
			StayStillDelay = ChaseTimer+(Random (2,4)*GameTicRate);
			SetStateLabel ("StickAround");
			Return True;
		}
		
		Return False;
	}
	
	/*Supply system:
	This is the code that makes the car give different types of items to the player when they use it,
	you can change what kind of items each supply type uses by adding more User.GiveInventory lines for each type, or replace the existing ones.
	For example, if you mod adds a rocker launcher with custom "SmartRocketAmmo" and "SmartRocketBox" ammo types, that's how you can make cars
	with User_SupplyType set to Ammo give those smart rockets to the player, instead of the vanilla ones.
	Oh yes, I also had to copy and paste this code for the prop version of the car, so you will need to copy this Used() override here.
	Then go to ZScript/Vehicles/Army Car/OtherActors.zsc, and replace the Used() virtual of MVP_ArmyCarProp as well.
	==============*/
	Override Bool Used (Actor User)
	{
		Super.Used (User);
		
		//NPCs, cars with no supplies, used up cars, hostile cars, and dead cars GTFO.
		If (!(User && User.Player) || !HasSupplies() || User_SupplyAmount <= 0 || !bFriendly || IsDead (Self))
			Return False;
		
		//If the car is friendly and not in deathmatch, or if in deathmatch and the player that used the car is its' friend.
		If (!Deathmatch || Deathmatch && User.Player && User.Player.Mo.PlayerNumber() == FriendPlayer)
		{
			//Ammo drops.
			If (User_SupplyType ~== "Ammo" || User_SupplyType ~== "Ammunition")
			{
				A_StartSound ("Vehicle/ArmyCar/Crate");
				User.GiveInventory ("Clip",50);
				User.GiveInventory ("Shell",8);
				User.GiveInventory ("RocketAmmo",1);
				User_SupplyAmount--;
				//Only go back to spawn and wait there if the car ISN'T already stopped to drop troops.
				If (!IsInState (Self,"DeployMarines") && !IsInState (Self,"Spawn") && !IsPatrolling(Self))
				{
					WaitTimer = 35*2;
					SetStateLabel ("Spawn");
				}
				Return True;
			}
			//Health drops.
			Else If (User_SupplyType ~== "Health" || User_SupplyType ~== "First Aid" || User_SupplyType ~== "FirstAid")
			{
				//Dont waste uses if the player has 100+ health already.
				If (User.Player.Health < 100-1)
				{
					A_StartSound ("Vehicle/ArmyCar/Crate");
					User.GiveBody (25,100); //Basically acts like the vanilla Medikit.
					User_SupplyAmount--;
					If (!IsInState (Self,"DeployMarines") && !IsInState (Self,"Spawn") && !IsPatrolling(Self))
					{
						WaitTimer = 35*2;
						SetStateLabel ("Spawn");
					}
					Return True;
				}
			}
			//Armor drops, I love ZDoom's armor systen.
			Else If (User_SupplyType ~== "Armor" || User_SupplyType ~== "Armour")
			{
				A_StartSound ("Vehicle/ArmyCar/Crate");
				User.GiveInventory ("GreenArmor",1);
				User_SupplyAmount--;
				If (!IsInState (Self,"DeployMarines") && !IsInState (Self,"Spawn") && !IsPatrolling(Self))
				{
					WaitTimer = 35*2;
					SetStateLabel ("Spawn");
				}
				Return True;
			}
			//You can define more supply types here if you want, such as combinations of armaments.
		}
		
		Return False;
	}
	
	Bool HasSupplies()
	{
		Return (User_SupplyType && !(User_SupplyType ~== "" || User_SupplyType ~== "None"));
	}
	
	String User_SupplyType; //What type of supplies the car carries, if any. Maybe I could make friendly cars carrying supplies follow the player around after dropping off their marines.
	Int User_SupplyAmount; //The amount of times a player can use a car carrying supplies before it runs out. 5 is the default.
	Bool User_PainRay; //The car carries a non lethal weapon that pain locks enemies, similar to the Active Denial System.
	Bool User_NoMarines; //The car spawns with no marines in it.
	Int User_MarineTID; //The TID to assign to marines spawned by this vehicle, for ACS scripting.
	
	Actor[4] Marines; //Keeps track of the marines the car deployed.
	Int WaitTimer; //Makes the car stop for a bit after picking up supplies, so you don't have to chase it.
	Int DeployTimer; //Stops infinite recursions when trying to drop marines.
	Int Recursions; //Keeps track of how many times the vehicle tried spawning a marine in an invalid spot, to stop infinite recursions.
	DynamicLight Light;
	States
	{
		Spawn:
			MCR1 A 0; //Has to exist to shut GZDoom up.
			#### A 1
			{
				//If the car is carrying supplies, change all of its' non-death sprites to have an open trunk.
				If (HasSupplies())
					Sprite = GetSpriteIndex ("MCR2");
				Else
					Sprite = GetSpriteIndex ("MCR1");
				
				A_StopSound (CHAN_MOVING);
				A_StartSound("Vehicle/ArmyCar/Idle",CHAN_IDLING,CHANF_LOOPING,attenuation:0.8);
				If (WaitTimer <= 0) KAI_Look (maxseedist:DEFAULT_SEEDISTANCE,DEFAULT_HEARDISTANCE);
				
				If (!IsPatrolling(Self) && Target && WaitTimer <= 0)
					SetStateLabel ("See");
			}
			Loop;
		Idle:
			#### DDDDCCCCBBBBAAAA 2
			{
				A_StopSound (CHAN_IDLING);
				A_StartSound ("Vehicle/ArmyCar/Moving",CHAN_MOVING,CHANF_LOOPING,attenuation:0.8);
				KAI_Wander (48,768,48,0.25);
				KAI_Look (maxseedist:DEFAULT_SEEDISTANCE,DEFAULT_HEARDISTANCE);
			}
		See:
			#### DDDDCCCCBBBBAAAA 2
			{
				A_StopSound (CHAN_IDLING);
				A_StartSound ("Vehicle/ArmyCar/Moving",CHAN_MOVING,CHANF_LOOPING,attenuation:0.8);
				
				MoveToParams Params;
				Params.DetourFactor = 0.70;
				Params.Attempts = 32;
				Params.StepThreshold = 48;
				Params.RunRad = 384;
				
				KAI_LandVehicleChase(chaseflags:CHF_DONTIDLE,moveparams:Params);
				
				Return State (Null);
			}
			Loop;
		DeployMarines:
			#### A 0 A_JumpIf (User_NoMarines,"See"); //Abort the attack if you are supposed to be empty.
			#### A 0 //Temporarily make the car bigger, to see if any of the marines would get stuck anywhere.
			{
				A_SetSize (Radius*1.75);
				
				If (Recursions >= MARINE_RECURSIONS)
				{
					DeployTimer = 35;
					A_SetSize (Default.Radius);
					Return ResolveState ("See");
				}
				
				If (!TestMobjLocation()) //If they would be stuck, cancel the drop.
				{
					Recursions++;
					A_SetSize (Default.Radius);
					Return ResolveState ("See");
				}
				
				A_SetSize (Default.Radius);
				Recursions++;
				
				Return State (Null);
			}
			#### E 5 A_StartSound ("Vehicle/ArmyCar/DoorHandle",flags:CHANF_OVERLAP);
			#### F 8;
			#### G 12 A_StartSound ("Vehicle/ArmyCar/DoorSlam",flags:CHANF_OVERLAP);
			#### G 17
			{
				//Store the marines spawned in an array, just in case they need to be kept track of.
				Marines[0] = SpawnMarine ((Default.Radius*0.70,-56,0),User_PainRay); //Front left door.
				Marines[1] = SpawnMarine ((-Default.Radius*0.75,-56,0),User_PainRay); //Back right door.
				Marines[2] = SpawnMarine ((-Default.Radius*0.75,56,0),User_PainRay); //Back left door.
				If (User_MarineTID != 0)
				{
					For (Int I = Marines.Size()-1; I >= 0; I--)
					{
						If (Marines[I])
							Marines[I].ChangeTID(User_MarineTID);
					}
				}
				User_NoMarines = True;
				If (!CanAttack()) ThreatLevel = THREAT_NONE; //Check if the car has no attacks left to lower the threat level.
			}
			#### G 12 A_StartSound ("Vehicle/ArmyCar/DoorHandle",flags:CHANF_OVERLAP);
			#### F 8;
			#### E 5;
			Goto See;
		Death:
			MCR1 H 4 Bright
			{
				Light = DynamicLight(Spawn ("PointLight",Vec3Offset (0,0,8)));
				If (Light)
				{
					Light.Args[3] = 192; //Intensity
					Light.Args[0] = 226; Light.Args[1] = 195; Light.Args[2] = 142; //RGB
				}
				A_Explode (128,80,XF_HURTSOURCE|XF_EXPLICITDAMAGETYPE,True,damagetype:'Explosion');
				A_StartSound ("SFX/Explosion",CHAN_BODY,attenuation:0.6);
				A_StopSound (CHAN_IDLING);
				A_StopSound (CHAN_MOVING);
				
				If (Turret && !IsDead(Turret))
				{
					Turret.SetOrigin ((Turret.Pos.X,Turret.Pos.Y,Pos.Z+Height+2),False);
					Turret.A_ChangeVelocity (FRandom (12,-12),FRandom (12,-12),FRandom (6,10),CVF_RELATIVE);
				}
				
				//Spawn parts of the vehicle as debris.
				A_SpawnItemEx ("MVP_ArmyCarDoor",-Default.Radius*0.75,-48,32,FRandom(-0.3,0.3),FRandom (-16,-32),FRandom (4,12),flags:SXF_SETTARGET);
				A_SpawnItemEx ("MVP_ArmyCarHood",70,0,38,FRandom(-1,1),FRandom (-1,1),FRandom (8,32),flags:SXF_SETTARGET);
				
				//Don't spawn the spare wheel if the car had a back open trunk, since if it did, that would mean that it had no spare wheel visible on it.
				If (!HasSupplies())
					A_SpawnItemEx ("MVP_ArmyCarWheel",-96,0,38,FRandom(-10,-16),FRandom (-2,2),FRandom (-0.5,4),flags:SXF_SETTARGET);
			}
			MCR1 IJ 6 Bright {If (Light) Light.Args[3]-= 38.4;}
			MCR1 KL 8 Bright {If (Light) Light.Args[3]-= 38.4;}
			TNT1 A 0 {If (Light) Light.Destroy();}
			MCR1 M 8;
			MCR1 M -1;
			Stop;
		XDeath:
			MCR1 N 0
			{
				Height = 34;
				
				Spawn ("MVP_BigExplosion",Pos); //BigExplosion is a generic effect, not specific to this vehicle.
				
				//Spawn a random amount of flames around the car wreck.
				SpawnDeathFlames();
				
				If (Turret && !IsDead(Turret))
				{
					Turret.SetOrigin ((Turret.Pos.X,Turret.Pos.Y,Pos.Z+Height+2),False);
					Turret.A_ChangeVelocity (FRandom (12,-12),FRandom (12,-12),FRandom (16,32),CVF_RELATIVE);
				}
			}
			MCR1 N -1;
			Stop;
		//So the conditional sprite change for the open trunk doesn't crash the game.
		Sprites:
			TNT1 A 0 A_Log ("The army car shouldn't be in this state.");
			MCR1 ABCDEFG 0;
			MCR2 ABCDEFG 0;
			Stop;
	}
}

Mixin Class MVP_ArmyCar_Smoke
{
	Override Bool SpawnDamageSmoke()
	{
		If (!Super.SpawnDamageSmoke()) Return False;
		Vector3 SpawnPos = Vec3Angle (-70,GetNearestCardinalAngle());
		SpawnPos = Level.Vec3Offset (SpawnPos,(FRandom(-4,4),FRandom(-4,4),38));
		Actor Smoke = Spawn ("MVP_BrightFireParticle",SpawnPos);
		Smoke.Roll = FRandom(-180,180);
		Smoke.A_SetScale (FRandom(0.7,1.2));
		Smoke.Vel.Z = FRandom (1,4);
		Return True;
	}
}