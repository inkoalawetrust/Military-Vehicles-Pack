//To do:
//Make the destructible and destroyed army car props.

Class MVP_PainRay : MVP_BaseTurret
{
	Default
	{
		Health 350;
		XScale 0.65;
		YScale 0.541666; //0.65 / 1.2
		Height 64;
		DeathHeight 16;
		Radius 24;
		MaxTargetRange 1536;
		DamageFactor "Electric", 1.2;
		Obituary "%o was killed by a non-lethal weapon, somehow";
		Tag "Pain Ray";
		+MissileMore;
		+LookAllAround;
		+MVP_BaseTurret.FallOnDeath;
	}
	Int Patience;
	Actor WarningZone;
	
	Override Void OnDestroy()
	{
		Super.OnDestroy();
		
		If (WarningZone) WarningZone.Destroy();
	}
	States
	{
		Spawn:
			MCR3 H 1 A_LookEx (0,0,8192,3072);
			Loop;
		See:
			MCR3 H 1
			{
				LookExParams PainRaySight;
				PainRaySight.MaxDist = 8192;
				PainRaySight.MaxHearDist = 3072;
				
				//Look for another target if the current one hasn't been attackable for long enough.
				If (Patience >= 35*5)
				{
					Patience = 0;
					Return ResolveState ("See");
				}
				
				A_Chase (Null,Null,CHF_DONTIDLE|CHF_DONTMOVE);
				
				If (Target)
				{
					//If the army car has no target anymore, then set the pain rays' current target as such.
					If (Master && !Master.Target)
						Master.Target = Target;
					
					Int AttackChance = Random (0,256);
					If (CheckMissileRange() && AttackByQuantity (384)+AttackChance < 224)
					{
						Patience = 0; //Reset timer.
						bJustAttacked = bInCombat = True;
						Return ResolveState ("ChargeUp");
					}
					//If the target isn't visible, increment the timer.
					Else
						Patience++;
				}
				
				Return State (Null);
			}
			Loop;
		ChargeUp:
			MCR3 H 0
			{
				A_StartSound ("Vehicle/ArmyCar/PainRay/On",CHAN_VOICE,0,1,0.5);
				WarningZone = WarnMarines (512); //Warn the marines of the pain ray attack.
			}
			MCR3 HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH 1 A_FaceTarget (5,5,FAF_MIDDLE);
		PainAttack:
			TNT1 A 0 {If (WarningZone) WarningZone.Destroy();} //Stop warning them.
			MCR3 H Random (2,8)
			{
				A_StartSound ("Vehicle/ArmyCar/PainRay/Active",CHAN_VOICE,CHANF_LOOPING,1,0.5);
				
				Actor Victim;
				BlockThingsIterator ItBurnsItBurns = BlockThingsIterator.Create (Target,512);
				
				While (ItBurnsItBurns.Next())
				{
					Victim = ItBurnsItBurns.Thing;
					
					//Don't painlock actors with a lot of health. Or who are already in pain, to avoid breaking states.
					If (Victim.Health >= 400 || (IsInState ("Pain") || IsInState ("Pain.Microwave"))) Continue;
					
					//Ignore yourself, non-monsters, dormant monsters, allies, or actors that are just too far away.
					If (Victim == Self || !(Victim.bIsMonster || Victim.Player) || Victim.bDormant || !IsHostile(Victim)|| Target.Distance3DSquared (Victim) >= 512*512) Continue;
					
					//And finally, check to see if the actor can even be targeted.
					If (!CanBeTargeted (Victim)) Continue;
					
					Victim.TriggerPainChance ('Microwave', False);
					If (Victim.Player)
						Victim.GiveInventory ("MVP_PlayerPain",5);
				}
			}
			MCR3 H 0
			{
				A_FaceTarget (20,20,FAF_MIDDLE);
				
				LookExParams PainRaySight;
				PainRaySight.MaxDist = 1536;
				
				//Target is out of sight.
				If (!IsVisible(Target,True,PainRaySight) || IsDead (Target))
				{
					A_ClearTarget(); //Forget it.
					LookForPlayers (True,PainRaySight); //And look for a new one.
				}
				
				//No new target found, so charge down.
				If (!Target)
					Return ResolveState ("ChargeDown");
				
				Return State (Null);
			}
			Goto PainAttack+1;
		ChargeDown:
			MCR3 H 0 A_StartSound ("Vehicle/ArmyCar/PainRay/Off",CHAN_VOICE,0,1,0.5);
			MCR3 HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH 1;
			Goto See;
		Death:
			TNT1 A 0
			{
				A_StartSound ("Vehicle/ArmyCar/PainRay/Break",CHAN_VOICE);
				
				//The pain ray is dead, mark it as such on the army car.
				If (Master && Master Is "MVP_ArmyCar")
					MVP_ArmyCar(Master).User_PainRay = False;
				
				If (WarningZone) WarningZone.Destroy(); //Remove the warning zone around the pain rays' target, if there was any.
				
				//Fly off if you died independently of the car.
				If (Master)
					A_ChangeVelocity (FRandom (6,-6),FRandom (6,-6),FRandom (0,6),CVF_RELATIVE);
			}
			MCR3 IJ 10;
			MCR3 KL 5;
			MCR3 L 1
			{
				Actor Spark;
				Vector3 SpawnPos = Vec3Offset (FRandom (Radius*0.05,-Radius*0.05),FRandom(Radius*1.75,-Radius*1.75),FRandom (0,DeathHeight));
				
				//May spark sometimes. Maybe add a limit to how many times the destroyed turret can spark ?
				If (Random[pr_cajump](0,255) < 6)
					Spark = Spawn ("MVP_Spark",SpawnPos);
			}
			Goto Death+5;
	}
}

Class MVP_PlayerPain : Inventory
{
	Default
	{
		Inventory.MaxAmount 35;
		Inventory.Amount 1;
		+Inventory.Undroppable;
		+Inventory.Unclearable;
		+Inventory.HubPower;
		+Inventory.PersistentPower;
		+Inventory.Untossable;
		+Inventory.NoScreenFlash;
	}
	
	Double OriginalSpeed;
	
	Override Void AttachToOwner (Actor Other)
	{
		Super.AttachToOwner (Other);
		
		If (Other && Other.Player)
		{
			OriginalSpeed = Other.Speed; //Store current speed.
			Other.Speed /= 128; //Slow down the player.
		}
		Else
			GoAwayAndDie ();
	}
	
	Override Void DoEffect ()
	{
		Super.DoEffect();
		console.printf ("%f",owner.speed);
		console.printf ("got %d tokens",countinv ("mvp_playerpain"));
		
		If (CountInv("MVP_PlayerPain") == 0)
		{
			Owner.Speed = OriginalSpeed; //Restore original speed.
			GoAwayAndDie(); //https://www.youtube.com/watch?v=gzthb6gqLDY
		}
		Else
			Owner.TakeInventory ("MVP_PlayerPain",1);
	}
}

Class MVP_Spark : Actor
{
	Default
	{
		RenderStyle "Add";
		Scale 0.05;
		+NoInteraction;
		+NoGravity;
	}
	States
	{
		Spawn:
			SPKY A 0 NoDelay
			{
				A_StartSound ("World/Spark", CHAN_AUTO, CHANF_DEFAULT, 1, ATTN_STATIC);
				Scale *= FRandom (0.8,2.0) ;
			}
			SPKY ABCDEF 4 Bright;
			TNT1 A 35;
			Stop;
	}
}

Class MVP_ArmyCarDoor : Actor
{
	Default
	{
		Radius 8;
		Height 24;
		XScale 0.65;
		YScale 0.541666;
		Speed 36;
		Mass 200;
		Gravity 1;
		ProjectileKickback 16;
		ReactionTime 2;
		DamageFunction (Random (48,64));
		DamageType "Melee";
		Projectile;
		-NoBlockmap;
		-NoGravity;
		+BloodlessImpact;
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		If (IsFrozen ()) Return;
		//Slow down the spinning over time.
		If (ReactionTime <= 24 && GetAge() % 2 == 0)
			ReactionTime++;
	}
	
	States
	{
		Spawn:
			MCR3 MNOP 2 A_SetTics (ReactionTime);
			Loop;
		Death:
			MCR3 Q 0 A_StartSound ("SFX/MetalHit",volume:0.5);
			MCR3 Q -1;
			Stop;
	}
}

Class MVP_ArmyCarHood : MVP_ArmyCarDoor
{
	Default
	{
		Height 6;
		Speed 16;
		Mass 100;
		ProjectileKickback 6;
		DamageFunction (Random (12,24));
	}
	States
	{
		Spawn:
			MCR3 VWXY 2 A_SetTics (ReactionTime);
			Loop;
		Death:
			MCR3 Z 0 A_StartSound ("SFX/MetalHit",volume:0.5);
			MCR3 Z -1;
			Stop;
	}
}

Class MVP_ArmyCarWheel : MVP_ArmyCarDoor
{
	Default
	{
		Radius 12;
		Height 24;
		Speed 24;
		Mass 60;
		ProjectileKickback 12;
		DamageFunction (Random (4,16));
		BounceType "Hexen";
		BounceFactor 0.8;
		BounceSound "SFX/WheelHit";
		+CanBounceWater;
		+DontBounceOnSky;
		+BounceOnActors;
	}
	
	Override Void Tick()
	{
		Actor.Tick();
		
		If (IsFrozen() || InStateSequence(CurState,ResolveState ("Death"))) Return;
		
		//Slow down the spinning over time.
		If (ReactionTime <= 24 && GetAge() % 8 == 0)
			ReactionTime++;
		
		//Stop moving if too slow.
		If (Vel.Length() >= 2)
			BounceSound = Default.BounceSound;
		Else
		{
			BounceSound = "";
			ExplodeMissile(); //Hit the ground.
		}
	}
	States
	{
		Spawn:
			MCR3 RST 2 A_SetTics (ReactionTime);
			Loop;
		Death:
			MCR3 U -1;
			Stop;
	}
}