//Pain ray and its' related actors.
Class MVP_PainRay : MVP_BaseTurret
{
	Default
	{
		Health 350;
		XScale 0.65;
		YScale 0.541666; //0.65 / 1.2
		Height 64;
		DeathHeight 16;
		Radius 24;
		Mass 250;
		FriendlySeeBlocks 14; //Doesn't need that much sight range, since it's max target range is deliberately so low.
		MaxTargetRange 1536;
		DamageFactor "Electric", 1.25;
		Obituary "%o was killed by a non-lethal weapon, somehow";
		Tag "Pain Ray";
		DeathSound "Vehicle/ArmyCar/PainRay/Break";
		AttackSound "Vehicle/ArmyCar/PainRay/Active";
		+MissileMore;
		+LookAllAround;
		+MVP_BaseTurret.FallOnDeath;
	}
	Int Patience;
	Actor WarningZone;
	
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		MissileState = FindState ("PainAttack");
	}
	
	Override Bool ShouldAttack(Bool NoStateJump) {Return True;}
	
	Override Void OnDestroy()
	{
		Super.OnDestroy();
		
		If (WarningZone) WarningZone.Destroy();
	}
	
	States
	{
		Spawn:
			MCR3 H 1 A_LookEx (0,0,8192,DEFAULT_HEARDISTANCE);
			Loop;
		See:
			MCR3 H 1
			{
				LookExParams PainRaySight;
				PainRaySight.MaxDist = 8192;
				PainRaySight.MaxHearDist = 3072;
				
				//Look for another target if the current one hasn't been attackable for long enough.
				If (Patience >= 35*5)
				{
					Patience = 0;
					Return ResolveState ("See");
				}
				
				A_Chase (Null,Null,CHF_DONTIDLE|CHF_DONTMOVE);
				
				If (Target && !Target.bNoPain)
				{
					//If the army car has no target anymore, then set the pain rays' current target as such.
					If (Master && !Master.Target && !MVP_BaseVehicle(Master).IsPatrolling(Self))
						Master.Target = Target;
					
					Int AttackChance = Random (0,256);
					If (CheckMissileRange() && AttackByQuantity (384)+AttackChance < 224)
					{
						Patience = 0; //Reset timer.
						bJustAttacked = bInCombat = True;
						Return ResolveState ("ChargeUp");
					}
					//If the target isn't visible, increment the timer.
					Else
						Patience++;
				}
				//Ignore targets that can't even feel pain.
				Else If (Target && Target.bNoPain)
				{
					//But do alert the car of their presense.
					If (Master && !Master.Target && !MVP_BaseVehicle(Master).IsPatrolling(Self))
						Master.Target = Target;
					A_ClearTarget();
				}
				
				Return State (Null);
			}
			Loop;
		ChargeUp:
			MCR3 H 0
			{
				A_StartSound ("Vehicle/ArmyCar/PainRay/On",CHAN_VOICE,0,1,0.5);
				WarningZone = WarnMarines (MWRN_WARP|MWRN_PAINONLY,512,towho:Target); //Warn the marines of the pain ray attack.
			}
			MCR3 HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH 1 A_FaceTarget (5,5,FAF_MIDDLE);
		PainAttack:
			TNT1 A 0 {If (WarningZone) WarningZone.Destroy();} //Stop warning them.
			MCR3 H Random (2,8)
			{
				A_StartSound ("Vehicle/ArmyCar/PainRay/Active",CHAN_VOICE,CHANF_LOOPING,1,0.5);
				
				If (!Target) Return State (Null);
				Actor Victim;
				BlockThingsIterator ItBurnsItBurns = BlockThingsIterator.Create (Target,512);
				
				While (ItBurnsItBurns.Next())
				{
					Victim = ItBurnsItBurns.Thing;
					
					//Don't hurt invulnerable actors.
					If (Victim.bInvulnerable || Victim.bNoDamage) Continue;
					
					//Nor invulnerable players.
					If (Victim.Player && Victim.Player.Cheats & (CF_GODMODE | CF_GODMODE2)) Continue;
					
					//Don't painlock actors with a lot of health. Or who are already in pain, to avoid breaking states.
					If (Victim.Health >= 400 || (IsInState (Self,"Pain") || IsInState (Self,"Pain.Microwave"))) Continue;
					
					//Ignore yourself, non-monsters, dormant monsters, allies, or actors that are just too far away.
					If (Victim == Self || !(Victim.bIsMonster || Victim.Player) || Victim.bDormant || !IsHostile(Victim)|| Target.Distance3DSquared (Victim) >= 512*512) Continue;
					
					//And finally, check to see if the actor can even be targeted.
					If (!CanBeTargeted (Victim)) Continue;
					
					Victim.TriggerPainChance ('Microwave', False);
					If (Victim.Player)
						Victim.GiveInventory ("MVP_PlayerPain",5);
				}
				
				Return State (Null);
			}
			MCR3 H 0
			{
				A_FaceTarget (20,20,FAF_MIDDLE);
				
				LookExParams PainRaySight;
				PainRaySight.MaxDist = 1536;
				
				//Target is out of sight or no longer exists.
				If (!Target || !IsVisible(Target,True,PainRaySight) || IsDead (Target))
				{
					A_ClearTarget(); //Forget it.
					LookForPlayers (True,PainRaySight); //And look for a new one.
				}
				
				//No new target found, so charge down.
				If (!Target)
					Return ResolveState ("ChargeDown");
				
				Return State (Null);
			}
			Goto PainAttack+1;
		ChargeDown:
			MCR3 H 0 A_StartSound ("Vehicle/ArmyCar/PainRay/Off",CHAN_VOICE,0,1,0.5);
			MCR3 HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH 1;
			Goto See;
		Death:
			TNT1 A 0
			{
				A_StartSound ("Vehicle/ArmyCar/PainRay/Break",CHAN_VOICE);
				
				//The pain ray is dead, mark it as such on the army car.
				If (Master && Master Is "MVP_ArmyCar")
					MVP_ArmyCar(Master).User_PainRay = False;
				
				If (WarningZone) WarningZone.Destroy(); //Remove the warning zone around the pain rays' target, if there was any.
				
				//Fly off if you died independently of the car.
				If (Master)
					A_ChangeVelocity (FRandom (6,-6),FRandom (6,-6),FRandom (0,6),CVF_RELATIVE);
			}
			MCR3 IJ 10;
			MCR3 KL 5;
			MCR3 L 1
			{
				Actor Spark;
				Vector3 SpawnPos = Vec3Offset (FRandom (Radius*0.05,-Radius*0.05),FRandom(Radius*1.75,-Radius*1.75),FRandom (0,DeathHeight));
				
				//May spark sometimes. Maybe add a limit to how many times the destroyed turret can spark ?
				If (Random[pr_cajump](0,255) < 6)
					Spark = Spawn ("MVP_Spark",SpawnPos);
			}
			Goto Death+5;
	}
}

Class MVP_PlayerPain : Inventory
{
	Default
	{
		Inventory.MaxAmount 35;
		Inventory.Amount 1;
		+Inventory.Undroppable;
		+Inventory.Unclearable;
		+Inventory.HubPower;
		+Inventory.PersistentPower;
		+Inventory.Untossable;
		+Inventory.NoScreenFlash;
	}
	
	Double OriginalSpeed;
	
	Override Void AttachToOwner (Actor Other)
	{
		Super.AttachToOwner (Other);
		
		If (Other && Other.Player)
		{
			OriginalSpeed = Other.Speed; //Store current speed.
			Other.Speed /= 128; //Slow down the player.
		}
		Else
			GoAwayAndDie ();
	}
	
	Override Void DoEffect ()
	{
		Super.DoEffect();
		
		If (CountInv("MVP_PlayerPain") == 0)
		{
			Owner.Speed = OriginalSpeed; //Restore original speed.
			GoAwayAndDie(); //https://www.youtube.com/watch?v=gzthb6gqLDY
		}
		Else
			Owner.TakeInventory ("MVP_PlayerPain",1);
	}
}

//Car props
//So much for trying to avoid code duplication, uuuuuggggggggghhhhhhhhhhhhh.
Class MVP_ArmyCarProp : MVP_BaseProp
{
	Default
	{
		//$Title Army Car (Prop)
		//$Category Vehicles/Army Car
		//$Sprite MCR1A1
		XScale 0.65;
		YScale 0.541666; //0.65 / 1.2
		Health 800;
		GibHealth 200;
		Tag "Army Car (Prop)";
		MVP_BaseVehicle.VehicleTurret "MVP_PainRayProp";
		DamageFactor "MarineGrenade", 1.25;
		DamageFactor "Grenade", 1.25;
		DamageFactor "RifleBullet", 0.9;
	}
	
	Override Void PostBeginPlay ()
	{
		TurretOffsets = (0,0,1.25);
		Super.PostBeginPlay();
		If (User_SupplyAmount <= 0) User_SupplyAmount = 5;
	}
	
	Override Void SpawnVehicleTurret ()
	{
		If (User_PainRay)
		{
			Super.SpawnVehicleTurret();
			If (!(User_TurretAngle == -1))
				Turret.Angle += User_TurretAngle;
			Else
				Turret.Angle += FRandom (0,360);
		}
	}
	
	Override Void SpawnHeadlights ()
	{
		Headlights.Push(SpawnVehicleHeadlight(Self,(64,28,8)));
		Headlights.Push(SpawnVehicleHeadlight(Self,(64,-28,8)));
		Headlights.Push(SpawnVehicleHeadlight(Self,(40,28,8),VHSF_BACKLIGHT,(255,0,0),32,(40,80)));
		Headlights.Push(SpawnVehicleHeadlight(Self,(40,-28,8),VHSF_BACKLIGHT,(255,0,0),32,(40,80)));
	}
	
	/*Supply system:
	This is the copy of the supply system for the prop version of the army car, the original can be found in /ZScript/Vehicles/Army Car/ArmyCar.zsc,
	any changes made here or on MVP_ArmyCar will need to be copied to each version, no, there's not way to stop this code duplication without getting
	rid off User_SupplyType and User_SupplyAmount. I have also removed the code for making the car stop for a while after being used, it's not needed here.
	The code for making sure that the car can only be used by allies is also removed.
	==============*/
	Override Bool Used (Actor User)
	{
		Super.Used (User);
		
		//NPCs, cars with no supplies, used up cars, and dead cars GTFO.
		If (!(User && User.Player) || !HasSupplies() || User_SupplyAmount <= 0 || IsDead (Self))
			Return False;
		
		//Ammo drops.
		If (User_SupplyType ~== "Ammo" || User_SupplyType ~== "Ammunition")
		{
			A_StartSound ("Vehicle/ArmyCar/Crate");
			User.GiveInventory ("Clip",50);
			User.GiveInventory ("Shell",8);
			User.GiveInventory ("RocketAmmo",1);
			User_SupplyAmount--;
			Return True;
		}
		//Health drops.
		Else If (User_SupplyType ~== "Health" || User_SupplyType ~== "First Aid" || User_SupplyType ~== "FirstAid")
		{
			//Dont waste uses if the player has 100+ health already.
			If (User.Player.Health < 100-1)
			{
				A_StartSound ("Vehicle/ArmyCar/Crate");
				User.GiveBody (25,100); //Basically acts like the vanilla Medikit.
				User_SupplyAmount--;
				Return True;
			}
		}
		//Armor drops, I love ZDoom's armor systen.
		Else If (User_SupplyType ~== "Armor" || User_SupplyType ~== "Armour")
		{
			A_StartSound ("Vehicle/ArmyCar/Crate");
			User.GiveInventory ("GreenArmor",1);
			User_SupplyAmount--;
			Return True;
		}
		
		Return False;
	}
	
	Bool HasSupplies()
	{
		Return (User_SupplyType && !(User_SupplyType ~== "" || User_SupplyType ~== "None"));
	}
	
	String User_SupplyType; //Yep you can take supplies from prop car as well, hence the necessary code doplication above.
	Int User_SupplyAmount; 
	Bool User_PainRay; //Spawn the prop pain ray.
	Bool User_OpenDoors; //Does the prop car have its' doors open ?
	Double User_TurretAngle; //Change the exact angle the turret faces at, a value of -1 randomizes the turrets' angle relative to the car.
	
	States
	{
		Spawn:
			MCR1 A 0; //Has to exist to shut GZDoom up.
			#### # 1
			{
				//If the car is carrying supplies, change all of its' non-death sprites to have an open trunk.
				If (HasSupplies())
					Sprite = GetSpriteIndex ("MCR2");
				Else
					Sprite = GetSpriteIndex ("MCR1");
				
				If (User_OpenDoors)
					Frame = 6; //Frame G
				Else
					Frame = 0; //Frame A
				
				If (User_IdleSound)
					A_StartSound("Vehicle/ArmyCar/Idle",CHAN_IDLING,CHANF_LOOPING,attenuation:0.8);
				Else
					A_StopSound (CHAN_IDLING);
			}
			Loop;
		//These states are almost ripped wholesale from the primary NPC version of the car, jesus christ, why do I even bother with the base prop class ?
		Death:
			MCR1 H 4 Bright
			{
				A_Explode (128,80,XF_HURTSOURCE|XF_EXPLICITDAMAGETYPE,True,damagetype:'Explosion');
				A_StartSound ("SFX/Explosion",CHAN_BODY,attenuation:0.6);
				A_StopSound (CHAN_IDLING);
				
				If (Turret)
				{
					Turret.SetOrigin ((Turret.Pos.X,Turret.Pos.Y,Pos.Z+Height+2),False);
					Turret.A_ChangeVelocity (FRandom (12,-12),FRandom (12,-12),FRandom (6,10),CVF_RELATIVE);
				}
				
				//Spawn parts of the vehicle as debris.
				A_SpawnItemEx ("MVP_ArmyCarDoor",-Default.Radius*0.75,-48,32,FRandom(-0.3,0.3),FRandom (-16,-32),FRandom (4,12),flags:SXF_SETTARGET);
				A_SpawnItemEx ("MVP_ArmyCarHood",64,0,38,FRandom(-1,1),FRandom (-1,1),FRandom (8,32),flags:SXF_SETTARGET);
				
				//Don't spawn the spare wheel if the car had a back open trunk, since if it did, that would mean that it had no spare wheel visible on it.
				If (!HasSupplies())
					A_SpawnItemEx ("MVP_ArmyCarWheel",-96,0,38,FRandom(-10,-16),FRandom (-2,2),FRandom (-0.5,4),flags:SXF_SETTARGET);
			}
			MCR1 IJ 6 Bright;
			MCR1 KL 8 Bright;
			MCR1 M 8;
			MCR1 M -1;
			Stop;
		XDeath:
			MCR1 N 0
			{
				Height = 34;
				
				Spawn ("MVP_BigExplosion",Pos); //BigExplosion is a generic effect, not specific to this vehicle.
				//Spawn a random amount of flames around the car wreck.
				SpawnDeathFlames();
				
				If (Turret)
				{
					Turret.SetOrigin ((Turret.Pos.X,Turret.Pos.Y,Pos.Z+Height+2),False);
					Turret.A_ChangeVelocity (FRandom (12,-12),FRandom (12,-12),FRandom (16,32),CVF_RELATIVE);
				}
			}
			MCR1 N -1;
			Stop;
		//So the conditional sprite change for the open trunk doesn't crash the game.
		Sprites:
			TNT1 A 0 A_Log ("The army car shouldn't be in this state.");
			MCR1 ABCDEFG 0;
			MCR2 ABCDEFG 0;
			Stop;
	}
}

Class MVP_PainRayProp : MVP_BaseTurretProp
{
	Default
	{
		Health 350;
		XScale 0.65;
		YScale 0.541666; //0.65 / 1.2
		Height 64;
		DeathHeight 16;
		Radius 24;
		DamageFactor "Electric", 1.25;
		Obituary "%o was killed by a prop, somehow";
		Tag "Pain Ray (Prop)";
		+MVP_BaseTurret.FallOnDeath;
	}
	States
	{
		Spawn:
			MCR3 H -1;
			Loop;
		Death:
			TNT1 A 0
			{
				A_StartSound ("Vehicle/ArmyCar/PainRay/Break",CHAN_VOICE);
				
				//Fly off if you died independently of the car.
				If (Master)
					A_ChangeVelocity (FRandom (6,-6),FRandom (6,-6),FRandom (0,6),CVF_RELATIVE);
			}
			MCR3 IJ 10;
			MCR3 KL 5;
			MCR3 L 1
			{
				Actor Spark;
				Vector3 SpawnPos = Vec3Offset (FRandom (Radius*0.05,-Radius*0.05),FRandom(Radius*1.75,-Radius*1.75),FRandom (0,DeathHeight));
				
				//May spark sometimes. Maybe add a limit to how many times the destroyed turret can spark ?
				If (Random[pr_cajump](0,255) < 6)
					Spark = Spawn ("MVP_Spark",SpawnPos);
			}
			Goto Death+5;
	}
}

Class MVP_ArmyCarWreck : MVP_ArmyCarProp
{
	Default
	{
		//$Title Army Car (Wreck)
		//$Category Vehicles/Army Car
		//$Sprite MCR1M1
		+NoDamage;
		Tag "Army Car (Wreck)";
	}
	
	Override Void PostBeginPlay() {Actor.PostBeginPlay();}
	Override Void Tick() {Actor.Tick();}
	Override Void OnDestroy() {Actor.OnDestroy();}
	Override Bool Used(Actor User) {Actor.Used(User); Return Actor.Used(User);}
	
	States
	{
		Spawn:
			MCR1 M -1;
			Stop;
	}
}

Class MVP_PainRayWreck : MVP_PainRayProp
{
	Default
	{
		//$Title Pain Ray (Wreck)
		//$Category Vehicles/Army Car
		//$Sprite MCR3L1
		+NoDamage;
		Tag "Pain Ray (Destroyed)";
		Height 16;
	}
	
	Override Void PostBeginPlay() {Actor.PostBeginPlay();}
	Override Void Tick() {Actor.Tick();}
	Override Void OnDestroy() {Actor.OnDestroy();}
	Override Bool Used(Actor User) {Actor.Used(User); Return Actor.Used(User);}
	Bool User_NoSparks;
	
	States
	{
		Spawn:
			MCR3 L 1
			{
				If (!User_NoSparks)
				{
					Actor Spark;
					Vector3 SpawnPos = Vec3Offset (FRandom (Radius*0.05,-Radius*0.05),FRandom(Radius*1.75,-Radius*1.75),FRandom (0,DeathHeight));
					
					//May spark sometimes. Maybe add a limit to how many times the destroyed turret can spark ?
					If (Random[pr_cajump](0,255) < 6)
						Spark = Spawn ("MVP_Spark",SpawnPos);
				}
			}
			Loop;
	}
}

Class MVP_ArmyCarRuin : MVP_ArmyCarWreck
{
	Default
	{
		//$Title Army Car (Ruin)
		//$Category Vehicles/Army Car
		//$Sprite MCR1N1
		Height 34;
		Tag "Army Car (Ruin)";
	}
	
	Bool User_SpawnFlames; //Should the wreck spawn flames ?
	
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay ();
		
		If (User_SpawnFlames)
			SpawnDeathFlames(lifespan:(INT.MAX,INT.MAX));
	}
	
	States
	{
		Spawn:
			MCR1 N -1;
			Stop;
	}
}

//$GZDB_SKIP
//Car debris
Class MVP_ArmyCarDoor : Actor
{
	Default
	{
		Radius 8;
		Height 24;
		XScale 0.65;
		YScale 0.541666;
		Speed 36;
		Mass 200;
		Gravity 1;
		ProjectileKickback 16;
		ReactionTime 2;
		DamageFunction (Random (48,64));
		DamageType "Melee";
		Obituary "%o was hit an army cars' door";
		Projectile;
		-NoBlockmap;
		-NoGravity;
		+BloodlessImpact;
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		If (IsFrozen ()) Return;
		//Slow down the spinning over time.
		If (ReactionTime <= 24 && GetAge() % 2 == 0)
			ReactionTime++;
	}
	
	States
	{
		Spawn:
			MCR3 MNOP 2 A_SetTics (ReactionTime);
			Loop;
		Death:
			MCR3 Q 0 A_StartSound ("SFX/MetalHit",volume:0.5);
			MCR3 Q -1;
			Stop;
	}
}

Class MVP_ArmyCarHood : MVP_ArmyCarDoor
{
	Default
	{
		Height 6;
		Speed 16;
		Mass 100;
		ProjectileKickback 6;
		DamageFunction (Random (12,24));
		Obituary "%o had a car hood fall from the sky";
	}
	States
	{
		Spawn:
			MCR3 VWXY 2 A_SetTics (ReactionTime);
			Loop;
		Death:
			MCR3 Z 0 A_StartSound ("SFX/MetalHit",volume:0.5);
			MCR3 Z -1;
			Stop;
	}
}

Class MVP_ArmyCarWheel : MVP_ArmyCarDoor
{
	Default
	{
		Radius 12;
		Height 24;
		Speed 24;
		Mass 60;
		ProjectileKickback 12;
		DamageFunction (Random (4,16));
		BounceType "Hexen";
		BounceFactor 0.8;
		BounceSound "SFX/WheelHit";
		Obituary "%o didn't check both sides of the road, and was hit by a car wheel";
		+CanBounceWater;
		+DontBounceOnSky;
		+BounceOnActors;
	}
	
	Override Void Tick()
	{
		Actor.Tick();
		
		If (IsFrozen() || InStateSequence(CurState,ResolveState ("Death"))) Return;
		
		//Slow down the spinning over time.
		If (ReactionTime <= 24 && GetAge() % 8 == 0)
			ReactionTime++;
		
		//Stop moving if too slow.
		If (Vel.Length() >= 2)
			BounceSound = Default.BounceSound;
		Else
		{
			BounceSound = "";
			ExplodeMissile(); //Hit the ground.
		}
	}
	States
	{
		Spawn:
			MCR3 RST 2 A_SetTics (ReactionTime);
			Loop;
		Death:
			MCR3 U -1;
			Stop;
	}
}

//An allias of the Army Car, that can be used to spawn it through the console with the Pain Ray included.
Class MVP_ArmyCar_PainRay : MVP_ArmyCar
{
	Override Void PostBeginPlay ()
	{
		User_PainRay = True;
		Super.PostBeginPlay();
	}
}