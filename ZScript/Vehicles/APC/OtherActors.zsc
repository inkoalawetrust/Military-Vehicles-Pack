//Possibly add a line of fire check that checks if the turret can hit it's target or another enemy as it rotates, before it decides to begin shooting.
//Note to self, looking at the final autocannon sprites, the off-center MG turret on top of the autocannon, should overlay the autocannon sprites, not the other way around.
//Add the autocannons smaller MG turret.
/*Fix the autocannon, find a better firing sound for the autocannon. Possibly do a better death animation for the shell, with a custom explosion sprite,
different air and ground explosions, liquid explosions (That also fit the color of the liquid flat they are in.), and so on, I'm forgetting a bunch of stuff.*/
//Good fucking god, this goddamn update is like two weeks over schedule, and I'm still not even close to done. At this point I'm not sure if it'll even be finished before new years' eve.
Class MVP_APCMachineGun : MVP_BaseTurret
{
	Default
	{
		Health 450;
		GibHealth 250;
		Height 32;
		DeathHeight 32;
		Radius 32;
		MaxTargetRange 25000;//8192; DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG
		MVP_BaseTurret.MaximumPitch -70;
		MVP_BaseTurret.MinimumPitch 20;
		Tag "Machine Gun Turret";
		Obituary "%o was gunned down by a machine gun turret";
		+MissileMore;
		+LookAllAround;
	}
	Override Bool ShouldAttack ()
	{
		If (!Target) Return False;
		
		If (MVP_CheckMissileRange(Target) && !IsDead (Target) && IsHostile (Target) && Target != Self)
		{
			SetStateLabel ("Fire");
			Return True;
		}
		
		Return False;
	}
	
	Override Void Tick()
	{
		Double OldAngle = Angle;
		Super.Tick();
		
		If (IsFrozen()) Return;
		
		If (AbsAngle (Angle,OldAngle) >= 2 && LastEnemyDelay)
			A_StartSound ("Vehicle/APC/TurretTurn",attenuation:0.8);
	}
	
	Override Void Die (Actor Source, Actor Inflictor, Int DmgFlags, Name MeansOfDeath)
	{
		Super.Die (Source, Inflictor, DmgFlags, MeansOfDeath);
		If (Master) Master.SetTag (Master.Default.GetTag());
	}
	
	Override Void OnDestroy()
	{
		If (Master) Master.SetTag (Master.Default.GetTag());
		Super.OnDestroy();
	}
	
	States
	{
		Spawn:
			APC3 A 0;
			APC3 # 1
			{
				RotateToVehicle();
				A_LookEx (maxheardist:DEFAULT_HEARDISTANCE);
				Frame = UpdateElevation (3,0,6,9); //D, A, G, J
			}
			Loop;
		See:
			APC3 # 1
			{
				A_FaceTarget (5,5,flags:FAF_MIDDLE);
				RotateToVehicle();
				A_Chase (Null,Null,CHF_DONTIDLE|CHF_DONTMOVE|CHF_NODIRECTIONTURN);
				MVP_Chase (NoChase:True);
				UpdateLastEnemyTimer();
				HandleChaseTimer();
				Frame = UpdateElevation (3,0,6,9); //D, A, G, J
			}
			Loop;
		Fire:
			APC3 ###### 1
			{
				A_FaceTarget (5,5,flags:FAF_MIDDLE);
				Frame = UpdateElevation (3,0,6,9); //D, A, G, J
			}
			APC3 # 3 Light ("50CalFiringLight") //Right shot
			{
				A_FaceTarget (5,5,flags:FAF_MIDDLE);
				A_StartSound ("Vehicle/APC/MGFire",CHAN_WEAPON,CHANF_OVERLAP,1.0,0.5);
				Actor Proj = A_SpawnProjectile ("MVP_50CalBullet",12,-8,flags:CMF_AIMDIRECTION,Pitch); //pew pew
				HandleTargetPrediction (Proj,(0.8,-0.8),(1.0,-1.0));
				Frame = UpdateElevation (4,1,7,10); //E, B, H, K
			}
			APC3 # 3 Light ("50CalFiringLight") //Left shot
			{
				A_FaceTarget (5,5,flags:FAF_MIDDLE);
				A_StartSound ("Vehicle/APC/MGFire",CHAN_WEAPON,CHANF_OVERLAP,1.0,0.5);
				Actor Proj = A_SpawnProjectile ("MVP_50CalBullet",12,8,flags:CMF_AIMDIRECTION,Pitch); //pew pew
				HandleTargetPrediction (Proj,(0.8,-0.8),(1.0,-1.0));
				Frame = UpdateElevation (5,2,8,11); //F, C, I, L
			}
			APC3 # 1
			{
				//If you have no target, or it's dead, or it's too high up or low doown for you too shoot.
				If (!Target || IsDead (Target) || Pitch < MaxPitch || Pitch > MaxPitch)
				{
					A_ClearTarget();
					LookForPlayers (True); //Look for a new target.
				}
				
				HandleChaseTimer();
				
				Frame = UpdateElevation (3,0,6,9); //D, A, G, J
			}
			APC3 # 0 A_MonsterRefire (128,"See");
			Goto Fire+6;
		Death:
			APC3 M 0 {Actor Boom = Spawn ("MVP_Explosion",Pos); Boom.bNoGravity = True;}
			APC3 M 1 RotateToVehicle(True);
			Wait;
		XDeath:
			APC3 N 0
			{
				Height = 16;
				Actor Boom = Spawn ("MVP_Explosion",Pos);
				Boom.Scale *= 1.75;
				Boom.SetDamage (192);
				Boom.MeleeRange = 64;
				Boom.bNoGravity = True;
				
				Actor Flame = Spawn ("MVP_Flame",Pos);
				MVP_Flame(Flame).Offsets = (0.1,0,4);
				Flame.Scale.X = Flame.Scale.Y = 1.0;
				Flame.Master = Self;
				Flame.ReactionTime *= FRandom (1.25,4.25);
				Flame.SetDamage (8);
				Flame.MaxTargetRange = 64;
				Flame.MeleeRange = 32;
				
				A_SpawnItemEx ("MVP_DestroyedMGTurretGun",16,0,12,FRandom (16,32),FRandom (-6,6),FRandom (2,6));
			}
			APC3 N 1 RotateToVehicle(True);
			Wait;
	}
}

//Largely based on the MG.
Class MVP_APCAutocannon : MVP_APCMachineGun
{
	Default
	{
		Health 500;
		GibHealth 300;
		Tag "Autocannon Turret";
		Obituary "%o was blown up by an autocannon";
		DamageFactor "Autocannon", 1.0;
		+MissileMore;
		+LookAllAround;
	}
	
	Override Void Tick()
	{
		Double OldAngle = Angle;
		MVP_BaseTurret.Tick();
		
		If (IsFrozen()) Return;
		
		If (AbsAngle (Angle,OldAngle) >= 4 && LastEnemyDelay)
			A_StartSound ("Vehicle/APC/TurretTurn",attenuation:0.8);
	}
	
	Override Bool ShouldAttack ()
	{
		If (!Target) Return False;
		
		If (MVP_CheckMissileRange(Target) && !IsDead (Target) && IsHostile (Target) && Target != Self)
		{
			SetStateLabel ("Fire");
			Return True;
		}
		
		Return False;
	}
	
	States
	{
		Spawn:
			APC2 A 0;
			APC2 # 1
			{
				RotateToVehicle();
				A_LookEx (maxheardist:DEFAULT_HEARDISTANCE);
				Frame = UpdateElevation (2,0,4,6); //C, A, E, G
			}
			Loop;
		See:
			APC2 # 1
			{
				A_FaceTarget (5,5,flags:FAF_MIDDLE);
				RotateToVehicle();
				A_Chase (Null,Null,CHF_DONTIDLE|CHF_DONTMOVE|CHF_NODIRECTIONTURN);
				MVP_Chase (NoChase:True);
				UpdateLastEnemyTimer();
				HandleChaseTimer();
				Frame = UpdateElevation (2,0,4,6); //C, A, E, G
			}
			Loop;
		Fire:
			APC2 ###### 1
			{
				A_FaceTarget (5,5,flags:FAF_MIDDLE);
				Frame = UpdateElevation (2,0,4,6); //C, A, E, G
			}
			APC2 # 3 Light ("AutocannonFlash")
			{
				A_FaceTarget (5,5,flags:FAF_MIDDLE);
				A_StartSound ("Vehicle/APC/AutocannonFire",CHAN_WEAPON,CHANF_OVERLAP,1.0,0.5);
				Actor Proj = A_SpawnProjectile ("MVP_AutocannonShell",16,flags:CMF_AIMDIRECTION,Pitch); //pew pew
				HandleTargetPrediction (Proj,(0.5,-0.5),(0.65,-0.65));
				Frame = UpdateElevation (3,1,5,7); //D, B, F, H
			}
			APC2 ### 4
			{
				//If you have no target, or it's dead, or it's too high up or low doown for you too shoot.
				If (!Target || IsDead (Target) || Pitch < MaxPitch || Pitch > MaxPitch)
				{
					A_ClearTarget();
					LookForPlayers (True); //Look for a new target.
				}
				
				HandleChaseTimer();
				
				Frame = UpdateElevation (2,0,4,6); //C, A, E, G
			}
			APC2 # 0 A_MonsterRefire (10,"See");
			Goto Fire+6;
		Death: //When TG5 finishes the sprites for the gunner getting out the turret, add code to make them work here.
			APC2 Q 0
			{
				Actor Boom = Spawn ("MVP_Explosion",Pos);
				Boom.Scale *= 1.75;
				Boom.SetDamage (192);
				Boom.MeleeRange = 64;
				Boom.bNoGravity = True;
			}
			APC2 Q 1 RotateToVehicle (True);
			Wait;
		XDeath:
			APC2 U 0
			{
				Height = 16;
				Actor Boom = Spawn ("MVP_Explosion",Pos);
				Boom.Scale *= 2.5;
				Boom.SetDamage (256);
				Boom.MeleeRange = 96;
				Boom.MaxTargetRange = 384;
				Boom.bNoGravity = True;
				
				Actor Flame = Spawn ("MVP_Flame",Pos);
				MVP_Flame(Flame).Offsets = (0.1,0,4);
				Flame.Scale.X = Flame.Scale.Y = 1.0;
				Flame.Master = Self;
				Flame.ReactionTime *= FRandom (1.25,4.25);
				Flame.SetDamage (8);
				Flame.MaxTargetRange = 64;
				Flame.MeleeRange = 32;
				
				A_SpawnItemEx ("MVP_APCHatch",-12,6,24,FRandom (6,-6),FRandom (6,-6),FRandom (18,24));
			}
			APC2 U 1 RotateToVehicle(True);
			Wait;
	}
}

Class MVP_50CalBullet : MVP_BaseProjectile
{
	Default
	{
		Radius 4;
		Height 8;
		Speed 230;
		XScale 0.2;
		YScale 0.166667; //0.2 / 1.2
		DamageFunction (Random (50,70)/10); //A ripper damages an actor with a total radius of 64 MU, 10 times, hence dividing the random damage output by 10.
		ProjectileKickback 8;
		RipperLevel 3;
		Projectile;
		MissileHeight 8;
		Obituary "%o was gunned down by a machine gun";
		Decal "50CalChip";
		DamageType "MarineHMG";
		MVP_BaseProjectile.TrailActor "MVP_Tracer";
		MVP_BaseProjectile.TrailDelay 1;
		MVP_BaseProjectile.MaxTrails 128;
		+Ripper;
	}
	Int RipAmount;
	Const Rips = 5; //Roughly how many actors it'll rip.
	
	Override Int SpecialMissileHit (Actor Victim)
	{
		If (Victim.bSolid && !Victim.bShootable) Return 1; //Don't stop at decorations that normally block projectiles.
		
		If (Target && (Victim.bIsMonster || Victim.Player) && !(Target.IsHostile (Victim))) Return 1; //Don't harm the shooter or allies.
		
		If (Victim.SpawnHealth() <= 200) bExtremeDeath = True; //Obliterate any weak enemy.
		
		//Stop penetrating if the target has a lot of health, or you ripped for long enough.
		If (Victim.SpawnHealth() >= 500 || RipAmount > Rips*10) bRipper = False;
		
		//Stop ripping if you went through a large enough ally.
		//If (Target && Target.bIsMonster && !(Target.IsHostile(Victim)) && Victim.Radius >= 40 && Victim.Height >= 64) A_Die();
		
		RipAmount++;
		
		If (!Victim.Player && Victim.PainChance <= 80 && Random (0,256) >= 128+48) bPainLess = True; //So monsters aren't frozen in pain from the amount of bullets hitting them.
		Return -1;
	}
	
	States
	{
		Spawn:
			MVP1 A -1 Light ("50CalTracerLight");
			Stop;
		Death: //Bullet hit level geometry.
			TNT1 A 1 A_StartSound ("Vehicle/APC/MGImpact");
			Stop;
		XDeath: //Bullet hit a bleeding actor.
			TNT1 A 1; //Don't play the impact sound on bleeding actors.
			Stop;
		Crash: //Bullet hit a non bleeding actor.
			TNT1 A 1 A_StartSound ("Vehicle/APC/MGImpact");
			Stop;
	}
}
#Include "Sounds/Vehicles/Army Car/Pain Ray/e"
//A generic tracer effect particle.
Class MVP_Tracer : Actor
{
	Default {RenderStyle "Add"; Scale 0.5; ReactionTime 1; +NoBlockmap; +NoInteraction;}
	
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		
		If (Master && FollowProjectile) SpawnOffset = Level.Vec3Diff (Pos,Master.Pos);
		//Console.Printf ("JUST FUCKING MAKING SURE, THE SPAWN OFFSETS ARE %f %f %f",SpawnOffsetX,SpawnOffsetY,SpawnOffsetZ);
		Warp (Self,SpawnOffsetX,SpawnOffsetY,SpawnOffsetZ);
	}
	Override Void Tick()
	{
		If (IsFrozen()) Return;
		Super.Tick();
		If (GetAge() >= ReactionTime) //This number determines the tracers' length.
			Destroy();
		
		If (Master && FollowProjectile) {Warp (Master, SpawnOffset.Y,SpawnOffset.X,SpawnOffset.Z);a_log ("following");}
		A_SetScale (Scale.X+ScaleAmountX,Scale.Y+ScaleAmountY);
		A_FadeOut (FadeAmount);
	}
	
	Double SpawnOffsetX, SpawnOffsetY, SpawnOffsetZ;
	Double ScaleAmountX, ScaleAmountY, FadeAmount;
	Vector3 SpawnOffset;
	Bool FollowProjectile;
	
	States
	{
		Spawn:
			MVP1 B -1;
			Stop;
	}
}

Class MVP_AutocannonShell : MVP_BaseProjectile
{
	Default
	{
		Radius 8;
		Height 12;
		Speed 180;
		XScale 0.7;
		YScale 0.583332; //0.7 / 1.2
		DamageFunction (Random (80,100));
		ProjectileKickback 128;
		Projectile;
		MissileHeight 8;
		Obituary "%o took a 30mm round to the face";
		Decal "30mmScorch";
		DamageType "Autocannon";
		MVP_BaseProjectile.TrailActor "MVP_Tracer";
		MVP_BaseProjectile.TrailDelay 4;
		MVP_BaseProjectile.MaxTrails 32;
		//MVP_BaseProjectile.ExtraTrails 3;
		//MVP_BaseProjectile.ScaleAmountX -0.1;
		//MVP_BaseProjectile.ScaleAmountY -0.1;
		MVP_BaseProjectile.FadeAmount 0.35;
		MVP_BaseProjectile.SpawnOffsetX -24;
		//MVP_BaseProjectile.ExtraTrailSpacing -6;
		//+MVP_BaseProjectile.FollowProjectile;
		+MVP_BaseProjectile.NoTrailLine;
		+DontHarmSpecies;
	}
	
	Override Void TrailSpawn (Actor Trail)
	{
		Super.TrailSpawn (Trail);
		
		Trail.ReactionTime = 8;
	}
	
	Override Int SpecialMissileHit (Actor Victim)
	{
		If (Target && (Victim.bIsMonster || Victim.Player) && !(Target.IsHostile (Victim))) Return 1; //Don't harm the shooter or allies.
		
		Return -1;
	}
	
	States
	{
		Spawn:
			MVP1 C 0;
			MVP1 # 4 Light ("AutocannonTracer")
			{
				A_FaceMovementDirection ();
				Frame = UpdateProjectileElevation (5,6,2,3,4); //F, G, C, D, E
			}
			Wait;
		Death: //Shell hit level geometry.
			MISL B 8 Bright
			{If (CheckLiquid(FindTextureFlat()) == LIQUID_WATER) a_log ("i have hit some water, splish splash");
				A_SetScale (0.75);
				A_StartSound ("Weapons/RockLX",attenuation:0.75);
				A_Explode (96,128,XF_HURTSOURCE|XF_EXPLICITDAMAGETYPE,True,32,damagetype:'Explosive');
			}
			MISL C 6 Bright;
			MISL D 4 Bright;
			Stop;/*
		XDeath: //Shell hit a bleeding actor.
			TNT1 A 1; //Don't play the impact sound on bleeding actors.
			Stop;
		Crash: //Shell hit a non bleeding actor.
			TNT1 A 1 A_StartSound ("Vehicle/APC/MGImpact");
			Stop;*/
	}
}

Class MVP_DestroyedMGTurretGun : Actor
{
	Default
	{
		Radius 16;
		Height 32;
		XScale 0.65;
		YScale 0.541666;
		Speed 48;
		Mass 200;
		Gravity 1;
		ProjectileKickback 48;
		DamageFunction (Random (64,96));
		DamageType "Melee";
		Obituary "%o was hit by a destroyed machine gun";
		Projectile;
		-NoBlockmap;
		-NoGravity;
		+BloodlessImpact;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			APC3 O 1
			{
				//The turret leans upwards over time as it falls until impact.
				Switch (GetAge())
				{
					Case 35/2:
						Frame = 15;
						Break;
					Case 35:
						Frame = 16;
						Break;
					Case 50:
						Frame = 17;
						Break;
					Default:
						Break;
				}
			}
			Loop;
		Death:
			APC3 O 0 A_StartSound ("SFX/MetalHit",volume:0.75,0.5);
			APC3 O -1;
			Stop;
	}
}

Class MVP_DestroyedAPCFrontDoor : MVP_DestroyedMGTurretGun
{
	Default
	{
		Radius 12;
		Height 48;
		Speed 48;
		Mass 100;
		DamageFunction (Random (48,64));
		ProjectileKickback 16;
		Obituary "%o was hit by an APC's door";
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		If (IsFrozen ()) Return;
		//Slow down the spinning over time.
		If (ReactionTime <= 24 && GetAge() % 8 == 0)
			ReactionTime++;
	}
	
	States
	{
		Spawn:
			APC5 ABCD 2 A_SetTics (ReactionTime);
			Loop;
		Death:
			APC5 E -1 A_StartSound ("SFX/MetalHit",volume:0.5);
			Stop;
	}
}

Class MVP_APCHatch : MVP_DestroyedAPCFrontDoor
{
	Default
	{
		Radius 12;
		Height 8;
		ProjectileKickBack 8;
		DamageFunction (Random (12,24));
		Obituary "%o had an APC hatch fall from the sky";
	}
	
	States
	{
		Spawn:
			APC2 YZ[] 2 A_SetTics (ReactionTime);
			Loop;
		Death:
			APC2 Y -1 A_StartSound ("SFX/MetalHit",volume:0.5);
			Stop;
	}
}

Class MVP_APCWheel : MVP_DestroyedMGTurretGun
{
	Default
	{
		Radius 24;
		Height 32;
		Speed 48;
		Mass 100;
		ProjectileKickback 24;
		DamageFunction (Random (16,32));
		BounceType "Hexen";
		BounceFactor 0.75;
		BounceSound "SFX/WheelHit";
		Obituary "%o was smacked by an APC wheel";
		+CanBounceWater;
		+DontBounceOnSky;
		+BounceOnActors;
	}
	
	Override Void Tick()
	{
		Actor.Tick();
		
		If (IsFrozen() || InStateSequence(CurState,ResolveState ("Death"))) Return;
		
		//Slow down the spinning over time.
		If (ReactionTime <= 24 && GetAge() % 8 == 0)
			ReactionTime++;
		
		//Stop moving if too slow.
		If (Vel.Length() >= 2)
			BounceSound = Default.BounceSound;
		Else
		{
			BounceSound = "";
			ExplodeMissile(); //Hit the ground.
		}
	}
	States
	{
		Spawn:
			APC5 FGHI 2 A_SetTics (ReactionTime);
			Loop;
		Death:
			APC5 J -1;
			Stop;
	}
}

//Class MVP_APCProp : MVP_BaseProp

//Grotesque Zandronum-era hack.
Class MVP_DesolidifyToken : Inventory
{
	Default
	{
		ReactionTime 8; //Tic timer before item leaves.
		+Inventory.Untossable;
	}
	
	Override Void AttachToOwner(Actor Other)
	{
		Super.AttachToOwner(Other);
		
		If (Other){
			Other.bSolid = False;a_log ("oooh im a ghost");}
	}
	
	Override Void DoEffect()
	{
		If (!ReactionTime)
			GoAwayAndDie();
		If (ReactionTime)
			ReactionTime--;
	}
	
	Override Void DetachFromOwner()
	{
		Super.DetachFromOwner();
		If (Owner){
			Owner.bSolid = True;a_log ("im no longer a ghost");}
	}
}

//An alias for the APC, which can be used to spawn the APC through the console with the machine gun included.
Class MVP_APC_MG : MVP_APC
{
	//Spawn only the MG.
	Override Void SpawnVehicleTurret ()
	{
		Turret = MVP_BaseTurret(Spawn ("MVP_APCMachineGun",Pos+TurretOffsets));
		If (Turret)
		{
			Turret.CopyFriendliness (Self,False);
			Turret.Angle = Angle;
			Turret.Pitch = Pitch;
			Turret.Master = Self;
			Turret.TurretOffsets = TurretOffsets;
			User_Turret = "Machine Gun";
		}
	}
}
/*
Class MVP_APC_Autocannon : MVP_APC
{
	//Spawn only the autocannon.
	Override Void SpawnVehicleTurret ()
	{
		Turret = MVP_BaseTurret(Spawn ("MVP_APCAutocannon",Pos+TurretOffsets));
		If (Turret)
		{
			Turret.CopyFriendliness (Self,False);
			Turret.Angle = Angle;
			Turret.Pitch = Pitch;
			Turret.Master = Self;
			Turret.TurretOffsets = TurretOffsets;
			User_Turret = "Autocannon";
		}
	}
}*/