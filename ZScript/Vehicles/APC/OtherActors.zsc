//$GZDB_SKIP
Class MVP_APCMachineGun : MVP_BaseTurret
{
	Default
	{
		Health 400;
		GibHealth 250;
		Height 32;
		DeathHeight 32;
		Radius 32;
		Mass 1200;
		FriendlySeeBlocks 80; //A bit over 10000 map unit sight range, useful for vehicles with actual guns to attack with.
		AutomapOffsets (0,143);
		KAI_BaseTurret.MaximumPitch -60;
		KAI_BaseTurret.MinimumPitch 20;
		KAI_BaseTurret.TurnSoundRadius 1.5;
		KAI_BaseTurret.AttackSpeed 230;
		KAI_BaseTurret.FastAttackSpeed 250;
		KAI_BaseTurret.CombatAngleTurnRate 55;
		KAI_BaseTurret.CombatPitchTurnRate 30;
		KAI_Actor.Inaccuracy (4,4,4);
		KAI_Actor.ThreatLevel THREAT_DANGEROUS;
		Tag "Machine Gun Turret";
		Obituary "%o was gunned down by a machine gun turret";
		DamageFactor "Autocannon", 0.8;
		DamageFactor "Shrapnel", 0.5;
		AttackSound "Vehicle/APC/MGFire";
		KAI_BaseTurret.TurnSound "Vehicle/APC/TurretTurn";
		+MissileMore;
	}
	
	Const DualMGAttackHeight = 12;
	
	Array <Actor> HitActors;
	MVP_APCMachineGunLOFCheck NPCWarner; //A permanent pointer to a dual MG LOF check tracer. So that it can be fired when the turret is firing to warn marines.
	
	Override Bool ShouldAttack (Bool NoStateJump)
	{
		If (!KAI_BaseTurret.ShouldAttack()) Return False;
		If (Target && !CheckFOV (Target,90/2)) Return False; //KLUDGE: We need to do the null check here, because as of GZDoom 4.10, it's not done internally. Crashing the game.
		If (IsOverPitchLimits (Target,DualMGAttackHeight,Target.Height/2) != ELEVATION_INBOUNDS) Return False;
		
		If (Target != Self && KAI_CheckMissileRange(Target) && !IsDead (Target) && IsActorHostile (Target) && KAI_TurretCheckLOF (Target,0,0,(0,-8,12),0,"MVP_50CalBullet"))
		{
			If (!NoStateJump) SetStateLabel ("Fire");
			Return True;
		}
		
		Return False;
	}
	
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		
		MissileState = FindState ("Fire");
		AttackStates.Push (FindState("Fire",True));
		NPCWarner = New ("MVP_APCMachineGunLOFCheck"); //Create the warning trace for marines.
	}
	
	Override Void Die (Actor Source, Actor Inflictor, Int DmgFlags, Name MeansOfDeath)
	{
		Super.Die (Source, Inflictor, DmgFlags, MeansOfDeath);
		If (NPCWarner) NPCWarner.Destroy();
		If (Master) Master.SetTag (Master.Default.GetTag());
	}
	
	Override Void OnDestroy()
	{
		If (Master) Master.SetTag (Master.Default.GetTag());
		If (NPCWarner) NPCWarner.Destroy();
		Super.OnDestroy();
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		If (IsFrozen()) Return;
		//When shooting, fire a ray that alerts any marines that would be caught in the line of fire.
		If (IsInAttackState())
		{
			Vector3 Direction = (AngleToVector(Angle, Cos(Pitch)), -Sin(Pitch));
			
			Double Distance = Target ? Distance3D (Target)+32 : MaxTargetRange;
			NPCWarner.Shooter = Self;
			NPCWarner.Other = Target;
			NPCWarner.OnlyFindActors = True;
			NPCWarner.Trace ((Pos.X,Pos.Y,Pos.Z+DualMGAttackHeight),CurSector,Direction,Distance,0);
			HitActors.Move(NPCWarner.Mobjs);
			//Check all the actors the trace hit.
			ForEach (Mobj : HitActors)
			{
				If (Mobj && !IsDead (Mobj) && Mobj Is "KAI_Actor" && IsActorHostile(Mobj))
				{//console.printf ("iteration found a %s to alert, pointer %p",mobj.getclassname(),mobj);
					Let NewHaz = MVP_MBTRWS.MakeNewHazard (Self, Mobj.Pos);
					WarnSpecificNPC(NewHaz, Mobj); //Then warn them.
				}
			}
			HitActors.Clear();
		}
	}
	
	States
	{
		Spawn:
			APC3 A 0;
			APC3 # 1
			{
				RotateToVehicle();
				KAI_Look (maxseedist:MaxTargetRange,DEFAULT_HEARDISTANCE,extraflags:KAIL_CHASETARGET);
				Frame = UpdateTurretElevation (3,0,6,9); //D, A, G, J
			}
			Loop;
		See:
			APC3 # 1
			{
				//A_FaceTarget (5,5,flags:FAF_MIDDLE);
				DoCombatTraverse();
				RotateToVehicle();
				KAI_LandVehicleChase (chaseflags:CHF_DONTIDLE|CHF_DONTMOVE);
				UpdateTurretSnapTimer();
				Frame = UpdateTurretElevation (3,0,6,9); //D, A, G, J
			}
			Loop;
		Fire:
			APC3 ###### 1
			{
				//A_FaceTarget(0,0,flags:FAF_MIDDLE);
				Frame = UpdateTurretElevation (3,0,6,9); //D, A, G, J
			}
			APC3 # 3 Light ("50CalFiringLight") Bright //Right shot
			{
				//A_FaceTarget(0,0,flags:FAF_MIDDLE);
				A_StartSound (AttackSound,CHAN_WEAPON,CHANF_OVERLAP,1.0,0.3);
				Actor Proj = A_SpawnProjectile ("MVP_50CalBullet",12,-8,flags:CMF_AIMDIRECTION,Pitch); //pew pew
				AddProjectileSpread (Proj,(0.8,-0.8),(1.0,-1.0));
				A_SpawnItemEx ("MVP_BulletCasing",-32,32,8,FRandom(2,-2),FRandom(8,14),FRandom(6,12));
				Frame = UpdateTurretElevation (4,1,7,10); //E, B, H, K
			}
			APC3 # 3 Light ("50CalFiringLight") Bright //Left shot
			{
				//A_FaceTarget(0,0,flags:FAF_MIDDLE);
				A_StartSound (AttackSound,CHAN_WEAPON,CHANF_OVERLAP,1.0,0.3);
				Actor Proj = A_SpawnProjectile ("MVP_50CalBullet",12,8,flags:CMF_AIMDIRECTION,Pitch); //pew pew
				AddProjectileSpread (Proj,(0.8,-0.8),(1.0,-1.0));
				A_SpawnItemEx ("MVP_BulletCasing",-32,-32,8,FRandom(2,-2),FRandom(-8,-14),FRandom(6,12));
				Frame = UpdateTurretElevation (5,2,8,11); //F, C, I, L
			}
			APC3 # 1
			{
				//A_FaceTarget(0,0,flags:FAF_MIDDLE);
				//If you have no target, or it's dead.
				If (!Target || IsDead (Target))
				{
					A_ClearTarget();
					LookForPlayers (True); //Look for a new target.
				}
				
				If (Random2[pr_monsterrefire]() < 48 &&
				//If the target is too high or low to shoot.
				((Target && IsOverPitchLimits (Target,12,Target.Height/2) != ELEVATION_INBOUNDS) ||
				!KAI_TurretCheckLOF (Target,0,0,(0,-8,12),0,"MVP_50CalBullet")))
				{
					A_ClearTarget();
					Return ResolveState ("See");
				}
				
				HandleChaseTimer();
				
				Frame = UpdateTurretElevation (3,0,6,9); //D, A, G, J
				Return State (Null);
			}
			APC3 # 0 KAI_TurretRefire (48,"See",True,fov:90/2);
			Goto Fire+6;
		Death:
			APC3 M 0 {Actor Boom = Spawn ("MVP_Explosion",Pos); Boom.bNoGravity = True;}
			APC3 M 1 RotateToVehicle(RTVF_NOTARGETCHECK);
			Wait;
		XDeath:
			APC3 N 0
			{
				Height = 16;
				Actor Boom = Spawn ("MVP_Explosion",Pos);
				Boom.Scale *= 1.75;
				Boom.SetDamage (192);
				Boom.MeleeRange = 64;
				Boom.bNoGravity = True;
				
				Actor Flame = Spawn ("MVP_Flame",Pos);
				MVP_Flame(Flame).Offsets = (0.1,0,4);
				Flame.Scale.X = Flame.Scale.Y = 1.0;
				Flame.Master = Self;
				Flame.ReactionTime *= Int(FRandom (1.25,4.25));
				Flame.SetDamage (8);
				Flame.MaxTargetRange = 64;
				Flame.MeleeRange = 32;
				
				A_SpawnItemEx ("MVP_DestroyedMGTurretGun",16,0,12,FRandom (16,32),FRandom (-6,6),FRandom (2,6));
			}
			APC3 N 1 RotateToVehicle(RTVF_NOTARGETCHECK);
			Wait;
		GenericFreezeDeath:
			APC3 # 0 {Frame = UpdateTurretElevation (3,0,6,9); /*D, A, G, J*/}
			Goto Super::GenericFreezeDeath;
	}
}

Class MVP_APCMachineGunLOFCheck : KAI_LOFRaycast
{
	Const FiftyCalRipLevel = 3; //This has to be changed if MVP_50CalBullets' ripper level is changed.
	Const MaxRippedActors = 5; //Same as above, but this is the general count of how many actors a bullet can go through before stopping.
	Bool OnlyFindActors; //Used to make the dual MG warn marines it is firing at.
	Override ETraceStatus TraceCallback()
	{
		Actor Mobj = Results.HitActor;
		
		If (!Shooter || !Mobj) Return Trace_Stop;
		
		AddToMobjList (Mobj);
		
		If (Mobj == Shooter.Master) Return Trace_Skip;
		
		//The target is in the line of fire. Shoot them anyway.
		If (Mobj == Other && !OnlyFindActors)
			Return Trace_Stop;
		
		Bool IsEnemy = Shooter.IsHostile(Mobj); //Caching
		
		//Return BadLOF if the actor the trace found would stop the .50 cal round from ripping. Except if it's another enemy anyway.
		If ((IsInanimateObject(Mobj) || !IsEnemy) && CantRipActor (Mobj,FiftyCalRipLevel))
		{
			BadLOF = True;
			Return Trace_Stop;
		}
		
		//The machine gun turret can't shoot through solid enemy corpses that strong.
		If (IsEnemy && IsSolidCorpse (Mobj) && Mobj.SpawnHealth() >= 500 )
		{
			BadLOF = True;
			Return Trace_Stop;
		}
		
		//The trace specifically hit a projectile blocking line. e.g a window linedef or a polyobject.
		If (BlockingLineInTheWay (Results.HitLine,0))
		{
			BadLOF = True;
			Return Trace_Stop;
		}
		
		If (HitLevelGeometry (Results))
		{
			BadLOF = True;
			Return Trace_Stop;
		}
		
		Return Trace_Skip;
	}
}

//Somewhat based on the MG.
Class MVP_APCAutocannon : MVP_APCMachineGun
{
	Default
	{
		Health 450;
		GibHealth 300;
		Height 20;
		DeathHeight 20;
		Mass 1500;
		Tag "Autocannon Turret";
		Obituary "%o was blown up by an autocannon";
		AttackSound "Vehicle/APC/AutocannonFire";
		AutomapOffsets (0,143);
		KAI_BaseVehicle.VehicleTurret "MVP_APCMGTurret";
		KAI_BaseTurret.MaximumPitch -50;
		KAI_BaseTurret.MinimumPitch 20;
		KAI_BaseTurret.AttackSpeed 180;
		KAI_BaseTurret.FastAttackSpeed 200;
		KAI_Actor.Inaccuracy (2,2,2);
		//KAI_BaseTurret.TurnSoundRadius 4;
		+MissileEvenMore;
	}
	
	Bool FocusFire; //Turned on by the APC, then passed over to the small MG on the autocannon.
	Mixin MVP_AutocannonWarningZoneHandling;
	
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		
		MissileState = FindState ("Fire");
		AttackStates.Push (FindState("Fire",True));
	}
	
	Override Void SpawnVehicleTurret ()
	{
		Vector3 Original = TurretOffsets;
		TurretOffsets = (-0.1,0,1.1); //Temporarily set the autocannons' turret offsets to this, for spawning the small MG, then revert to the previous offsets.
		Super.SpawnVehicleTurret();
		If (FocusFire && Turret) MVP_APCMGTurret(Turret).FocusFire = True;
		If (bNoTargetPrediction) Turret.bNoTargetPrediction = True;
		TurretOffsets = Original;
	}
	
	Override Bool ShouldAttack (Bool NoStateJump)
	{
		If (!KAI_BaseTurret.ShouldAttack()) Return False;
		If (Target && !CheckFOV (Target,90/2)) Return False; //KLUDGE: We need to do the null check here, because as of GZDoom 4.10, it's not done internally. Crashing the game.
		If (IsOverPitchLimits (Target,12,Target.Height/2) != ELEVATION_INBOUNDS) Return False;
		
		If (Target != Self && KAI_CheckMissileRange(Target) && !IsDead (Target) && IsActorHostile (Target) && KAI_TurretCheckLOF (Target,400,128,(0,0,12)))
		{
			If (!NoStateJump)
			{
				SetStateLabel ("Fire");
				WarningZone = WarnNPCs (WRN_EXPLOSIVE,128,threatlevel:HazardInfo.HAZARD_LARGE); //Create a warning zone to warn NPCs wherever the autocannon is aiming.
				If (WarningZone) WarningZone.SetOrigin (GetAttackLocation(),True);
			}
			Return True;
		}
		
		Return False;
	}
	
	States
	{
		Spawn:
			APC2 A 0;
			APC2 # 1
			{
				RotateToVehicle();
				KAI_Look (maxseedist:MaxTargetRange,DEFAULT_HEARDISTANCE,extraflags:KAIL_CHASETARGET);
				Frame = UpdateTurretElevation (2,0,4,6); //C, A, E, G
			}
			Loop;
		See:
			APC2 # 1
			{
				If (WarningZone) WarningZone.Destroy();
				//A_FaceTarget (5,5,flags:FAF_MIDDLE);
				DoCombatTraverse();
				RotateToVehicle();
				KAI_LandVehicleChase (chaseflags:CHF_DONTIDLE|CHF_DONTMOVE);
				UpdateTurretSnapTimer();
				Frame = UpdateTurretElevation (2,0,4,6); //C, A, E, G
			}
			Loop;
		Fire:
			APC2 ###### 1
			{
				If (bNoCombatTraverse) A_FaceTarget (0,0,flags:FAF_MIDDLE);
				Frame = UpdateTurretElevation (2,0,4,6); //C, A, E, G
			}
			APC2 # 3 Light ("AutocannonFlash") Bright
			{
				If (bNoCombatTraverse) A_FaceTarget (0,0,flags:FAF_MIDDLE);
				A_StartSound (AttackSound,CHAN_WEAPON,CHANF_OVERLAP,1.0,0.25);
				Actor Proj = A_SpawnProjectile ("MVP_AutocannonShell",16,flags:CMF_AIMDIRECTION,Pitch); //pew pew
				AddProjectileSpread (Proj,(0.3,-0.3),(0.45,-0.45));
				//If the enemy the shell was fired at is a flying enemy vulnerable to radius damage. Then use the proximity fuze.
				//If (Target && IsFlying (Target) && !Target.bNoRadiusDmg)
				//{
				//	Proj.Tracer = Target;
				//	MVP_AutocannonShell(Proj).IsAirburst = True;
				//}
				A_SpawnItemEx ("MVP_AutocannonCasing",-6,-12,8,FRandom(1,-3),FRandom(-4,-10),FRandom(4,8));
				Frame = UpdateTurretElevation (3,1,5,7); //D, B, F, H
			}
			APC2 ### 8
			{
				If (bNoCombatTraverse) A_FaceTarget(0,0,flags:FAF_MIDDLE);
				//If you have no target, or it's dead.
				If (!Target || IsDead (Target))
				{
					A_ClearTarget();
					LookForPlayers (True); //Look for a new target.
				}
				
				If (Random2[pr_monsterrefire]() < 20 &&
				((Target && IsOverPitchLimits (Target,12,Target.Height/2) != ELEVATION_INBOUNDS) ||
				!KAI_TurretCheckLOF (Target,400,128,(0,0,12))))
				{
					A_ClearTarget();
					Return ResolveState ("See");
				}
				
				HandleChaseTimer();
				
				Frame = UpdateTurretElevation (2,0,4,6); //C, A, E, G
				Return State (Null);
			}
			APC2 # 0 KAI_TurretRefire (10,"See",True,fov:90/2);
			Goto Fire+6;
		Death: //When TG5 finishes the sprites for the gunner getting out the turret, add code to make them work here.
			APC2 Q 0
			{
				Actor Boom = Spawn ("MVP_Explosion",Pos);
				Boom.Scale *= 1.75;
				Boom.SetDamage (192);
				Boom.MeleeRange = 64;
				Boom.bNoGravity = True;
			}
			APC2 Q 1 RotateToVehicle (RTVF_NOTARGETCHECK);
			Wait;
		XDeath:
			APC2 U 0
			{
				Height = 16;
				Actor Boom = Spawn ("MVP_Explosion",Pos);
				Boom.Scale *= 2.5;
				Boom.SetDamage (256);
				Boom.MeleeRange = 96;
				Boom.MaxTargetRange = 384;
				Boom.bNoGravity = True;
				
				Actor Flame = Spawn ("MVP_Flame",Pos);
				MVP_Flame(Flame).Offsets = (0.1,0,4);
				Flame.Scale.X = Flame.Scale.Y = 1.0;
				Flame.Master = Self;
				Flame.ReactionTime *= Int(FRandom (1.25,4.25));
				Flame.SetDamage (8);
				Flame.MaxTargetRange = 64;
				Flame.MeleeRange = 32;
				
				A_SpawnItemEx ("MVP_APCHatch",-12,6,24,FRandom (6,-6),FRandom (6,-6),FRandom (18,24));
			}
			APC2 U 1 RotateToVehicle(RTVF_NOTARGETCHECK);
			Wait;
		GenericFreezeDeath:
			APC2 # 0 {Frame = UpdateTurretElevation (2,0,4,6); /*C, A, E, G*/}
			Goto KAI_BaseVehicle::GenericFreezeDeath;
	}
}

//Generic warning zone handling copied between the autocannon and its' small MG turret.
Mixin Class MVP_AutocannonWarningZoneHandling
{
	Actor WarningZone; //The warning zone the turret creates right before it fires.
	Override Void Tick()
	{
		KAI_BaseTurret.Tick(); //Super.Tick would be the dual MGs' Tick(). Which is bad because the MGs' Tick() handles the marine warnings for its' .50 BMG rounds.
		If (IsFrozen()) Return;
		If (WarningZone) //Move the warning to wherever the shell will go, warning marines in advance.
			WarningZone.SetOrigin (GetAttackLocation(),True);
	}
	
	Override Void OnDestroy()
	{
		Super.OnDestroy();
		If (WarningZone) WarningZone.Destroy();
	}
	
	Override Void Die (Actor Source, Actor Inflictor, Int DmgFlags, Name MeansOfDeath)
	{
		If (WarningZone) WarningZone.Destroy();
		Super.Die (Source, Inflictor, DmgFlags, MeansOfDeath);
	}
	
	//Fire a ray from the direction the turret is facing and return a position to where the ray stopped, which should also be where the projectile with hit.
	Override Vector3 GetAttackLocation ()
	{
		Let Check = New ("MVP_GenericWarnMarineCheck");
		
		Vector3 Direction = (AngleToVector(Angle, Cos(Pitch)), -Sin(Pitch));
		
		Check.Shooter = Self;
		Check.Other = Target;
		Check.Trace ( Level.Vec3Offset (Pos,(0,0,14)), CurSector, Direction, MaxTargetRange, 0 );
		
		Return Check.Results.HitPos;
	}
}

//The smaller MG turret that is attached on the autocannon.
Class MVP_APCMGTurret : MVP_BaseTurret
{
	Default
	{
		Health 125;
		GibHealth 60;
		Height 12;
		DeathHeight 12;
		Radius 24;
		Mass 80;
		RipLevelMin 1;
		MaxTargetRange 6144; //Reduced range compared to most attacks.
		FriendlySeeBlocks 48; //Reduced sight range too.
		AutomapOffsets (0,182);
		KAI_BaseTurret.MaximumPitch -50; //Doesn't elevate quite as high as the other APC turrets.
		KAI_BaseTurret.MinimumPitch 20;
		KAI_BaseTurret.AttackSpeed 200;
		KAI_BaseTurret.FastAttackSpeed 220;
		KAI_BaseTurret.CombatAngleTurnRate 50;
		KAI_BaseTurret.CombatPitchTurnRate 37;
		KAI_Actor.ThreatLevel THREAT_ABOVENORMAL; //Not as dangerous as the autocannon or dual MG.
		Obituary "%o found out that rifle rounds are more dangerous than in the movies";
		Tag "7.62mm Turret";
		AttackSound "Vehicle/APC/SmallMGFire";
		DamageType "RifleBullet";
		DamageFactor "Autocannon", 0.95;
		DamageFactor "Melee", 0.4;
		DamageFactor "Electric", 0.4;
		DamageFactor "ExplosiveImpact", 0.825;
		DamageFactor "Explosion", 0.825;
		DamageFactor "HitScan", 0.9;
		+MissileMore;
		+MissileEvenMore;
	}
	
	Bool FocusFire; //Makes the MG not actively avoid sharing the same target as the turret, even if the shared target isn't a powerful enemy.
	Mixin MVP_AutocannonWarningZoneHandling;
	
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		
		MissileState = FindState ("Fire");
		AttackStates.Push (FindState("Fire",True));
	}
	
	Override Bool ShouldAttack (Bool NoStateJump)
	{
		If (!KAI_BaseTurret.ShouldAttack()) Return False;
		If (Target && !CheckFOV (Target,90/2)) Return False; //KLUDGE: We need to do the null check here, because as of GZDoom 4.10, it's not done internally. Crashing the game.
		If (IsOverPitchLimits (Target,8,Target.Height/2) != ELEVATION_INBOUNDS) Return False;
		
		If (Target != Self && KAI_CheckMissileRange(Target) && !IsDead (Target) && IsActorHostile (Target) && KAI_TurretCheckLOF (Target,150,0,(0,0,8)))
		{
			If (!NoStateJump)
			{
				SetStateLabel ("Fire");
				WarningZone = WarnNPCs (0,48,threatlevel:HazardInfo.HAZARD_MEDIUM); //Create a warning zone to warn marines of wherever the machine gun is aiming.
				If (WarningZone) WarningZone.SetOrigin (GetAttackLocation(),True);
			}
			Return True;
		}
		
		Return False;
	}
	States
	{
		Spawn:
			APC2 I 0;
			APC2 # 1
			{
				RotateToVehicle();
				KAI_Look (maxseedist:MaxTargetRange,DEFAULT_HEARDISTANCE,extraflags:KAIL_CHASETARGET);
				Frame = UpdateTurretElevation (10,8,12,14); //K, I, M, O
			}
			Loop;
		See:
			APC2 # 1
			{
				If (WarningZone) WarningZone.Destroy();
				//A_FaceTarget (6,6,flags:FAF_MIDDLE);
				DoCombatTraverse();
				RotateToVehicle();
				KAI_LandVehicleChase (chaseflags:CHF_DONTIDLE|CHF_DONTMOVE);
				UpdateTurretSnapTimer();
				Frame = UpdateTurretElevation (10,8,12,14); //K, I, M, O
			}
			Loop;
		Fire:
			APC2 ###### 1
			{
				//A_FaceTarget (0,0,flags:FAF_MIDDLE);
				Frame = UpdateTurretElevation (10,8,12,14); //K, I, M, O
			}
			APC2 # 4 Light ("RifleFiringLight") Bright
			{
				//A_FaceTarget (0,0,flags:FAF_MIDDLE);
				
				//Play at half the volume if the autocannon is playing its' firing sound. To emphasize its' volume.
				If (Master && Master.IsActorPlayingSound (CHAN_WEAPON))
					A_StartSound (AttackSound,CHAN_WEAPON,CHANF_OVERLAP,0.75,0.4);
				Else
					A_StartSound (AttackSound,CHAN_WEAPON,CHANF_OVERLAP,1.0,0.4);
				
				Actor Proj = A_SpawnProjectile ("MVP_RifleBullet",8,flags:CMF_AIMDIRECTION,Pitch);
				AddProjectileSpread (Proj,(0.4,-0.4),(0.55,-0.55));
				Actor Casing; Bool B;
				[B, Casing] = A_SpawnItemEx ("MVP_BulletCasing",-16,-3,8,FRandom(1,-1),FRandom(-6,-10),FRandom(6,10));
				Casing.Scale.X = 0.125; Casing.Scale.Y = 0.104166;
				Frame = UpdateTurretElevation (11,9,13,15); //L, J, N, P
			}
			APC2 # 1
			{
				//A_FaceTarget(0,0,flags:FAF_MIDDLE);
				//If you have no target, or it's dead.
				If (!Target || IsDead (Target))
				{
					A_ClearTarget();
					LookForPlayers (True); //Look for a new target.
				}
				
				//If you share a target with the autocannon, then try finding a different one.
				//Unless the shared target is stronger than the turret you are on, in which case don't force yourself to attack a different target.
				If (!FocusFire && Target && Master && Target == Master.Target && AssessThreatLevel (Master.Target, False) <= KAI_Actor(Master).ThreatLevel)
				{
					Actor NewTarget = PickDifferentTarget (Master.Target,Master.Target,2048,512);
					If (NewTarget)
						Target = NewTarget;
				}
				
				If (Random2[pr_monsterrefire]() < 128 &&
				((Target && IsOverPitchLimits (Target,8,Target.Height/2) != ELEVATION_INBOUNDS) ||
				!KAI_TurretCheckLOF (Target,150,0,(0,0,8))))
				{
					A_ClearTarget();
					Return ResolveState ("See");
				}
				
				HandleChaseTimer();
				
				Frame = UpdateTurretElevation (10,8,12,14); //K, I, M, O
				Return State (Null);
			}
			APC2 # 0 KAI_TurretRefire (128,"See",True,fov:90/2);
			Goto Fire+6;
		Death:
			APC2 V 20
			{
				//Match angles with the autocannon, because this off-center turret rotating causes some sprite fuckery due to the nature of sprites.
				//It's not a visible visual bug in motion, since usually the APC is running all over the place and aiming at targets everywhere etc.
				//But it does become visible if you pause, or if the MG is killed while not having matching angle with its' autocannon.
				If (Master)
				{
					Angle = Master.Angle;
					TurretRotationOffset = 0; //Also remove the angle offset relative to the autocannon that was collected in Die().
				}
				RotateToVehicle (RTVF_NOTARGETCHECK);
				Actor Boom = Spawn ("MVP_Explosion",Pos);
				Boom.Scale *= 0.4;
				Boom.SetDamage (24);
				Boom.MaxTargetRange = 64;
				Boom.MeleeRange = 0;
				Boom.bNoGravity = True;
			}
			APC2 WWWWWWWWWWWWWW 2 RotateToVehicle (RTVF_NOTARGETCHECK);
			APC2 X 1 RotateToVehicle (RTVF_NOTARGETCHECK);
			Wait;
		XDeath:
			TNT1 A 0
			{
				Actor Boom = Spawn ("MVP_Explosion",Pos);
				Boom.Scale *= 0.75;
				Boom.SetDamage (48);
				Boom.MaxTargetRange = 96;
				Boom.MeleeRange = 24;
				Boom.bNoGravity = True;
			}
			Stop;
		GenericFreezeDeath:
			APC2 # 0 {Frame = UpdateTurretElevation (10,8,12,14); /*K, I, M, O*/}
			Goto Super::GenericFreezeDeath;
	}
}

Class MVP_DestroyedMGTurretGun : Actor
{
	Default
	{
		Radius 16;
		Height 32;
		XScale 0.65;
		YScale 0.541666;
		Speed 48;
		Mass 200;
		Gravity 1;
		ProjectileKickback 48;
		DamageFunction (Random (64,96));
		DamageType "Melee";
		Obituary "%o was hit by a destroyed machine gun";
		Projectile;
		-NoBlockmap;
		-NoGravity;
		+BloodlessImpact;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			APC3 O 1
			{
				//The turret leans upwards over time as it falls until impact.
				Switch (GetAge())
				{
					Case 35/2:
						Frame = 15;
						Break;
					Case 35:
						Frame = 16;
						Break;
					Case 50:
						Frame = 17;
						Break;
					Default:
						Break;
				}
			}
			Loop;
		Death:
			APC3 O 0 A_StartSound ("SFX/MetalHit",volume:0.75,0.5);
			APC3 O -1;
			Stop;
	}
}

Class MVP_DestroyedAPCFrontDoor : MVP_DestroyedMGTurretGun
{
	Default
	{
		Radius 12;
		Height 48;
		Speed 48;
		Mass 100;
		DamageFunction (Random (48,64));
		ProjectileKickback 16;
		Obituary "%o was hit by an APC's door";
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		If (IsFrozen ()) Return;
		//Slow down the spinning over time.
		If (ReactionTime <= 24 && GetAge() % 8 == 0)
			ReactionTime++;
	}
	
	States
	{
		Spawn:
			APC5 ABCD 2 A_SetTics (ReactionTime);
			Loop;
		Death:
			APC5 E -1 A_StartSound ("SFX/MetalHit",volume:0.5);
			Stop;
	}
}

Class MVP_APCHatch : MVP_DestroyedAPCFrontDoor
{
	Default
	{
		Radius 12;
		Height 8;
		ProjectileKickBack 8;
		DamageFunction (Random (12,24));
		Obituary "%o had an APC hatch fall from the sky";
	}
	
	States
	{
		Spawn:
			APC2 YZ[] 2 A_SetTics (ReactionTime);
			Loop;
		Death:
			APC2 Y -1 A_StartSound ("SFX/MetalHit",volume:0.5);
			Stop;
	}
}
#Include "Sounds/Vehicles/Army Car/Pain Ray/e"
Class MVP_APCWheel : MVP_DestroyedMGTurretGun
{
	Default
	{
		Radius 24;
		Height 32;
		Speed 48;
		Mass 100;
		ProjectileKickback 24;
		DamageFunction (Random (16,32));
		BounceType "Hexen";
		BounceFactor 0.75;
		BounceSound "SFX/WheelHit";
		Obituary "%o was smacked by an APC wheel";
		+CanBounceWater;
		+DontBounceOnSky;
		+BounceOnActors;
	}
	
	Override Void Tick()
	{
		Actor.Tick();
		
		If (IsFrozen() || InStateSequence(CurState,ResolveState ("Death"))) Return;
		
		//Slow down the spinning over time.
		If (ReactionTime <= 24 && GetAge() % 8 == 0)
			ReactionTime++;
		
		//Stop moving if too slow.
		If (Vel.Length() >= 2)
			BounceSound = Default.BounceSound;
		Else
		{
			BounceSound = "";
			ExplodeMissile(); //Hit the ground.
		}
	}
	States
	{
		Spawn:
			APC5 FGHI 2 A_SetTics (ReactionTime);
			Loop;
		Death:
			APC5 J -1;
			Stop;
	}
}

//Grotesque Zandronum-era hack.
Class MVP_DesolidifyToken : Inventory
{
	Default
	{
		ReactionTime 8; //Tic timer before the item leaves.
		+Inventory.Untossable;
	}
	
	Override Void AttachToOwner(Actor Other)
	{
		Super.AttachToOwner(Other);
		
		If (Other)
			Other.bSolid = False;
	}
	
	Override Void DoEffect()
	{
		If (!ReactionTime)
			GoAwayAndDie();
		If (ReactionTime)
			ReactionTime--;
	}
	
	Override Void DetachFromOwner()
	{
		Super.DetachFromOwner();
		If (Owner)
			Owner.bSolid = True;
	}
}

//An alias for the APC, which can be used to spawn the APC through the console with the machine gun included.
Class MVP_APC_MG : MVP_APC
{
	//Spawn only the MG.
	Override Void SpawnVehicleTurret ()
	{
		Turret = KAI_BaseTurret(Spawn ("MVP_APCMachineGun",Pos+TurretOffsets));
		If (Turret)
		{
			Turret.CopyFriendliness (Self,False);
			Turret.Angle = Angle;
			Turret.Pitch = Pitch;
			Turret.Master = Self;
			Turret.TurretOffsets = TurretOffsets;
			User_Turret = "Machine Gun";
			SetTag ("Armored Personnel Carrier (Machine Gun)");
		}
	}
}

Class MVP_APC_Autocannon : MVP_APC
{
	//Spawn only the autocannon.
	Override Void SpawnVehicleTurret ()
	{
		Turret = KAI_BaseTurret(Spawn ("MVP_APCAutocannon",Pos+TurretOffsets));
		If (Turret)
		{
			Turret.CopyFriendliness (Self,False);
			Turret.Angle = Angle;
			Turret.Pitch = Pitch;
			Turret.Master = Self;
			Turret.TurretOffsets = TurretOffsets;
			User_Turret = "Autocannon";
			SetTag ("Armored Personnel Carrier (Autocannon)");
		}
	}
}