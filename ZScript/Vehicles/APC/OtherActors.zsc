//Possibly add a line of fire check that checks if the turret can hit it's target or another enemy as it rotates, before it decides to begin shooting.
//Note to self, looking at the final autocannon sprites, the off-center MG turret on top of the autocannon, should overlay the autocannon sprites, not the other way around.
Class MVP_APCMachineGun : MVP_BaseTurret
{
	Default
	{
		Health 450;
		GibHealth 250;
		Height 32;
		DeathHeight 32;
		Radius 32;
		MaxTargetRange 8192;
		Tag "Machine Gun Turret";
		+MissileMore;
		+LookAllAround;
	}
	Override Bool ShouldAttack ()
	{
		If (!Target) Return False;
		
		If (MVP_CheckMissileRange(Target) && !IsDead (Target) && IsHostile (Target) && Target != Self)
		{
			SetStateLabel ("Fire");
			Return True;
		}
		
		Return False;
	}
	
	Override Void Tick()
	{
		Double OldAngle = Angle;
		Super.Tick();
		
		If (IsFrozen()) Return;
		
		If (AbsAngle (Angle,OldAngle) >= 2 && LastEnemyDelay)
			A_StartSound ("Vehicle/APC/TurretTurn",attenuation:0.8);
	}
	States
	{
		Spawn:
			APC3 A 0;
			APC3 # 1
			{
				RotateToVehicle();
				A_LookEx ();
				Frame = UpdateElevation (3,0,6,9);
			}
			Loop;
		See:
			APC3 # 1
			{
				A_FaceTarget (5,5,flags:FAF_MIDDLE);
				RotateToVehicle();
				A_Chase (Null,Null,CHF_DONTIDLE|CHF_DONTMOVE|CHF_NODIRECTIONTURN);
				MVP_Chase (TurretMode:True);
				UpdateLastEnemyTimer();
				Frame = UpdateElevation (3,0,6,9); //D, A, G, J
			}
			Loop;
		Fire: //Add some LookForPlayers calls here too, so the gun can change targets' mid-attack.
			APC3 ###### 1
			{
				A_FaceTarget (5,5,flags:FAF_MIDDLE);
				Frame = UpdateElevation (3,0,6,9); //D, A, G, J
			}
			APC3 # 3 Light ("50CalFiringLight") //Right shot
			{
				A_FaceTarget (5,5,flags:FAF_MIDDLE);
				A_StartSound ("Vehicle/APC/MGFire",CHAN_WEAPON,CHANF_OVERLAP,1.0,0.5);
				A_SpawnProjectile ("MVP_50CalBullet",12,-8,flags:CMF_AIMDIRECTION,Pitch); //pew pew
				Frame = UpdateElevation (4,1,7,10); //E, B, H, K
			}
			APC3 # 3 Light ("50CalFiringLight") //Left shot
			{
				A_FaceTarget (5,5,flags:FAF_MIDDLE);
				A_StartSound ("Vehicle/APC/MGFire",CHAN_WEAPON,CHANF_OVERLAP,1.0,0.5);
				A_SpawnProjectile ("MVP_50CalBullet",12,8,flags:CMF_AIMDIRECTION,Pitch); //pew pew
				Frame = UpdateElevation (5,2,8,11); //F, C, I, L
			}
			APC3 # 1
			{
				If (!Target || IsDead (Target))
				{
					A_ClearTarget();
					LookForPlayers (True); //Look for a new target.
				}
				
				Frame = UpdateElevation (3,0,6,9); //D, A, G, J
			}
			APC3 # 0 A_MonsterRefire (128,"See");
			Goto Fire+6;
		Death:
			APC3 M 0 {Actor Boom = Spawn ("MVP_Explosion",Pos); Boom.bNoGravity = True;}
			APC3 M 1 RotateToVehicle(True);
			Wait;
		XDeath:
			APC3 N 0
			{
				Height = 16;
				Actor Boom = Spawn ("MVP_Explosion",Pos);
				Boom.Scale *= 1.75;
				Boom.SetDamage (192);
				Boom.MeleeRange = 64;
				Boom.bNoGravity = True;
				
				A_SpawnItemEx ("MVP_DestroyedMGTurretGun",16,0,12,FRandom (16,32),FRandom (-6,6),FRandom (2,6));
			}
			APC3 N 1 RotateToVehicle(True);
			Wait;
	}
}

Class MVP_DestroyedMGTurretGun : Actor
{
	Default
	{
		Radius 8;
		Height 24;
		XScale 0.65;
		YScale 0.541666;
		Speed 128;
		Mass 200;
		Gravity 1;
		ProjectileKickback 16;
		ReactionTime 2;
		DamageFunction (Random (64,96));
		DamageType "Melee";
		Projectile;
		-NoBlockmap;
		-NoGravity;
		+BloodlessImpact;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			APC3 O 1
			{
				//The turret leans upwards over time as it falls until impact.
				Switch (GetAge())
				{
					Case 35/2:
						Frame = 15;
						Break;
					Case 35:
						Frame = 16;
						Break;
					Case 50:
						Frame = 17;
						Break;
					Default:
						Break;
				}
			}
			Loop;
		Death:
			APC3 O 0 A_StartSound ("SFX/MetalHit",volume:0.5,0.5);
			APC3 O -1;
			Stop;
	}
}

//Add splashes for when the bullets fall on different swimmable or solid liquid flats.
Class MVP_50CalBullet : FastProjectile
{
	Default
	{
		Radius 4;
		Height 8;
		Speed 200;
		XScale 0.2;
		YScale 0.166667; //0.2 / 1.2
		DamageFunction (Random (50,70)/10); //A ripper damages an actor with a total radius of 64 MU, 10 times, hence dividing the random damage output by 10.
		ProjectileKickback 8;
		RipperLevel 3;
		Projectile;
		MissileHeight 8;
		Obituary "%o was gunned down by a machine gun";
		Decal "50CalChip";
		DamageType "MarineHMG";
		+Ripper;
	}
	Int RipAmount;
	Const Rips = 5; //Roughly how many actors it'll rip.
	
	//This code makes the bullet aim itself at where its' shooters target will be in the future, and then adjusts the shooters' direction appropriately too.
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		If (!(Target && Target.Target) || Target && Target.Player) Return;
		If (!(Target.Target.Vel.X == 0 && Target.Target.Vel.Y == 0 && Target.Target.Vel.Z == 0))
		{
			VelIntercept (Target.Target);
			//Target.Angle = Angle;
			//Target.Pitch = Pitch;
		}
		Else
		{
			Pitch = Target.Pitch;
			Angle = Target.Angle;
		}
		
		Angle += FRandom (0.8,-0.8);
		Pitch += FRandom (1.0,-1.0);
		Vel3DFromAngle (Speed,Angle,Pitch);
	}
	
	Override Int SpecialMissileHit (Actor Victim)
	{
		If (Victim.bSolid && !Victim.bShootable) Return 1; //Don't stop at decorations that normally block projectiles.
		
		If (Target && (Victim.bIsMonster || Victim.Player) && !(Target.IsHostile (Victim))) Return 1; //Don't harm the shooter or allies.
		
		If (Victim.SpawnHealth() <= 200) bExtremeDeath = True; //Obliterate any weak enemy.
		
		//Stop penetrating if the target has a lot of health, or you ripped for long enough.
		If (Victim.SpawnHealth() >= 500 || RipAmount > Rips*10) bRipper = False;
		
		//Stop ripping if you went through a large enough ally.
		//If (Target && Target.bIsMonster && !(Target.IsHostile(Victim)) && Victim.Radius >= 40 && Victim.Height >= 64) A_Die();
		
		RipAmount++;
		
		If (!Victim.Player && Victim.PainChance <= 80 && Random (0,256) >= 128+48) bPainLess = True; //So monsters aren't frozen in pain from the amount of bullets hitting them.
		Return -1;
	}
	
	//Creates the tracer trail.
	Override Void Tick()
	{
		If (IsFrozen()) {Return;}
		Vector3 oldPos = pos;        
		Super.Tick();
		If (GetAge() < 1) {Return;} //So the trail doesn't spawn way behind the shooter.
		Vector3 path = level.vec3Diff( pos, oldPos );
		double distance = path.length() / 4; //this determines how far apart the particles are
		Vector3 direction = path / distance;
		int steps = int( distance );        
		for( int i = 0; i < steps; i++ )  
		{
			actor mo = Spawn("MVP_50CalTracer", oldPos );        
			oldPos = level.vec3Offset( oldPos, direction );
		}
	}
	States
	{
		Spawn:
			MVP1 A -1 Light ("50CalTracerLight");
			Stop;
		Death: //Bullet hit level geometry.
			TNT1 A 1 A_StartSound ("Vehicle/APC/MGImpact");
			Stop;
		XDeath: //Bullet hit a bleeding actor.
			TNT1 A 1; //Don't play the impact sound on bleeding actors.
			Stop;
		Crash: //Bullet hit a non bleeding actor.
			TNT1 A 1 A_StartSound ("Vehicle/APC/MGImpact");
			Stop;
	}
}

Class MVP_50CalTracer : Actor
{
	Default {RenderStyle "Add"; Scale 0.5; +NoBlockmap;}
	Override Void Tick()
	{
		If (IsFrozen()) Return;
		If (GetAge() >= 1)//This number determines the tracers' length.
			Destroy();
	}
	States
	{
		Spawn:
			MVP1 B -1;
			Stop;
	}
}