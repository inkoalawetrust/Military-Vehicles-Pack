//To do:
//First of all, there's A TON of shit I still have to do, but this is just a list of minor things for me to keep in mind once I'm done with the basics.
//Make the APCs' tag update with what turret it has, for example if it has the autocannon, the tag will be "Armored Personnel Carrier (Autocannon)" until the turret is destroyed.
//Add the small off-center MG on top of the autocannon turret, this is a crucial test for future vehicles, and hopefully it doesn't lead to visual oddities.
/*MAKE SPECIAL HANDLING FOR THE TWO DIFFERENT TURRETS THE APC HAS. Probably by making a User_Turret string variable, whose values are checked at the start of
PostBeginPlay, to change the turrets' VehicleTurret class appropriately.*/

Class MVP_APC : MVP_BaseVehicle
{
	Default
	{
		//$Title Armored Personnel Carrier
		//$Category Vehicles/APC
		//$Sprite APC1A1
		Health 1500;
		GibHealth 500;
		Speed 12;
		FastSpeed 16;
		Height 72;
		Radius 64;
		CameraHeight 48; //Hopefully this matches the height of the viewing port.
		DeathHeight 64; //No height change when killed. Unless gibbed of course.
		RipLevelMin 5;
		Mass 28000;
		MaxStepHeight 48;
		Tag "Armored Personnel Carrier";
		
		//"Armor"
		DamageFactor 0.75; //Generic damage factor.
		DamageFactor "ExplosiveImpact", 0.65;
		DamageFactor "Explosion", 0.65;
		DamageFactor "HitScan", 0.7; //The generic damage type of hitscan attacks.
		DamageFactor "Fire", 0.7;
		//Damage factors specific to the Smart Marines.
		DamageFactor "MarineHMG", 0.70;
		DamageFactor "MarineGrenade", 0.6;
		DamageFactor "MarineRifle", 0.7;
		
		+MVP_BaseVehicle.Transport;
	}
	
	Override Void PostBeginPlay ()
	{
		TurretOffsets = (-0.1,0,4.25);
		Super.PostBeginPlay();
		
		SpawnAPCHeadlights();
	}
	
	//Handle spawning either the autocannon or MG turret, and also handle changing the APC's tag appropriately.
	Override Void SpawnVehicleTurret ()
	{
		If (User_Turret ~== "Machine Gun" || User_Turret ~== "MachineGun" || User_Turret ~== "MG")
		{
			Turret = MVP_BaseTurret(Spawn ("MVP_APCMachineGun",Pos+TurretOffsets));
			If (Turret)
			{
				Turret.CopyFriendliness (Self,False);
				Turret.Angle = Angle;
				Turret.Pitch = Pitch;
				Turret.Master = Self;
				Turret.TurretOffsets = TurretOffsets;
			}
		}
	}
	
	Override Void UserVariableDefaults()
	{
		Super.UserVariableDefaults();
		If (User_MarineAmount == 0) User_MarineAmount = 8;
	}
	
	Override Bool CanAttack ()
	{
		Return (User_MarineAmount > 0 || Turret && !IsDead(Turret));
	}
	
	Override Bool ShouldAttack()
	{
		If (Health <= SpawnHealth()/4)
			bMissileMore = bMissileEvenMore = True;
		
		If (CheckMissileRange() && Target != Goal && !(IsPatrolling() && bChaseGoal))
		{
			If (User_MarineAmount > 0)
			{
				SetStateLabel ("DeployMarines");
				Return True;
			}
		}
		
		bFrightened = AlreadyRetreating = bMissileMore = bMissileEvenMore = False;
		NearestEnemy = Null;
		Return False;
	}
	
	Int MarinesToSpawn, Recursions, DeployTimer;
	
	Int User_MarineAmount;
	String User_Turret;
	
	States
	{
		Spawn:
			APC1 A 2
			{
				A_StopSound (CHAN_MOVING);
				A_StartSound("Vehicle/APC/Idle",CHAN_IDLING,CHANF_LOOPING,attenuation:0.6);
				bStandStill = True;
				A_LookEx (0,0,8192,3072);
				bStandStill = False;
			}
			Loop;
		See:
			APC1 AABBCCDD 2
			{
				A_StopSound (CHAN_IDLING);
				A_StartSound ("Vehicle/APC/Moving",CHAN_MOVING,CHANF_LOOPING,attenuation:0.6);
				
				Bool NoRandomTurn = ((!Target || !User_MarineAmount) && !IsPatrolling()); //Use this for the eponymous MVP_Chase property.
				
				MVP_Chase (True,512,NoRandomTurn);
			}
			Loop;
		DeployMarines:
			TNT1 A 0 A_JumpIf (User_MarineAmount <= 0,"See");
			TNT1 A 0
			{
				A_StopSound (CHAN_MOVING);
				A_StartSound("Vehicle/APC/Idle",CHAN_IDLING,CHANF_LOOPING,attenuation:0.6);
				//Cancel the drop and wait a bit if it's not possible.
				If (Recursions >= MARINE_RECURSIONS)
				{
					DeployTimer = 35;
					Return ResolveState ("See");
				}
				If (!ValidPositionAt ((-112,0),36,68)) //Fine tune these parameters by playtesting.
				{
					Recursions++;
					Return ResolveState ("See");
				}
				
				Return State (Null);
			}
			APC1 E 4;
			APC1 F Random (16,24) A_StartSound ("Vehicle/ArmyTruck/BackOpen",attenuation:0.75);
			APC1 G 6;
			APC1 H 8 A_StartSound ("Vehicle/ArmyTruck/BackSlam",attenuation:0.75);
			TNT1 A 0 {MarinesToSpawn = Random (2,4);}
			//Original code do not copy.
			SpawnLoop:
				APC1 H 0 A_JumpIf (User_MarineAmount <= 0,"EndDeploy");
				APC1 H 0 A_JumpIf (MarinesToSpawn <= 0,"EndDeploy");
				APC1 H 35 {If (Health <= SpawnHealth()/4) Tics = 35/2;} //Smaller spawn interval when about to die.
				APC1 H 0
				{
					Actor Marine;
					Marine = SpawnMarine ((-112, FRandom (10,-10)));
					Marine.SetOrigin ((Marine.Pos.X,Marine.Pos.Y,Marine.Pos.Z+48),False);
					WarnSpecificMarine (Marine); //Get the marine out of the way, so they don't get stuck on each other.
					MarinesToSpawn--;
					User_MarineAmount--;
				}
				Loop;
			EndDeploy:
				APC1 G 12 A_StartSound ("Vehicle/ArmyTruck/BackOpen",attenuation:0.8);
				APC1 F 6;
				APC1 E 4 A_StartSound ("Vehicle/ArmyTruck/BackSlam",attenuation:0.8);
				APC1 E 0
				{
					If (!(Health <= SpawnHealth()/4))
						DeployTimer = Random (2,7)*35;
					Else
						DeployTimer = Random (1,3)*35; //Have a smaller delay if about to die, and you still have troops.
				}
				Goto See;
		Death:
			TNT1 A 0 a_log ("ded");
			Stop;
	}
}