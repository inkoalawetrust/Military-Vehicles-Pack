//To do:
//Make the APC props, such as the gibbed, dead, and prop APC, along with the gibbed turrets (Since the turrets are flung when the APC is gibbed.).

Class MVP_APC : MVP_BaseVehicle
{
	Default
	{
		//$Title Armored Personnel Carrier
		//$Category Vehicles/APC
		//$Sprite APC1A1
		Health 1500;
		GibHealth 500;
		Speed 12;
		FastSpeed 16;
		Height 72;
		Radius 64;
		CameraHeight 48; //Hopefully this matches the height of the viewing port.
		DeathHeight 64; //No height change when killed. Unless gibbed of course.
		RipLevelMin 5;
		Mass 28000;
		MaxStepHeight 48;
		Tag "Armored Personnel Carrier";
		
		//"Armor"
		DamageFactor 0.75; //Generic damage factor.
		DamageFactor "ExplosiveImpact", 0.65;
		DamageFactor "Explosion", 0.65;
		DamageFactor "Explosive", 0.65;
		DamageFactor "HitScan", 0.7; //The generic damage type of hitscan attacks.
		DamageFactor "Fire", 0.7;
		//Damage factors specific to the Smart Marines.
		DamageFactor "MarineHMG", 0.80;
		DamageFactor "MarineGrenade", 0.6;
		DamageFactor "MarineRifle", 0.7;
		//Vehicle damage factors
		DamageFactor "Autocannon", 0.7;
		DamageFactor "RifleBullet", 0.75;
		
		+MVP_BaseVehicle.Transport;
	}
	
	Override Void PostBeginPlay ()
	{
		TurretOffsets = (0.1,0,4.25);
		Super.PostBeginPlay();
		
		SpawnAPCHeadlights();
	}
	
	Override String GetObituary (Actor Victim, Actor Inflictor, Name MOD, Bool PlayerAttack)
	{
		If (Inflictor && Inflictor != Self) //If another actor get killed the player on your behalf.
			Return Inflictor.Obituary;
		
		Return Super.GetObituary (Victim, Inflictor, MOD, PlayerAttack);
	}
	
	//Handle spawning either the autocannon or MG turret, and also handle changing the APC's tag appropriately.
	Override Void SpawnVehicleTurret ()
	{
		If (User_Turret ~== "Machine Gun" || User_Turret ~== "MachineGun" || User_Turret ~== "MG")
		{
			Turret = MVP_BaseTurret(Spawn ("MVP_APCMachineGun",Pos+TurretOffsets));
			If (Turret)
			{
				Turret.CopyFriendliness (Self,False);
				Turret.SpawnFlags = SpawnFlags;
				Turret.HandleSpawnFlags();
				Turret.Angle = Angle;
				Turret.Pitch = Pitch;
				Turret.Master = Self;
				Turret.TurretOffsets = TurretOffsets;
				If (User_NoTargetPrediction) Turret.bNoTargetPrediction = True;
				SetTag ("Armored Personnel Carrier (Machine Gun)");
			}
		}
		Else If (User_Turret ~== "Autocannon")
		{
			Turret = MVP_BaseTurret(Spawn ("MVP_APCAutocannon",Pos+TurretOffsets));
			If (Turret)
			{
				Turret.CopyFriendliness (Self,False);
				Turret.SpawnFlags = SpawnFlags;
				Turret.HandleSpawnFlags();
				Turret.Angle = Angle;
				Turret.Pitch = Pitch;
				Turret.Master = Self;
				Turret.TurretOffsets = TurretOffsets;
				If (User_FocusFire) MVP_APCAutocannon(Turret).FocusFire = True;
				If (User_NoTargetPrediction) Turret.bNoTargetPrediction = True;
				SetTag ("Armored Personnel Carrier (Autocannon)");
			}
		}
	}
	
	Override Void UserVariableDefaults()
	{
		Super.UserVariableDefaults();
		If (User_MarineAmount == 0) User_MarineAmount = 8;
		If (User_RetreatDistance == 0) User_RetreatDistance = 1024;
	}
	
	Override Bool CanAttack ()
	{
		Return (User_MarineAmount > 0 || Turret && !IsDead(Turret));
	}
	
	Override Bool ShouldAttack()
	{
		If (Health <= SpawnHealth()/4)
			bMissileMore = bMissileEvenMore = True;
		
		If (CheckMissileRange() && Target != Goal && !(IsPatrolling() && bChaseGoal))
		{
			If (User_MarineAmount > 0)
			{
				SetStateLabel ("DeployMarines");
				Return True;
			}
		}
		
		bFrightened = AlreadyRetreating = bMissileMore = bMissileEvenMore = False;
		NearestEnemy = Null;
		Return False;
	}
	
	Int MarinesToSpawn, Recursions, DeployTimer;
	
	Int User_MarineAmount;
	String User_Turret;
	Int User_CrushMode;
	Bool User_NoTargetPrediction; //The vehicle will not calculate it's targets' movement and lead its' shots.
	Bool User_FocusFire; //Makes the small MG on the autocannon turret not actively try to not target the same thing as the autocannon.
	
	Enum CorpseCrushModes
	{
		CRUSH_NONE = -1,
		CRUSH_ACTIVE = 0,
		CRUSH_PASSIVE = 1
	};
	
	States
	{
		Spawn:
			APC1 A 2
			{
				A_StopSound (CHAN_MOVING);
				A_StartSound("Vehicle/APC/Idle",CHAN_IDLING,CHANF_LOOPING,attenuation:0.6);
				bStandStill = True;
				A_LookEx (0,0,8192,DEFAULT_HEARDISTANCE);
				bStandStill = False;
			}
			Loop;
		See:
			APC1 AABBCCDD 2
			{
				A_StopSound (CHAN_IDLING);
				A_StartSound ("Vehicle/APC/Moving",CHAN_MOVING,CHANF_LOOPING,attenuation:0.6);
				
				Bool NoRandomTurn = ((!Target || !User_MarineAmount) && !IsPatrolling()); //Use this for the eponymous MVP_Chase property.
				
				MVP_Chase (True,512,NoRandomTurn,False,(User_CrushMode == CRUSH_ACTIVE ? True : False));
				If (User_CrushMode != CRUSH_NONE) MVP_CrushCorpses();
				
				//Have a chance to stop and just have your turret go to town, but be more likely to do so if there's no more marines inside.
				If (Turret && Turret.Health > Turret.SpawnHealth()/4 && !Turret.bDontStayAround && (Target || Turret.Target) && !(IsPowerful (Target) || IsPowerful (Turret.Target)))
				{
					If (User_MarineAmount <= 0 && Random[pr_cajump](0,255) < 4 || User_MarineAmount > 0 && Random[pr_cajump](0,255) < 2)
					{
						//Then check if you are far enough from your nearest enemy or target.
						If ((NearestEnemy && Distance3DSquared (NearestEnemy) >= (User_RetreatDistance*User_RetreatDistance)*1.2)
						|| (Target && Distance3DSquared (Target) >= (User_RetreatDistance*User_RetreatDistance)*1.2))
						{
							If (Turret.CheckSight (Turret.Target))
							{
								A_StopSound (CHAN_MOVING);
								A_StartSound("Vehicle/APC/Idle",CHAN_IDLING,CHANF_LOOPING,attenuation:0.6);
								ChaseTimer = Random (16,48);
								Return ResolveState ("StickAround");
							}
						}
					}
				}
				
				Return State (Null);
			}
			Loop;
		DeployMarines:
			TNT1 A 0 A_JumpIf (User_MarineAmount <= 0,"See");
			TNT1 A 0
			{
				A_StopSound (CHAN_MOVING);
				A_StartSound("Vehicle/APC/Idle",CHAN_IDLING,CHANF_LOOPING,attenuation:0.6);
				//Cancel the drop and wait a bit if it's not possible.
				If (Recursions >= MARINE_RECURSIONS)
				{
					DeployTimer = 35;
					Return ResolveState ("See");
				}
				If (!ValidPositionAt ((-112,0),36,68)) //Fine tune these parameters by playtesting.
				{
					Recursions++;
					Return ResolveState ("See");
				}
				
				Return State (Null);
			}
			APC1 E 4;
			APC1 F Random (16,24) A_StartSound ("Vehicle/ArmyTruck/BackOpen",attenuation:0.75);
			APC1 G 6;
			APC1 H 8 A_StartSound ("Vehicle/ArmyTruck/BackSlam",attenuation:0.75);
			TNT1 A 0 {MarinesToSpawn = Random (2,4);}
			//Original code do not copy.
			SpawnLoop:
				APC1 H 0 A_JumpIf (User_MarineAmount <= 0,"EndDeploy");
				APC1 H 0 A_JumpIf (MarinesToSpawn <= 0,"EndDeploy");
				APC1 H 35 {If (Health <= SpawnHealth()/4) Tics = 35/2;} //Smaller spawn interval when about to die.
				APC1 H 0
				{
					Actor Marine;
					Marine = SpawnMarine ((-112, FRandom (10,-10),0));
					Marine.SetOrigin ((Marine.Pos.X,Marine.Pos.Y,Marine.Pos.Z+48),False);
					WarnSpecificMarine (Marine); //Get the marine out of the way, so they don't get stuck on each other.
					MarinesToSpawn--;
					User_MarineAmount--;
				}
				Loop;
			EndDeploy:
				APC1 G 12 A_StartSound ("Vehicle/ArmyTruck/BackOpen",attenuation:0.8);
				APC1 F 6;
				APC1 E 4 A_StartSound ("Vehicle/ArmyTruck/BackSlam",attenuation:0.8);
				APC1 E 0
				{
					If (!(Health <= SpawnHealth()/4))
						DeployTimer = Random (2,7)*35;
					Else
						DeployTimer = Random (1,3)*35; //Have a smaller delay if about to die, and you still have troops.
				}
				Goto See;
		//Waiting for TG5 to finish the sprite edits of the marine crew getting out of the APC and autocannon.
		/*The APC is supposed to explode, catch on fire, then after about a few seconds, the crew will open the hatches and front door and get out
		then if there were any passengers left when the APC died, a random amount of them will be picked as survivors, and if any of them survive,
		they will open the back doors and get out like they do normally. Then after some time the interiors will catch on fire.
		*/
		Death:
			TNT1 A 0 a_log ("ded");
			Stop;
		XDeath:
			APC4 X -1
			{
				Int RandomFlames = Random (5,10);
				Actor Flame;
				Actor Hatch;
				Vector3 SpawnPos;
				Bool B; //Why the fuck does A_SpawnItemEx return if the spawn was succesfful or not ? Just return the fucking pointer to the spawned actor.
				
				Height = 36;
				
				If (Turret)
				{
					Turret.Master = Null; //Detach turret. The code for actually killing it as well is in the Die() override of MVP_BaseTurret.
					Turret.A_ChangeVelocity (FRandom (16,24),FRandom (16,24),FRandom (24,32),CVF_RELATIVE); //Weeeeeeeee
				}
				
				//Spawn a random amount of gibbed marines.
				If (Random (0,255) < 255/2 && User_MarineAmount)
				{
					Int DeadMarines = Random (0,User_MarineAmount);
					Actor Marine;
					For (Int I; I < DeadMarines; I++)
					{
						Marine = SpawnMarine ((-24,0,Height+4));
						Marine.GiveInventory ("MVP_DesolidifyToken",1);
						Marine.A_Die ('Extreme');
						Marine.A_ChangeVelocity (FRandom (12,-12),FRandom(12,-12),FRandom(8,16),CVF_RELATIVE);
					}
				}
				
				A_SpawnItemEx ("MVP_DestroyedAPCFrontDoor",64,-48,24,FRandom (4,-4),FRandom (-24,-32),FRandom (4,-4));
				[B,Hatch] = A_SpawnItemEx ("MVP_APCHatch",96,8,48,FRandom (4,8),FRandom (6,-6),FRandom (24,32));
				Hatch.Scale.X *= 2; Hatch.Scale.Y *= 2; //Big boy hatch, since the sprites are actually for the autocannons' hatch.
				//Right row wheels, I don't know why the fuck the wheels fly in opposite directions, I've tried fixing it but it just won't go away for some fucking reason.
				A_SpawnItemEx ("MVP_APCWheel",-32,-48,4,FRandom (6,-6),FRandom (24,32),FRandom (6,12));
				A_SpawnItemEx ("MVP_APCWheel",96,-48,4,FRandom (6,-6),FRandom (24,32),FRandom (6,12));
				//Left row wheels
				A_SpawnItemEx ("MVP_APCWheel",96,48,4,FRandom (6,-6),FRandom (24,32),FRandom (6,12));
				A_SpawnItemEx ("MVP_APCWheel",-32,48,4,FRandom (6,-6),FRandom (24,32),FRandom (6,12));
				
				Actor Boom = Spawn ("MVP_BigExplosion",Pos);
				Boom.MaxTargetRange = 384;
				Boom.MeleeRange = 128;
				Boom.SetDamage(384);
				Boom.A_SetScale (2.0);
				
				A_QuakeEx (1,1,1,52,0,768,flags:QF_3D|QF_SCALEDOWN);
				
				//Spawn a random amount of flames around the APC wreck. This really needs to be made into a function.
				For (Int I = 0; I < RandomFlames; I++)
				{
					SpawnPos = (FRandom (-Radius*1.75,Radius*1.75),FRandom (-Radius,Radius),0);
					SpawnPos.Z = GetZAt (SpawnPos.X,SpawnPos.Y);
					Flame = Spawn ("MVP_Flame",SpawnPos); //So is the flame actor.
					
					If (Flame)
					{
						If (!Level.IsPointInLevel (Flame.Pos))
							Flame.Destroy();
						
						If (Flame)
						{
							Flame.Master = Self;
							MVP_Flame(Flame).Offsets = SpawnPos;
							Flame.ReactionTime *= FRandom (0.8,3.5);
						}
					}
				}
			}
			Stop;
	}
}