Class MVP_APC : MVP_BaseVehicle
{
	Default
	{
		//$Title Armored Personnel Carrier
		//$Category Vehicles/APC
		//$Sprite APC1A1
		Health 1500;
		GibHealth 500;
		Speed 12;
		FastSpeed 16;
		Height 72;
		Radius 64;
		CameraHeight 48; //Hopefully this matches the height of the viewing port.
		DeathHeight 72; //No height change when killed. Unless gibbed of course.
		FriendlySeeBlocks 80; //A bit over 10000 map unit sight range, useful for vehicles with actual guns to attack with.
		RipLevelMin 5;
		Mass 28000;
		MaxStepHeight 48;
		Tag "Armored Personnel Carrier";
		ActiveSound "Vehicle/APC/Moving";
		DeathSound "SFX/Explosion";
		
		//"Armor"
		DamageFactor 0.75; //Generic damage factor.
		DamageFactor "ExplosiveImpact", 0.65;
		DamageFactor "Explosion", 0.65;
		DamageFactor "Explosive", 0.65;
		DamageFactor "Grenade", 0.6;
		DamageFactor "HitScan", 0.7; //The generic damage type of hitscan attacks.
		DamageFactor "Fire", 0.7;
		//Damage factors specific to the Smart Marines.
		DamageFactor "MarineHMG", 0.80;
		DamageFactor "MarineGrenade", 0.6;
		DamageFactor "MarineRifle", 0.7;
		//Vehicle damage factors
		DamageFactor "Autocannon", 0.7;
		DamageFactor "RifleBullet", 0.75;
		
		+MVP_BaseVehicle.Transport;
	}
	
	Override Void PostBeginPlay ()
	{
		TurretOffsets = (0.1,0,4.25);
		Super.PostBeginPlay();
		
		MissileState = FindState ("DeployMarines");
	}
	
	Override String GetObituary (Actor Victim, Actor Inflictor, Name MOD, Bool PlayerAttack)
	{
		If (Inflictor && Inflictor != Self) //If another actor killed the player on your behalf.
			Return Inflictor.Obituary;
		
		Return Super.GetObituary (Victim, Inflictor, MOD, PlayerAttack);
	}
	
	//Handle spawning either the autocannon or MG turret, and also handle changing the APC's tag appropriately.
	Override Void SpawnVehicleTurret ()
	{
		If (User_Turret ~== "Machine Gun" || User_Turret ~== "MachineGun" || User_Turret ~== "MG")
		{
			Turret = MVP_BaseTurret(Spawn ("MVP_APCMachineGun",Pos+TurretOffsets));
			If (Turret)
			{
				Turret.CopyFriendliness (Self,False);
				Turret.SpawnFlags = SpawnFlags;
				Turret.HandleSpawnFlags();
				Turret.Angle = Angle;
				Turret.Pitch = Pitch;
				Turret.Master = Self;
				Turret.TurretOffsets = TurretOffsets;
				If (User_NoTargetPrediction) Turret.bNoTargetPrediction = True;
				SetTag ("Armored Personnel Carrier (Machine Gun)");
			}
		}
		Else If (User_Turret ~== "Autocannon")
		{
			Turret = MVP_BaseTurret(Spawn ("MVP_APCAutocannon",Pos+TurretOffsets));
			If (Turret)
			{
				Turret.CopyFriendliness (Self,False);
				Turret.SpawnFlags = SpawnFlags;
				Turret.HandleSpawnFlags();
				Turret.Angle = Angle;
				Turret.Pitch = Pitch;
				Turret.Master = Self;
				Turret.TurretOffsets = TurretOffsets;
				If (User_FocusFire) MVP_APCAutocannon(Turret).FocusFire = True;
				If (User_NoTargetPrediction) Turret.bNoTargetPrediction = True;
				SetTag ("Armored Personnel Carrier (Autocannon)");
			}
		}
	}
	
	Override Void SpawnHeadlights ()
	{
		Headlights.Push (SpawnVehicleHeadlight (Self,(112,20,16),intensity:384));
		Headlights.Push (SpawnVehicleHeadlight (Self,(112,-20,16),intensity:384));
		Headlights.Push (SpawnVehicleHeadlight (Self,(128,32,12),VHSF_BACKLIGHT,(255,0,0),48,(40,80)));
		Headlights.Push (SpawnVehicleHeadlight (Self,(128,-32,12),VHSF_BACKLIGHT,(255,0,0),48,(40,80)));
	}
	
	Override Void UserVariableDefaults()
	{
		If (User_RetreatDistance == 0) User_RetreatDistance = 1024;
		Super.UserVariableDefaults();
		If (User_MarineAmount == 0) User_MarineAmount = 8;
	}
	
	Override Bool CanAttack ()
	{
		Return (User_MarineAmount > 0 || Turret && !IsDead(Turret));
	}
	
	Override Bool ShouldAttack (Bool NoStateJump)
	{
		//More likely to drop marines when about to die.
		If (Health <= SpawnHealth()/4)
			AggressionMultiplier *= 0.5;
		
		If (MVP_CheckMissileRange(Target) && Target != Goal && !(IsPatrolling(Self) && bChaseGoal))
		{
			If (User_MarineAmount > 0)
			{
				If (!NoStateJump) SetStateLabel ("DeployMarines");
				Return True;
			}
		}
		
		//Why is this even here ? No fucking clue, this is why I comment half the codebase.
		AggressionMultiplier = Default.AggressionMultiplier;
		Return False;
	}
	
	Override Bool StayStillAndShoot (Actor CheckSightFrom)
	{
		//Have a chance to stop and just have your turret go to town, but be more likely to do so if there's no more marines inside.
		Int Range;
		If (Turret) Range = Turret.MaxTargetRange;
		Else Range = MaxTargetRange;
		If (Turret && (Turret.Target && Distance3DSquared (Turret.Target) <= Range*Range || Target && Distance3DSquared (Target) <= Range*Range))
		{
			If (Turret && Turret.Health >= Turret.SpawnHealth()/4 && !Turret.bDontStayAround && (Target || Turret.Target) && Turret.ElevationState == Turret.ELEVATION_INBOUNDS
			&& !(IsPowerful (Target) || IsPowerful (Turret.Target)) && !(IsPatrolling(Self) && bChaseGoal))
			{
				If (User_MarineAmount <= 0 && Random[pr_cajump](0,255) < 40 || User_MarineAmount > 0 && Random[pr_cajump](0,255) < 2)
				{//a_log ("running check");
					If (MVP_BaseVehicle.StayStillAndShoot (CheckSightFrom)) //Run basic distance checks.
					{a_log ("bing chilling");
						A_StopSound (CHAN_MOVING);
						A_StartSound("Vehicle/APC/Idle",CHAN_IDLING,CHANF_LOOPING,attenuation:0.6);
						ChaseTimer = Random (16,48);
						SetStateLabel ("StickAround");
						Return True;
					}
				}
			}
		}
		Return False;
	}
	
	Int MarinesToSpawn, Recursions, DeployTimer;
	
	Int User_MarineAmount;
	String User_Turret;
	Int User_CrushMode;
	Bool User_NoTargetPrediction; //The vehicle will not calculate it's targets' movement and lead its' shots.
	Bool User_FocusFire; //Makes the small MG on the autocannon turret not actively try to not target the same thing as the autocannon.
	
	Enum CorpseCrushModes
	{
		CRUSH_NONE = -1,
		CRUSH_ACTIVE = 0,
		CRUSH_PASSIVE = 1
	};
	
	States
	{
		Spawn:
			APC1 A 2
			{
				A_StopSound (CHAN_MOVING);
				A_StartSound("Vehicle/APC/Idle",CHAN_IDLING,CHANF_LOOPING,attenuation:0.6);
				bStandStill = True;
				A_LookEx (0,0,8192,DEFAULT_HEARDISTANCE);
				bStandStill = False;
			}
			Loop;
		See:
			APC1 AABBCCDD 2
			{
				A_StopSound (CHAN_IDLING);
				A_StartSound (ActiveSound,CHAN_MOVING,CHANF_LOOPING,attenuation:0.6);
				
				Bool NoRandomTurn = ((!Target || !User_MarineAmount) && !IsPatrolling(Self)); //Use this for the eponymous MVP_Chase property.
				
				MVP_Chase (MVPC_ATTACKWHENSCARED|(NoRandomTurn ? MVPC_NORANDOMTURN : 0)|(User_CrushMode == CRUSH_ACTIVE ? MVPC_CORPSESEEKER : 0),512);
				If (User_CrushMode != CRUSH_NONE) MVP_CrushCorpses();
			}
			Loop;
		DeployMarines:
			TNT1 A 0 A_JumpIf (User_MarineAmount <= 0,"See");
			TNT1 A 0
			{
				A_StopSound (CHAN_MOVING);
				A_StartSound("Vehicle/APC/Idle",CHAN_IDLING,CHANF_LOOPING,attenuation:0.6);
				//Cancel the drop and wait a bit if it's not possible.
				If (Recursions >= MARINE_RECURSIONS)
				{
					DeployTimer = 35;
					Return ResolveState ("See");
				}
				If (!ValidPositionAt ((-120,0),36,68))
				{
					Recursions++;
					Return ResolveState ("See");
				}
				
				Return State (Null);
			}
			APC1 E 4;
			APC1 F Random (16,24) A_StartSound ("Vehicle/ArmyTruck/BackOpen",attenuation:0.75);
			APC1 G 6;
			APC1 H 8 A_StartSound ("Vehicle/ArmyTruck/BackSlam",attenuation:0.75);
			TNT1 A 0 {MarinesToSpawn = Random (2,4);}
			//Original code do not copy.
			SpawnLoop:
				APC1 H 0 A_JumpIf (User_MarineAmount <= 0,"EndDeploy");
				APC1 H 0 A_JumpIf (MarinesToSpawn <= 0,"EndDeploy");
				APC1 H 35 {If (Health <= SpawnHealth()/4) Tics = 35/2;} //Smaller spawn interval when about to die.
				APC1 H 0
				{
					Actor Marine;
					Marine = SpawnMarine ((-120, FRandom (10,-10),0));
					Marine.SetOrigin ((Marine.Pos.X,Marine.Pos.Y,Marine.Pos.Z+48),False);
					WarnSpecificMarine (Marine); //Get the marine out of the way, so they don't get stuck on each other.
					MarinesToSpawn--;
					User_MarineAmount--;
				}
				Loop;
			EndDeploy:
				APC1 G 12 A_StartSound ("Vehicle/ArmyTruck/BackOpen",attenuation:0.8);
				APC1 F 6;
				APC1 E 4 A_StartSound ("Vehicle/ArmyTruck/BackSlam",attenuation:0.8);
				APC1 E 0
				{
					If (!(Health <= SpawnHealth()/4))
						DeployTimer = Random (2,7)*35;
					Else
						DeployTimer = Random (1,3)*35; //Have a smaller delay if about to die, and you still have troops.
				}
				Goto See;
		//Waiting for TG5 to finish the sprite edits of the marine crew getting out of the APC and autocannon.
		/*The APC is supposed to explode, catch on fire, then after about a few seconds, the crew will open the hatches and front door and get out.
		And THEN the existing death code below runs, where a random amount of passengers also escape.*/
		Death:
			APC4 A 2 Bright
			{
				A_Explode (384,256,XF_HURTSOURCE|XF_EXPLICITDAMAGETYPE,True,damagetype:'Explosion');
				If (User_MarineAmount > 1) User_MarineAmount -= Random (0,User_MarineAmount-1); //Have a random amount of marines survive the explosion.
				If (Random (0,255) < 16) User_MarineAmount = -1; //Small chance for nobody to have survived.
				A_StartSound (DeathSound,CHAN_BODY,attenuation:0.5);
				A_StopSound (CHAN_IDLING);
				A_StopSound (CHAN_MOVING);
			}
			APC4 BC 4 Bright;
			APC4 DE 6 Bright;
			TNT1 A 0
			{
				A_StartSound ("SFX/Fire",flags:CHANF_LOOPING|CHANF_OVERLAP,attenuation:0.65);
				SmokeCounter = Random (8,64); //Might as well make this otherwise useless variable useful.
				WarnMarines (MWRN_WARP|MWRN_ALLIESTOO,80,towho:Self,(32,-48,24));
			}
			//Fall through
		DeathFlameLoop:
			APC4 GHIJ 5 Bright
			{
				Vector3 OldPos = Pos;
				Bool NoThrust = bNoDamageThrust; //In case it was actually on already for some reason.
				
				SetOrigin (Vec3OffsetRelative(Self,(32,-48,24)),False); //Makes the fire damage occur at roughly the actual position it should be, instead of the APC's center.
				bNoDamageThrust = True;
				A_Explode (1,64,XF_HURTSOURCE|XF_EXPLICITDAMAGETYPE|XF_NOTMISSILE,False,64,damagetype:'Fire');
				bNoDamageThrust = False;
				SetOrigin (OldPos,False);
				
				If (User_MarineAmount >= 1) SmokeCounter--; //Only go to the escape state if any passengers survived to begin with.
				If (SmokeCounter <= 0) Return ResolveState ("DeathEscapeLoop");
				
				Return State (Null);
			}
			Loop;
		//Perhaps have the fire stop after a very long amount of time ?
		DeathEscapeLoop:
			APC4 K 6 Bright A_StartSound ("Vehicle/ArmyTruck/BackOpen",flags:CHANF_OVERLAP,attenuation:0.75);
			APC4 L 10 Bright;
			APC4 M 16 Bright A_StartSound ("Vehicle/ArmyTruck/BackSlam",flags:CHANF_OVERLAP,attenuation:0.8);
			APC4 N Random (6,14) Bright A_StartSound ("Vehicle/ArmyTruck/BackOpen",flags:CHANF_OVERLAP,attenuation:0.75);
			APC4 O 5 Bright {SmokeCounter = Random (4,16);}
			APC4 P 4 Bright A_StartSound ("Vehicle/ArmyTruck/BackSlam",flags:CHANF_OVERLAP,attenuation:0.8);
			APC4 QRS 8 Bright;
			APC4 TUVW 5 Bright
			{
				Vector3 OldPos = Pos;
				Bool NoThrust = bNoDamageThrust; //In case it was actually on already for some reason.
				SetOrigin (Vec3OffsetRelative(Self,(32,-48,24)),False); //Makes the fire damage occur at roughly the actual position it should be, instead of the APC's center.
				bNoDamageThrust = True;
				A_Explode (1,64,XF_HURTSOURCE|XF_EXPLICITDAMAGETYPE|XF_NOTMISSILE,False,64,damagetype:'Fire');
				bNoDamageThrust = False;
				SetOrigin (OldPos,False);

				//Quickly get out of the burning APC.
				If (User_MarineAmount && SmokeCounter <= 0)
				{
					Actor Marine;
					Marine = SpawnMarine ((-112, FRandom (10,-10),0));
					Marine.SetOrigin ((Marine.Pos.X,Marine.Pos.Y,Marine.Pos.Z+48),False);
					Marine.DamageMobj (Target,Target,Random (24,96),DeathType,DMG_NO_PAIN|DMG_THRUSTLESS); //Harm the marine by a random amount, the source being the APC's killer.
					WarnSpecificMarine (Marine);
					User_MarineAmount--;
					SmokeCounter = Random (4,16); //Each marine has a random amount of time before they get out too.
				}
				
				SmokeCounter--;
			}
			Goto DeathEscapeLoop+9;
		XDeath:
			APC4 X -1
			{
				Actor Hatch;
				Bool B; //Why the fuck does A_SpawnItemEx return if the spawn was succesfful or not ? Just return the fucking pointer to the spawned actor.
				
				Height = 36;
				
				If (Turret)
				{
					Turret.Master = Null; //Detach turret. The code for actually killing it as well is in the Die() override of MVP_BaseTurret.
					Turret.A_ChangeVelocity (FRandom (16,24),FRandom (16,24),FRandom (24,32),CVF_RELATIVE); //Weeeeeeeee
				}
				
				//Spawn a random amount of gibbed marines.
				If (Random (0,255) < 255/2 && User_MarineAmount)
				{
					Int DeadMarines = Random (0,User_MarineAmount);
					Actor Marine;
					For (Int I; I < DeadMarines; I++)
					{
						Marine = SpawnMarine ((-24,0,Height+4));
						Marine.GiveInventory ("MVP_DesolidifyToken",1);
						Marine.A_Die ('Extreme');
						Marine.A_ChangeVelocity (FRandom (12,-12),FRandom(12,-12),FRandom(8,16),CVF_RELATIVE);
					}
				}
				
				A_SpawnItemEx ("MVP_DestroyedAPCFrontDoor",64,-48,24,FRandom (4,-4),FRandom (-24,-32),FRandom (4,-4));
				[B,Hatch] = A_SpawnItemEx ("MVP_APCHatch",96,8,48,FRandom (4,8),FRandom (6,-6),FRandom (24,32));
				Hatch.Scale.X *= 2; Hatch.Scale.Y *= 2; //Big boy hatch, since the sprites are actually for the autocannons' hatch.
				//Right row wheels, I don't know why the fuck the wheels fly in opposite directions, I've tried fixing it but it just won't go away for some fucking reason.
				A_SpawnItemEx ("MVP_APCWheel",-32,-48,4,FRandom (6,-6),FRandom (24,32),FRandom (6,12));
				A_SpawnItemEx ("MVP_APCWheel",96,-48,4,FRandom (6,-6),FRandom (24,32),FRandom (6,12));
				//Left row wheels
				A_SpawnItemEx ("MVP_APCWheel",96,48,4,FRandom (6,-6),FRandom (24,32),FRandom (6,12));
				A_SpawnItemEx ("MVP_APCWheel",-32,48,4,FRandom (6,-6),FRandom (24,32),FRandom (6,12));
				
				Actor Boom = Spawn ("MVP_BigExplosion",Pos);
				Boom.MaxTargetRange = 384;
				Boom.MeleeRange = 128;
				Boom.SetDamage(384);
				Boom.A_SetScale (2.0);
				
				A_QuakeEx (1,1,1,52,0,768,flags:QF_3D|QF_SCALEDOWN|QF_GROUNDONLY);
				
				//Spawn a random amount of flames around the APC wreck.
				SpawnDeathFlames();
			}
			Stop;
	}
}