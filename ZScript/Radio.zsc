//The radio that is used to issue commands to vehicle friendly to the radio operator.

//To do:
//Make radio work with the KAI NPC order system, apparently I forgot to do this even though I thought I did.

Class MVP_Radio : Weapon
{
	Default
	{
		//$Title Vehicle Radio
		//$Category Weapons
		Scale 0.25;
		Tag "Handheld Transceiver";
		Inventory.PickupMessage "You picked up the vehicle radio";
		Weapon.SelectionOrder 4000;
		Weapon.SlotNumber 1;
		+Weapon.Ammo_Optional;
		+Weapon.NoAutoSwitchTo;
		+Weapon.NoAlert;
		+Inventory.InvBar;
	}
	
	Enum OrderType
	{
		TYPE_RAYCAST = 1, //Order the vehicle in front of the player.
		TYPE_RADIUS = 2, //Order all vehicles around the player.
		TYPE_RAYCASTRADIUS = 3 //Order all vehicles around the impact point of a raycast.
	};
	
	Int CurrentOrder, CurrentType;
	//Bool SelectedUnits;
	//Array <Actor> Selection; //The actor(s) that have been selected to be ordered to go to the specified point.
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		//Default settings
		CurrentOrder = KAI_Actor.ORDER_STAY;
		CurrentType = TYPE_RAYCAST;
		Crosshair = 7; //The default order type requires you to actually aim at the vehicles.
	}
	
	Action Void A_CallRadio()
	{
		If (!Invoker.Owner) Return; //Bruh
		
		FLineTraceData NPCFinder;
		MVP_BaseVehicle Vehicle;
		Double FireZ = Height/2 - Floorclip + (PlayerPawn(Invoker.Owner).AttackZOffset * Player.CrouchFactor);e(); //Replicates https://github.com/ZDoom/gzdoom/blob/master/src/playsim/p_map.cpp#L4512
		KAI_Actor Mobj;
		
		If (Invoker.CurrentType == TYPE_RAYCAST)
		{
			LineTrace (Angle,PLAYERMISSILERANGE,BulletSlope(),0,FireZ,data:NPCFinder);
			Mobj = KAI_Actor(NPCFinder.HitActor);
			
			If (Mobj && IsFriend (Mobj) && Mobj.Health > 0)
			{
				//If (Vehicle.CurrentOrder == Invoker.CurrentOrder) Return;
				
				Invoker.HandleOrders(Mobj);
				Return;
			}
		}
		Else If (Invoker.CurrentType == TYPE_RADIUS)
		{
			DoRadiusCommand (Invoker.Owner.Pos);
			Return;
		}
		Else If (Invoker.CurrentType == TYPE_RAYCASTRADIUS)
		{
			LineTrace (Angle,PLAYERMISSILERANGE,BulletSlope(),0,FireZ,data:NPCFinder);
			DoRadiusCommand (NPCFinder.HitLocation);
			Return;
		}
	}
	
	Action Void HandleOrders (KAI_Actor Other)
	{
		If (!Other) Return;
		
		If (Other.bDormant) Return;
		
		If (Other.CurrentOrder == Invoker.CurrentOrder) Return; //NPC already using order that the radio is set to.
		
		Other.SetNPCOrder(Invoker.CurrentOrder,False,Invoker.Owner);
	}
	
	Action Void DoRadiusCommand (Vector3 Origin, Double Range = 1024)
	{
		BlockThingsIterator VehicleFinder = BlockThingsIterator.CreateFromPos (Origin.X,Origin.Y,Origin.Z,Invoker.Owner.Height,Range,False);
		KAI_Actor Mobj;
		
		While (VehicleFinder.Next())
		{
			Mobj = KAI_Actor(VehicleFinder.Thing);
			If (!Mobj) Continue;
			
			If (IsFriend(Mobj) && Mobj.Health > 0 && Level.Vec3Diff(Origin,Mobj.Pos).Length() <= 1024)
				Invoker.HandleOrders(Mobj);
		}
	}
	
	States
	{
		Spawn:
			RADI Z -1;
			Stop;
		Select:
			//TNT1 A 0 A_Raise ();
			RADI ABCDEF 2 A_OverlayOffset (); //Use custom raising animation.
			Goto Ready;
		Deselect:
			RADI FEDCBA 2;
			TNT1 A 0
			{
				//Invoker.Selection.Clear();
				A_Lower (512);
			}
			Wait;
		Ready:
			RADI F 1 A_WeaponReady (WRF_ALLOWRELOAD);
			Loop;
		//Command KAI NPCs.
		Fire:
			RADI GHIJ 3;
			RADI J 8
			{
				A_StartSound ("Weapon/RadioCall",CHAN_WEAPON);
				A_CallRadio();
			}
			RADI JIHG 2;
			Goto Ready;
		//Change current order.
		AltFire:
			RADI F 0 A_StartSound ("Misc/Chat",CHAN_WEAPON);
			RADI F 5 A_OverlayOffset (wy:8,WOF_ADD);
			RADI F 0
			{
				Invoker.CurrentOrder++;
				
				If (Invoker.CurrentOrder > 3) Invoker.CurrentOrder = KAI_Actor.ORDER_FOLLOW; //Don't go out of bounds.
				
				//If (Invoker.CurrentOrder != ORDER_GOTOPOINT) Invoker.Selection.Clear();
				Switch (Invoker.CurrentOrder)
				{
					Case KAI_Actor.ORDER_WANDER:
						Console.PrintfEx (PRINT_LOW,"\c[Green]Current Order: Move independently");
						Break;
					Case KAI_Actor.ORDER_FOLLOW:
						Console.PrintfEx (PRINT_LOW,"\c[Green]Current Order: Follow player");
						Break;
					Case KAI_Actor.ORDER_STAY:
						Console.PrintfEx (PRINT_LOW,"\c[Green]Current Order: Stay in place");
						Break;
					//Case KAI_Actor.ORDER_GOTOPOINT:
					//	Console.PrintfEx (PRINT_LOW,"\c[Green]Current Order: Go to specified location");
					Default:
						Break;
				}
				
			}
			RADI F 3 A_OverlayOffset (wy:-8,WOF_ADD);
			Goto Ready;
		//Change order method
		Reload:
			RADI F 0 A_StartSound ("Misc/Chat",CHAN_WEAPON);
			RADI F 5 A_OverlayOffset (wy:8,WOF_ADD);
			RADI F 0
			{
				Invoker.CurrentType++;
				
				If (Invoker.CurrentType > 3) Invoker.CurrentType = Invoker.TYPE_RAYCAST; //Don't go out of bounds.
				
				Switch (Invoker.CurrentType)
				{
					Case TYPE_RAYCAST:
						Console.PrintfEx (PRINT_LOW,"\c[Green]Current Order Method: Line of sight");
						Break;
					Case TYPE_RADIUS:
						Console.PrintfEx (PRINT_LOW,"\c[Green]Current Order Method: Radius");
						Break;
					Case TYPE_RAYCASTRADIUS:
						Console.PrintfEx (PRINT_LOW,"\c[Green]Current Order Method: Radius around line of sight");
						Break;
					Default:
						Break;
				}
				
				If (Invoker.CurrentType == TYPE_RAYCAST || Invoker.CurrentType == TYPE_RAYCASTRADIUS)
					A_SetCrosshair (7);
				Else
					A_SetCrosshair (0);
			}
			RADI F 3 A_OverlayOffset (wy:-8,WOF_ADD);
			Goto Ready;
	}
}

Class MVP_MoveToGoal : PatrolPoint{}